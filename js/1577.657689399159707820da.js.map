{"version":3,"file":"js/1577.657689399159707820da.js","mappings":";gHAwBAA,EAAOC,QAAU,Y,UCCjBD,EAAOC,QAAU,c,UCFjBD,EAAOC,QAAU,W,UCEjBD,EAAOC,QAAU,W,UCCjBD,EAAOC,QAAU,U,UCLjBD,EAAOC,QAAU,U,UCDjBD,EAAOC,QAAU,Q,UCCjBD,EAAOC,QAAU,Q,SCDjBD,EAAOC,QAAU,U,UCOjBD,EAAOC,QAAU,U,UCAjBD,EAAOC,QAAU,Q,UCDjBD,EAAOC,QAAU,Q,UCAjBD,EAAOC,QAAU,O,UCNjBD,EAAOC,QAAU,Y,UCKjBD,EAAOC,QAAU,S,UCDjBD,EAAOC,QAAU,Q,UCEjBD,EAAOC,QAAU,Q,UCNjBD,EAAOC,QAAU,a,UCMjBD,EAAOC,QAAU,U,UCAjBD,EAAOC,QAAU,Q,UCNjBD,EAAOC,QAAU,W,UCKjBD,EAAOC,QAAU,Q,UCLjBD,EAAOC,QAAU,Y,UCMjBD,EAAOC,QAAU,U,gBChBjBD,EAAOC,QAAU,CAEbC,SAAU,EAAQ,OAClBC,QAAS,EAAQ,OACjBC,YAAa,EAAQ,OACrBC,QAAS,EAAQ,OACjBC,OAAQ,EAAQ,OAChBC,cAAe,EAAQ,OACvBC,YAAa,EAAQ,OACrBC,YAAa,EAAQ,OACrBC,cAAe,EAAQ,MACvBC,KAAM,EAAQ,OACdC,OAAQ,EAAQ,OAChBC,KAAM,EAAQ,OACdC,IAAK,EAAQ,OACbC,UAAW,EAAQ,OACnBC,MAAO,EAAQ,OACfC,KAAM,EAAQ,OACdC,KAAM,EAAQ,OACdC,WAAY,EAAQ,OACpBC,OAAQ,EAAQ,OAChBC,KAAM,EAAQ,OACdC,SAAU,EAAQ,OAClBC,KAAM,EAAQ,OACdC,SAAU,EAAQ,OAClBC,OAAQ,EAAQ,Y","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/COMPLETE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/DECODED_ALL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/DECODED_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/DESTROY_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/DETUNE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/GLOBAL_DETUNE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/GLOBAL_MUTE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/GLOBAL_RATE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/GLOBAL_VOLUME_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/LOOPED_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/LOOP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/MUTE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/PAN_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/PAUSE_ALL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/PAUSE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/PLAY_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/RATE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/RESUME_ALL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/RESUME_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/SEEK_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/STOP_ALL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/STOP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/UNLOCKED_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/VOLUME_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/index.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Complete Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they complete playback.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('complete', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('complete', listener);\r\n * music.play();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#COMPLETE\r\n * @since 3.16.1\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'complete';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Audio Data Decoded All Event.\r\n * \r\n * This event is dispatched by the Web Audio Sound Manager as a result of calling the `decodeAudio` method,\r\n * once all files passed to the method have been decoded (or errored).\r\n * \r\n * Use `Phaser.Sound.Events#DECODED` to listen for single sounds being decoded, and `DECODED_ALL` to\r\n * listen for them all completing.\r\n * \r\n * Listen to it from the Sound Manager in a Scene using `this.sound.on('decodedall', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * this.sound.once('decodedall', handler);\r\n * this.sound.decodeAudio([ audioFiles ]);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#DECODED_ALL\r\n * @since 3.18.0\r\n */\r\nmodule.exports = 'decodedall';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Audio Data Decoded Event.\r\n * \r\n * This event is dispatched by the Web Audio Sound Manager as a result of calling the `decodeAudio` method.\r\n * \r\n * Listen to it from the Sound Manager in a Scene using `this.sound.on('decoded', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * this.sound.on('decoded', handler);\r\n * this.sound.decodeAudio(key, audioData);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#DECODED\r\n * @since 3.18.0\r\n * \r\n * @param {string} key - The key of the audio file that was decoded and added to the audio cache.\r\n */\r\nmodule.exports = 'decoded';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Destroy Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are destroyed, either\r\n * directly or via a Sound Manager.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('destroy', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('destroy', listener);\r\n * music.destroy();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#DESTROY\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'destroy';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Detune Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their detune value changes.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('detune', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('detune', listener);\r\n * music.play();\r\n * music.setDetune(200);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#DETUNE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} detune - The new detune value of the Sound.\r\n */\r\nmodule.exports = 'detune';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Global Detune Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `detune` property of the Sound Manager is changed, which globally\r\n * adjusts the detuning of all active sounds.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('rate', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#GLOBAL_DETUNE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n * @param {number} detune - The updated detune value.\r\n */\r\nmodule.exports = 'detune';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Global Mute Event.\r\n * \r\n * This event is dispatched by the Sound Manager when its `mute` property is changed, either directly\r\n * or via the `setMute` method. This changes the mute state of all active sounds.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('mute', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#GLOBAL_MUTE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSoundManager|Phaser.Sound.HTML5AudioSoundManager)} soundManager - A reference to the Sound Manager that emitted the event.\r\n * @param {boolean} mute - The mute value. `true` if the Sound Manager is now muted, otherwise `false`.\r\n */\r\nmodule.exports = 'mute';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Global Rate Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `rate` property of the Sound Manager is changed, which globally\r\n * adjusts the playback rate of all active sounds.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('rate', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#GLOBAL_RATE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n * @param {number} rate - The updated rate value.\r\n */\r\nmodule.exports = 'rate';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Global Volume Event.\r\n * \r\n * This event is dispatched by the Sound Manager when its `volume` property is changed, either directly\r\n * or via the `setVolume` method. This changes the volume of all active sounds.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('volume', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#GLOBAL_VOLUME\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSoundManager|Phaser.Sound.HTML5AudioSoundManager)} soundManager - A reference to the sound manager that emitted the event.\r\n * @param {number} volume - The new global volume of the Sound Manager.\r\n */\r\nmodule.exports = 'volume';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Looped Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they loop during playback.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('looped', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('looped', listener);\r\n * music.setLoop(true);\r\n * music.play();\r\n * ```\r\n * \r\n * This is not to be confused with the [LOOP]{@linkcode Phaser.Sound.Events#event:LOOP} event, which only emits when the loop state of a Sound is changed.\r\n *\r\n * @event Phaser.Sound.Events#LOOPED\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'looped';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Loop Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their loop state is changed.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('loop', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('loop', listener);\r\n * music.setLoop(true);\r\n * ```\r\n * \r\n * This is not to be confused with the [LOOPED]{@linkcode Phaser.Sound.Events#event:LOOPED} event, which emits each time a Sound loops during playback.\r\n *\r\n * @event Phaser.Sound.Events#LOOP\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {boolean} loop - The new loop value. `true` if the Sound will loop, otherwise `false`.\r\n */\r\nmodule.exports = 'loop';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Mute Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their mute state changes.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('mute', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('mute', listener);\r\n * music.play();\r\n * music.setMute(true);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#MUTE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {boolean} mute - The mute value. `true` if the Sound is now muted, otherwise `false`.\r\n */\r\nmodule.exports = 'mute';\r\n","/**\r\n * @author       pi-kei\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Pan Event.\r\n *\r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their pan changes.\r\n *\r\n * Listen to it from a Sound instance using `Sound.on('pan', listener)`, i.e.:\r\n *\r\n * ```javascript\r\n * var sound = this.sound.add('key');\r\n * sound.on('pan', listener);\r\n * sound.play();\r\n * sound.setPan(0.5);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#PAN\r\n * @since 3.50.0\r\n *\r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} pan - The new pan of the Sound.\r\n */\r\nmodule.exports = 'pan';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pause All Sounds Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `pauseAll` method is invoked and after all current Sounds\r\n * have been paused.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('pauseall', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#PAUSE_ALL\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n */\r\nmodule.exports = 'pauseall';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Pause Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are paused.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('pause', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('pause', listener);\r\n * music.play();\r\n * music.pause();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#PAUSE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'pause';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Play Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are played.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('play', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('play', listener);\r\n * music.play();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#PLAY\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'play';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Rate Change Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their rate changes.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('rate', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('rate', listener);\r\n * music.play();\r\n * music.setRate(0.5);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#RATE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} rate - The new rate of the Sound.\r\n */\r\nmodule.exports = 'rate';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Resume All Sounds Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `resumeAll` method is invoked and after all current Sounds\r\n * have been resumed.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('resumeall', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#RESUME_ALL\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n */\r\nmodule.exports = 'resumeall';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Resume Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are resumed from a paused state.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('resume', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('resume', listener);\r\n * music.play();\r\n * music.pause();\r\n * music.resume();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#RESUME\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'resume';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Seek Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are seeked to a new position.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('seek', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('seek', listener);\r\n * music.play();\r\n * music.setSeek(5000);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#SEEK\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} detune - The new detune value of the Sound.\r\n */\r\nmodule.exports = 'seek';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Stop All Sounds Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `stopAll` method is invoked and after all current Sounds\r\n * have been stopped.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('stopall', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#STOP_ALL\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n */\r\nmodule.exports = 'stopall';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Stop Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are stopped.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('stop', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('stop', listener);\r\n * music.play();\r\n * music.stop();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#STOP\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'stop';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Unlocked Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched during the update loop when the Sound Manager becomes unlocked. For\r\n * Web Audio this is on the first user gesture on the page.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('unlocked', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#UNLOCKED\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n */\r\nmodule.exports = 'unlocked';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Volume Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their volume changes.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('volume', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('volume', listener);\r\n * music.play();\r\n * music.setVolume(0.5);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#VOLUME\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} volume - The new volume of the Sound.\r\n */\r\nmodule.exports = 'volume';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Sound.Events\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    COMPLETE: require('./COMPLETE_EVENT'),\r\n    DECODED: require('./DECODED_EVENT'),\r\n    DECODED_ALL: require('./DECODED_ALL_EVENT'),\r\n    DESTROY: require('./DESTROY_EVENT'),\r\n    DETUNE: require('./DETUNE_EVENT'),\r\n    GLOBAL_DETUNE: require('./GLOBAL_DETUNE_EVENT'),\r\n    GLOBAL_MUTE: require('./GLOBAL_MUTE_EVENT'),\r\n    GLOBAL_RATE: require('./GLOBAL_RATE_EVENT'),\r\n    GLOBAL_VOLUME: require('./GLOBAL_VOLUME_EVENT'),\r\n    LOOP: require('./LOOP_EVENT'),\r\n    LOOPED: require('./LOOPED_EVENT'),\r\n    MUTE: require('./MUTE_EVENT'),\r\n    PAN: require('./PAN_EVENT'),\r\n    PAUSE_ALL: require('./PAUSE_ALL_EVENT'),\r\n    PAUSE: require('./PAUSE_EVENT'),\r\n    PLAY: require('./PLAY_EVENT'),\r\n    RATE: require('./RATE_EVENT'),\r\n    RESUME_ALL: require('./RESUME_ALL_EVENT'),\r\n    RESUME: require('./RESUME_EVENT'),\r\n    SEEK: require('./SEEK_EVENT'),\r\n    STOP_ALL: require('./STOP_ALL_EVENT'),\r\n    STOP: require('./STOP_EVENT'),\r\n    UNLOCKED: require('./UNLOCKED_EVENT'),\r\n    VOLUME: require('./VOLUME_EVENT')\r\n\r\n};\r\n"],"names":["module","exports","COMPLETE","DECODED","DECODED_ALL","DESTROY","DETUNE","GLOBAL_DETUNE","GLOBAL_MUTE","GLOBAL_RATE","GLOBAL_VOLUME","LOOP","LOOPED","MUTE","PAN","PAUSE_ALL","PAUSE","PLAY","RATE","RESUME_ALL","RESUME","SEEK","STOP_ALL","STOP","UNLOCKED","VOLUME"],"sourceRoot":""}