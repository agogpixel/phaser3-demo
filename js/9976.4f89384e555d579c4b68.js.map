{"version":3,"file":"js/9976.4f89384e555d579c4b68.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/device/Browser.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/device/Features.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/device/OS.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/InputManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/Pointer.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/const.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/keyboard/KeyboardManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/keyboard/keys/KeyCodes.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/mouse/MouseManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/touch/TouchManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/TransformXY.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar OS = require('./OS');\r\n\r\n/**\r\n * Determines the browser type and version running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.browser` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Browser\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} chrome - Set to true if running in Chrome.\r\n * @property {boolean} edge - Set to true if running in Microsoft Edge browser.\r\n * @property {boolean} firefox - Set to true if running in Firefox.\r\n * @property {boolean} ie - Set to true if running in Internet Explorer 11 or less (not Edge).\r\n * @property {boolean} mobileSafari - Set to true if running in Mobile Safari.\r\n * @property {boolean} opera - Set to true if running in Opera.\r\n * @property {boolean} safari - Set to true if running in Safari.\r\n * @property {boolean} silk - Set to true if running in the Silk browser (as used on the Amazon Kindle)\r\n * @property {boolean} trident - Set to true if running a Trident version of Internet Explorer (IE11+)\r\n * @property {number} chromeVersion - If running in Chrome this will contain the major version number.\r\n * @property {number} firefoxVersion - If running in Firefox this will contain the major version number.\r\n * @property {number} ieVersion - If running in Internet Explorer this will contain the major version number. Beyond IE10 you should use Browser.trident and Browser.tridentVersion.\r\n * @property {number} safariVersion - If running in Safari this will contain the major version number.\r\n * @property {number} tridentVersion - If running in Internet Explorer 11 this will contain the major version number. See {@link http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx}\r\n */\r\nvar Browser = {\r\n\r\n    chrome: false,\r\n    chromeVersion: 0,\r\n    edge: false,\r\n    firefox: false,\r\n    firefoxVersion: 0,\r\n    ie: false,\r\n    ieVersion: 0,\r\n    mobileSafari: false,\r\n    opera: false,\r\n    safari: false,\r\n    safariVersion: 0,\r\n    silk: false,\r\n    trident: false,\r\n    tridentVersion: 0\r\n\r\n};\r\n\r\nfunction init ()\r\n{\r\n    var ua = navigator.userAgent;\r\n\r\n    if ((/Edge\\/\\d+/).test(ua))\r\n    {\r\n        Browser.edge = true;\r\n    }\r\n    else if ((/Chrome\\/(\\d+)/).test(ua) && !OS.windowsPhone)\r\n    {\r\n        Browser.chrome = true;\r\n        Browser.chromeVersion = parseInt(RegExp.$1, 10);\r\n    }\r\n    else if ((/Firefox\\D+(\\d+)/).test(ua))\r\n    {\r\n        Browser.firefox = true;\r\n        Browser.firefoxVersion = parseInt(RegExp.$1, 10);\r\n    }\r\n    else if ((/AppleWebKit/).test(ua) && OS.iOS)\r\n    {\r\n        Browser.mobileSafari = true;\r\n    }\r\n    else if ((/MSIE (\\d+\\.\\d+);/).test(ua))\r\n    {\r\n        Browser.ie = true;\r\n        Browser.ieVersion = parseInt(RegExp.$1, 10);\r\n    }\r\n    else if ((/Opera/).test(ua))\r\n    {\r\n        Browser.opera = true;\r\n    }\r\n    else if ((/Safari/).test(ua) && !OS.windowsPhone)\r\n    {\r\n        Browser.safari = true;\r\n    }\r\n    else if ((/Trident\\/(\\d+\\.\\d+)(.*)rv:(\\d+\\.\\d+)/).test(ua))\r\n    {\r\n        Browser.ie = true;\r\n        Browser.trident = true;\r\n        Browser.tridentVersion = parseInt(RegExp.$1, 10);\r\n        Browser.ieVersion = parseInt(RegExp.$3, 10);\r\n    }\r\n\r\n    //  Silk gets its own if clause because its ua also contains 'Safari'\r\n    if ((/Silk/).test(ua))\r\n    {\r\n        Browser.silk = true;\r\n    }\r\n\r\n    return Browser;\r\n}\r\n\r\nmodule.exports = init();\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar OS = require('./OS');\r\nvar Browser = require('./Browser');\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\n\r\n/**\r\n * Determines the features of the browser running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.features` from within any Scene.\r\n *\r\n * @typedef {object} Phaser.Device.Features\r\n * @since 3.0.0\r\n *\r\n * @property {?boolean} canvasBitBltShift - True if canvas supports a 'copy' bitblt onto itself when the source and destination regions overlap.\r\n * @property {boolean} canvas - Is canvas available?\r\n * @property {boolean} file - Is file available?\r\n * @property {boolean} fileSystem - Is fileSystem available?\r\n * @property {boolean} getUserMedia - Does the device support the getUserMedia API?\r\n * @property {boolean} littleEndian - Is the device big or little endian? (only detected if the browser supports TypedArrays)\r\n * @property {boolean} localStorage - Is localStorage available?\r\n * @property {boolean} pointerLock - Is Pointer Lock available?\r\n * @property {boolean} support32bit - Does the device context support 32bit pixel manipulation using array buffer views?\r\n * @property {boolean} vibration - Does the device support the Vibration API?\r\n * @property {boolean} webGL - Is webGL available?\r\n * @property {boolean} worker - Is worker available?\r\n */\r\nvar Features = {\r\n\r\n    canvas: false,\r\n    canvasBitBltShift: null,\r\n    file: false,\r\n    fileSystem: false,\r\n    getUserMedia: true,\r\n    littleEndian: false,\r\n    localStorage: false,\r\n    pointerLock: false,\r\n    support32bit: false,\r\n    vibration: false,\r\n    webGL: false,\r\n    worker: false\r\n\r\n};\r\n\r\n// Check Little or Big Endian system.\r\n// @author Matt DesLauriers (@mattdesl)\r\nfunction checkIsLittleEndian ()\r\n{\r\n    var a = new ArrayBuffer(4);\r\n    var b = new Uint8Array(a);\r\n    var c = new Uint32Array(a);\r\n\r\n    b[0] = 0xa1;\r\n    b[1] = 0xb2;\r\n    b[2] = 0xc3;\r\n    b[3] = 0xd4;\r\n\r\n    if (c[0] === 0xd4c3b2a1)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (c[0] === 0xa1b2c3d4)\r\n    {\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        //  Could not determine endianness\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction init ()\r\n{\r\n    if (typeof importScripts === 'function')\r\n    {\r\n        return Features;\r\n    }\r\n\r\n    Features.canvas = !!window['CanvasRenderingContext2D'];\r\n\r\n    try\r\n    {\r\n        Features.localStorage = !!localStorage.getItem;\r\n    }\r\n    catch (error)\r\n    {\r\n        Features.localStorage = false;\r\n    }\r\n\r\n    Features.file = !!window['File'] && !!window['FileReader'] && !!window['FileList'] && !!window['Blob'];\r\n    Features.fileSystem = !!window['requestFileSystem'];\r\n\r\n    var isUint8 = false;\r\n\r\n    var testWebGL = function ()\r\n    {\r\n        if (window['WebGLRenderingContext'])\r\n        {\r\n            try\r\n            {\r\n                var canvas = CanvasPool.createWebGL(this);\r\n\r\n                var ctx = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n\r\n                var canvas2D = CanvasPool.create2D(this);\r\n\r\n                var ctx2D = canvas2D.getContext('2d');\r\n\r\n                //  Can't be done on a webgl context\r\n                var image = ctx2D.createImageData(1, 1);\r\n\r\n                //  Test to see if ImageData uses CanvasPixelArray or Uint8ClampedArray.\r\n                //  @author Matt DesLauriers (@mattdesl)\r\n                isUint8 = image.data instanceof Uint8ClampedArray;\r\n\r\n                CanvasPool.remove(canvas);\r\n                CanvasPool.remove(canvas2D);\r\n\r\n                return !!ctx;\r\n            }\r\n            catch (e)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    Features.webGL = testWebGL();\r\n\r\n    Features.worker = !!window['Worker'];\r\n\r\n    Features.pointerLock = 'pointerLockElement' in document || 'mozPointerLockElement' in document || 'webkitPointerLockElement' in document;\r\n\r\n    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia;\r\n\r\n    window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n\r\n    Features.getUserMedia = Features.getUserMedia && !!navigator.getUserMedia && !!window.URL;\r\n\r\n    // Older versions of firefox (< 21) apparently claim support but user media does not actually work\r\n    if (Browser.firefox && Browser.firefoxVersion < 21)\r\n    {\r\n        Features.getUserMedia = false;\r\n    }\r\n\r\n    // Excludes iOS versions as they generally wrap UIWebView (eg. Safari WebKit) and it\r\n    // is safer to not try and use the fast copy-over method.\r\n    if (!OS.iOS && (Browser.ie || Browser.firefox || Browser.chrome))\r\n    {\r\n        Features.canvasBitBltShift = true;\r\n    }\r\n\r\n    // Known not to work\r\n    if (Browser.safari || Browser.mobileSafari)\r\n    {\r\n        Features.canvasBitBltShift = false;\r\n    }\r\n\r\n    navigator.vibrate = navigator.vibrate || navigator.webkitVibrate || navigator.mozVibrate || navigator.msVibrate;\r\n\r\n    if (navigator.vibrate)\r\n    {\r\n        Features.vibration = true;\r\n    }\r\n\r\n    if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && typeof Uint32Array !== 'undefined')\r\n    {\r\n        Features.littleEndian = checkIsLittleEndian();\r\n    }\r\n\r\n    Features.support32bit = (\r\n        typeof ArrayBuffer !== 'undefined' &&\r\n        typeof Uint8ClampedArray !== 'undefined' &&\r\n        typeof Int32Array !== 'undefined' &&\r\n        Features.littleEndian !== null &&\r\n        isUint8\r\n    );\r\n\r\n    return Features;\r\n}\r\n\r\nmodule.exports = init();\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Determines the operating system of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.os` from within any Scene.\r\n *\r\n * @typedef {object} Phaser.Device.OS\r\n * @since 3.0.0\r\n *\r\n * @property {boolean} android - Is running on android?\r\n * @property {boolean} chromeOS - Is running on chromeOS?\r\n * @property {boolean} cordova - Is the game running under Apache Cordova?\r\n * @property {boolean} crosswalk - Is the game running under the Intel Crosswalk XDK?\r\n * @property {boolean} desktop - Is running on a desktop?\r\n * @property {boolean} ejecta - Is the game running under Ejecta?\r\n * @property {boolean} electron - Is the game running under GitHub Electron?\r\n * @property {boolean} iOS - Is running on iOS?\r\n * @property {boolean} iPad - Is running on iPad?\r\n * @property {boolean} iPhone - Is running on iPhone?\r\n * @property {boolean} kindle - Is running on an Amazon Kindle?\r\n * @property {boolean} linux - Is running on linux?\r\n * @property {boolean} macOS - Is running on macOS?\r\n * @property {boolean} node - Is the game running under Node.js?\r\n * @property {boolean} nodeWebkit - Is the game running under Node-Webkit?\r\n * @property {boolean} webApp - Set to true if running as a WebApp, i.e. within a WebView\r\n * @property {boolean} windows - Is running on windows?\r\n * @property {boolean} windowsPhone - Is running on a Windows Phone?\r\n * @property {number} iOSVersion - If running in iOS this will contain the major version number.\r\n * @property {number} pixelRatio - PixelRatio of the host device?\r\n */\r\nvar OS = {\r\n\r\n    android: false,\r\n    chromeOS: false,\r\n    cordova: false,\r\n    crosswalk: false,\r\n    desktop: false,\r\n    ejecta: false,\r\n    electron: false,\r\n    iOS: false,\r\n    iOSVersion: 0,\r\n    iPad: false,\r\n    iPhone: false,\r\n    kindle: false,\r\n    linux: false,\r\n    macOS: false,\r\n    node: false,\r\n    nodeWebkit: false,\r\n    pixelRatio: 1,\r\n    webApp: false,\r\n    windows: false,\r\n    windowsPhone: false\r\n\r\n};\r\n\r\nfunction init ()\r\n{\r\n    if (typeof importScripts === 'function')\r\n    {\r\n        return OS;\r\n    }\r\n\r\n    var ua = navigator.userAgent;\r\n\r\n    if ((/Windows/).test(ua))\r\n    {\r\n        OS.windows = true;\r\n    }\r\n    else if ((/Mac OS/).test(ua) && !((/like Mac OS/).test(ua)))\r\n    {\r\n        //  Because iOS 13 identifies as Mac OS:\r\n        if (navigator.maxTouchPoints && navigator.maxTouchPoints > 2)\r\n        {\r\n            OS.iOS = true;\r\n            OS.iPad = true;\r\n\r\n            (navigator.appVersion).match(/Version\\/(\\d+)/);\r\n\r\n            OS.iOSVersion = parseInt(RegExp.$1, 10);\r\n        }\r\n        else\r\n        {\r\n            OS.macOS = true;\r\n        }\r\n    }\r\n    else if ((/Android/).test(ua))\r\n    {\r\n        OS.android = true;\r\n    }\r\n    else if ((/Linux/).test(ua))\r\n    {\r\n        OS.linux = true;\r\n    }\r\n    else if ((/iP[ao]d|iPhone/i).test(ua))\r\n    {\r\n        OS.iOS = true;\r\n\r\n        (navigator.appVersion).match(/OS (\\d+)/);\r\n\r\n        OS.iOSVersion = parseInt(RegExp.$1, 10);\r\n\r\n        OS.iPhone = ua.toLowerCase().indexOf('iphone') !== -1;\r\n        OS.iPad = ua.toLowerCase().indexOf('ipad') !== -1;\r\n    }\r\n    else if ((/Kindle/).test(ua) || (/\\bKF[A-Z][A-Z]+/).test(ua) || (/Silk.*Mobile Safari/).test(ua))\r\n    {\r\n        OS.kindle = true;\r\n\r\n        // This will NOT detect early generations of Kindle Fire, I think there is no reliable way...\r\n        // E.g. \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-80) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true\"\r\n    }\r\n    else if ((/CrOS/).test(ua))\r\n    {\r\n        OS.chromeOS = true;\r\n    }\r\n\r\n    if ((/Windows Phone/i).test(ua) || (/IEMobile/i).test(ua))\r\n    {\r\n        OS.android = false;\r\n        OS.iOS = false;\r\n        OS.macOS = false;\r\n        OS.windows = true;\r\n        OS.windowsPhone = true;\r\n    }\r\n\r\n    var silk = (/Silk/).test(ua);\r\n\r\n    if (OS.windows || OS.macOS || (OS.linux && !silk) || OS.chromeOS)\r\n    {\r\n        OS.desktop = true;\r\n    }\r\n\r\n    //  Windows Phone / Table reset\r\n    if (OS.windowsPhone || (((/Windows NT/i).test(ua)) && ((/Touch/i).test(ua))))\r\n    {\r\n        OS.desktop = false;\r\n    }\r\n\r\n    //  WebApp mode in iOS\r\n    if (navigator.standalone)\r\n    {\r\n        OS.webApp = true;\r\n    }\r\n\r\n    if (typeof importScripts !== 'function')\r\n    {\r\n        if (window.cordova !== undefined)\r\n        {\r\n            OS.cordova = true;\r\n        }\r\n\r\n        if (window.ejecta !== undefined)\r\n        {\r\n            OS.ejecta = true;\r\n        }\r\n    }\r\n\r\n    if (typeof process !== 'undefined' && process.versions && process.versions.node)\r\n    {\r\n        OS.node = true;\r\n    }\r\n\r\n    if (OS.node && typeof process.versions === 'object')\r\n    {\r\n        OS.nodeWebkit = !!process.versions['node-webkit'];\r\n\r\n        OS.electron = !!process.versions.electron;\r\n    }\r\n\r\n    if ((/Crosswalk/).test(ua))\r\n    {\r\n        OS.crosswalk = true;\r\n    }\r\n\r\n    OS.pixelRatio = window['devicePixelRatio'] || 1;\r\n\r\n    return OS;\r\n}\r\n\r\nmodule.exports = init();\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CONST = require('./const');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar GameEvents = require('../core/events');\r\nvar Keyboard = require('./keyboard/KeyboardManager');\r\nvar Mouse = require('./mouse/MouseManager');\r\nvar Pointer = require('./Pointer');\r\nvar Touch = require('./touch/TouchManager');\r\nvar TransformMatrix = require('../gameobjects/components/TransformMatrix');\r\nvar TransformXY = require('../math/TransformXY');\r\n\r\n/**\r\n * @classdesc\r\n * The Input Manager is responsible for handling the pointer related systems in a single Phaser Game instance.\r\n *\r\n * Based on the Game Config it will create handlers for mouse and touch support.\r\n *\r\n * Keyboard and Gamepad are plugins, handled directly by the InputPlugin class.\r\n *\r\n * It then manages the events, pointer creation and general hit test related operations.\r\n *\r\n * You rarely need to interact with the Input Manager directly, and as such, all of its properties and methods\r\n * should be considered private. Instead, you should use the Input Plugin, which is a Scene level system, responsible\r\n * for dealing with all input events for a Scene.\r\n *\r\n * @class InputManager\r\n * @memberof Phaser.Input\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Game instance that owns the Input Manager.\r\n * @param {object} config - The Input Configuration object, as set in the Game Config.\r\n */\r\nvar InputManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function InputManager (game, config)\r\n    {\r\n        /**\r\n         * The Game instance that owns the Input Manager.\r\n         * A Game only maintains on instance of the Input Manager at any time.\r\n         *\r\n         * @name Phaser.Input.InputManager#game\r\n         * @type {Phaser.Game}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * A reference to the global Game Scale Manager.\r\n         * Used for all bounds checks and pointer scaling.\r\n         *\r\n         * @name Phaser.Input.InputManager#scaleManager\r\n         * @type {Phaser.Scale.ScaleManager}\r\n         * @since 3.16.0\r\n         */\r\n        this.scaleManager;\r\n\r\n        /**\r\n         * The Canvas that is used for all DOM event input listeners.\r\n         *\r\n         * @name Phaser.Input.InputManager#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.canvas;\r\n\r\n        /**\r\n         * The Game Configuration object, as set during the game boot.\r\n         *\r\n         * @name Phaser.Input.InputManager#config\r\n         * @type {Phaser.Core.Config}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = config;\r\n\r\n        /**\r\n         * If set, the Input Manager will run its update loop every frame.\r\n         *\r\n         * @name Phaser.Input.InputManager#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The Event Emitter instance that the Input Manager uses to emit events from.\r\n         *\r\n         * @name Phaser.Input.InputManager#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = new EventEmitter();\r\n\r\n        /**\r\n         * Are any mouse or touch pointers currently over the game canvas?\r\n         * This is updated automatically by the canvas over and out handlers.\r\n         *\r\n         * @name Phaser.Input.InputManager#isOver\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.isOver = true;\r\n\r\n        /**\r\n         * The default CSS cursor to be used when interacting with your game.\r\n         *\r\n         * See the `setDefaultCursor` method for more details.\r\n         *\r\n         * @name Phaser.Input.InputManager#defaultCursor\r\n         * @type {string}\r\n         * @since 3.10.0\r\n         */\r\n        this.defaultCursor = '';\r\n\r\n        /**\r\n         * A reference to the Keyboard Manager class, if enabled via the `input.keyboard` Game Config property.\r\n         *\r\n         * @name Phaser.Input.InputManager#keyboard\r\n         * @type {?Phaser.Input.Keyboard.KeyboardManager}\r\n         * @since 3.16.0\r\n         */\r\n        this.keyboard = (config.inputKeyboard) ? new Keyboard(this) : null;\r\n\r\n        /**\r\n         * A reference to the Mouse Manager class, if enabled via the `input.mouse` Game Config property.\r\n         *\r\n         * @name Phaser.Input.InputManager#mouse\r\n         * @type {?Phaser.Input.Mouse.MouseManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.mouse = (config.inputMouse) ? new Mouse(this) : null;\r\n\r\n        /**\r\n         * A reference to the Touch Manager class, if enabled via the `input.touch` Game Config property.\r\n         *\r\n         * @name Phaser.Input.InputManager#touch\r\n         * @type {Phaser.Input.Touch.TouchManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.touch = (config.inputTouch) ? new Touch(this) : null;\r\n\r\n        /**\r\n         * An array of Pointers that have been added to the game.\r\n         * The first entry is reserved for the Mouse Pointer, the rest are Touch Pointers.\r\n         *\r\n         * By default there is 1 touch pointer enabled. If you need more use the `addPointer` method to start them,\r\n         * or set the `input.activePointers` property in the Game Config.\r\n         *\r\n         * @name Phaser.Input.InputManager#pointers\r\n         * @type {Phaser.Input.Pointer[]}\r\n         * @since 3.10.0\r\n         */\r\n        this.pointers = [];\r\n\r\n        /**\r\n         * The number of touch objects activated and being processed each update.\r\n         *\r\n         * You can change this by either calling `addPointer` at run-time, or by\r\n         * setting the `input.activePointers` property in the Game Config.\r\n         *\r\n         * @name Phaser.Input.InputManager#pointersTotal\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.10.0\r\n         */\r\n        this.pointersTotal = config.inputActivePointers;\r\n\r\n        if (config.inputTouch && this.pointersTotal === 1)\r\n        {\r\n            this.pointersTotal = 2;\r\n        }\r\n\r\n        for (var i = 0; i <= this.pointersTotal; i++)\r\n        {\r\n            var pointer = new Pointer(this, i);\r\n\r\n            pointer.smoothFactor = config.inputSmoothFactor;\r\n\r\n            this.pointers.push(pointer);\r\n        }\r\n\r\n        /**\r\n         * The mouse has its own unique Pointer object, which you can reference directly if making a _desktop specific game_.\r\n         * If you are supporting both desktop and touch devices then do not use this property, instead use `activePointer`\r\n         * which will always map to the most recently interacted pointer.\r\n         *\r\n         * @name Phaser.Input.InputManager#mousePointer\r\n         * @type {?Phaser.Input.Pointer}\r\n         * @since 3.10.0\r\n         */\r\n        this.mousePointer = (config.inputMouse) ? this.pointers[0] : null;\r\n\r\n        /**\r\n         * The most recently active Pointer object.\r\n         *\r\n         * If you've only 1 Pointer in your game then this will accurately be either the first finger touched, or the mouse.\r\n         *\r\n         * If your game doesn't need to support multi-touch then you can safely use this property in all of your game\r\n         * code and it will adapt to be either the mouse or the touch, based on device.\r\n         *\r\n         * @name Phaser.Input.InputManager#activePointer\r\n         * @type {Phaser.Input.Pointer}\r\n         * @since 3.0.0\r\n         */\r\n        this.activePointer = this.pointers[0];\r\n\r\n        /**\r\n         * If the top-most Scene in the Scene List receives an input it will stop input from\r\n         * propagating any lower down the scene list, i.e. if you have a UI Scene at the top\r\n         * and click something on it, that click will not then be passed down to any other\r\n         * Scene below. Disable this to have input events passed through all Scenes, all the time.\r\n         *\r\n         * @name Phaser.Input.InputManager#globalTopOnly\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.globalTopOnly = true;\r\n\r\n        /**\r\n         * The time this Input Manager was last updated.\r\n         * This value is populated by the Game Step each frame.\r\n         *\r\n         * @name Phaser.Input.InputManager#time\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.16.2\r\n         */\r\n        this.time = 0;\r\n\r\n        /**\r\n         * A re-cycled point-like object to store hit test values in.\r\n         *\r\n         * @name Phaser.Input.InputManager#_tempPoint\r\n         * @type {{x:number, y:number}}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._tempPoint = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * A re-cycled array to store hit results in.\r\n         *\r\n         * @name Phaser.Input.InputManager#_tempHitTest\r\n         * @type {array}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._tempHitTest = [];\r\n\r\n        /**\r\n         * A re-cycled matrix used in hit test calculations.\r\n         *\r\n         * @name Phaser.Input.InputManager#_tempMatrix\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @private\r\n         * @since 3.4.0\r\n         */\r\n        this._tempMatrix = new TransformMatrix();\r\n\r\n        /**\r\n         * A re-cycled matrix used in hit test calculations.\r\n         *\r\n         * @name Phaser.Input.InputManager#_tempMatrix2\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix2 = new TransformMatrix();\r\n\r\n        /**\r\n         * An internal private var that records Scenes aborting event processing.\r\n         *\r\n         * @name Phaser.Input.InputManager#_tempSkip\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.18.0\r\n         */\r\n        this._tempSkip = false;\r\n\r\n        /**\r\n         * An internal private array that avoids needing to create a new array on every DOM mouse event.\r\n         *\r\n         * @name Phaser.Input.InputManager#mousePointerContainer\r\n         * @type {Phaser.Input.Pointer[]}\r\n         * @private\r\n         * @since 3.18.0\r\n         */\r\n        this.mousePointerContainer = [ this.mousePointer ];\r\n\r\n        game.events.once(GameEvents.BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Boot handler is called by Phaser.Game when it first starts up.\r\n     * The renderer is available by now.\r\n     *\r\n     * @method Phaser.Input.InputManager#boot\r\n     * @protected\r\n     * @fires Phaser.Input.Events#MANAGER_BOOT\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.canvas = this.game.canvas;\r\n\r\n        this.scaleManager = this.game.scale;\r\n\r\n        this.events.emit(Events.MANAGER_BOOT);\r\n\r\n        this.game.events.on(GameEvents.PRE_RENDER, this.preRender, this);\r\n\r\n        this.game.events.once(GameEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Internal canvas state change, called automatically by the Mouse Manager.\r\n     *\r\n     * @method Phaser.Input.InputManager#setCanvasOver\r\n     * @fires Phaser.Input.Events#GAME_OVER\r\n     * @private\r\n     * @since 3.16.0\r\n     *\r\n     * @param {(MouseEvent|TouchEvent)} event - The DOM Event.\r\n     */\r\n    setCanvasOver: function (event)\r\n    {\r\n        this.isOver = true;\r\n\r\n        this.events.emit(Events.GAME_OVER, event);\r\n    },\r\n\r\n    /**\r\n     * Internal canvas state change, called automatically by the Mouse Manager.\r\n     *\r\n     * @method Phaser.Input.InputManager#setCanvasOut\r\n     * @fires Phaser.Input.Events#GAME_OUT\r\n     * @private\r\n     * @since 3.16.0\r\n     *\r\n     * @param {(MouseEvent|TouchEvent)} event - The DOM Event.\r\n     */\r\n    setCanvasOut: function (event)\r\n    {\r\n        this.isOver = false;\r\n\r\n        this.events.emit(Events.GAME_OUT, event);\r\n    },\r\n\r\n    /**\r\n     * Internal update, called automatically by the Game Step right at the start.\r\n     *\r\n     * @method Phaser.Input.InputManager#preRender\r\n     * @private\r\n     * @since 3.18.0\r\n     */\r\n    preRender: function ()\r\n    {\r\n        var time = this.game.loop.now;\r\n        var delta = this.game.loop.delta;\r\n        var scenes = this.game.scene.getScenes(true, true);\r\n\r\n        this.time = time;\r\n\r\n        this.events.emit(Events.MANAGER_UPDATE);\r\n\r\n        for (var i = 0; i < scenes.length; i++)\r\n        {\r\n            var scene = scenes[i];\r\n\r\n            if (scene.sys.input && scene.sys.input.updatePoll(time, delta) && this.globalTopOnly)\r\n            {\r\n                //  If the Scene returns true, it means it captured some input that no other Scene should get, so we bail out\r\n                return;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Tells the Input system to set a custom cursor.\r\n     *\r\n     * This cursor will be the default cursor used when interacting with the game canvas.\r\n     *\r\n     * If an Interactive Object also sets a custom cursor, this is the cursor that is reset after its use.\r\n     *\r\n     * Any valid CSS cursor value is allowed, including paths to image files, i.e.:\r\n     *\r\n     * ```javascript\r\n     * this.input.setDefaultCursor('url(assets/cursors/sword.cur), pointer');\r\n     * ```\r\n     *\r\n     * Please read about the differences between browsers when it comes to the file formats and sizes they support:\r\n     *\r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_User_Interface/Using_URL_values_for_the_cursor_property\r\n     *\r\n     * It's up to you to pick a suitable cursor format that works across the range of browsers you need to support.\r\n     *\r\n     * @method Phaser.Input.InputManager#setDefaultCursor\r\n     * @since 3.10.0\r\n     *\r\n     * @param {string} cursor - The CSS to be used when setting the default cursor.\r\n     */\r\n    setDefaultCursor: function (cursor)\r\n    {\r\n        this.defaultCursor = cursor;\r\n\r\n        if (this.canvas.style.cursor !== cursor)\r\n        {\r\n            this.canvas.style.cursor = cursor;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the InputPlugin when processing over and out events.\r\n     *\r\n     * Tells the Input Manager to set a custom cursor during its postUpdate step.\r\n     *\r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\r\n     *\r\n     * @method Phaser.Input.InputManager#setCursor\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {Phaser.Types.Input.InteractiveObject} interactiveObject - The Interactive Object that called this method.\r\n     */\r\n    setCursor: function (interactiveObject)\r\n    {\r\n        if (interactiveObject.cursor)\r\n        {\r\n            this.canvas.style.cursor = interactiveObject.cursor;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the InputPlugin when processing over and out events.\r\n     *\r\n     * Tells the Input Manager to clear the hand cursor, if set, during its postUpdate step.\r\n     *\r\n     * @method Phaser.Input.InputManager#resetCursor\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {Phaser.Types.Input.InteractiveObject} interactiveObject - The Interactive Object that called this method.\r\n     */\r\n    resetCursor: function (interactiveObject)\r\n    {\r\n        if (interactiveObject.cursor && this.canvas)\r\n        {\r\n            this.canvas.style.cursor = this.defaultCursor;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds new Pointer objects to the Input Manager.\r\n     *\r\n     * By default Phaser creates 2 pointer objects: `mousePointer` and `pointer1`.\r\n     *\r\n     * You can create more either by calling this method, or by setting the `input.activePointers` property\r\n     * in the Game Config, up to a maximum of 10 pointers.\r\n     *\r\n     * The first 10 pointers are available via the `InputPlugin.pointerX` properties, once they have been added\r\n     * via this method.\r\n     *\r\n     * @method Phaser.Input.InputManager#addPointer\r\n     * @since 3.10.0\r\n     *\r\n     * @param {number} [quantity=1] The number of new Pointers to create. A maximum of 10 is allowed in total.\r\n     *\r\n     * @return {Phaser.Input.Pointer[]} An array containing all of the new Pointer objects that were created.\r\n     */\r\n    addPointer: function (quantity)\r\n    {\r\n        if (quantity === undefined) { quantity = 1; }\r\n\r\n        var output = [];\r\n\r\n        if (this.pointersTotal + quantity > 10)\r\n        {\r\n            quantity = 10 - this.pointersTotal;\r\n        }\r\n\r\n        for (var i = 0; i < quantity; i++)\r\n        {\r\n            var id = this.pointers.length;\r\n\r\n            var pointer = new Pointer(this, id);\r\n\r\n            pointer.smoothFactor = this.config.inputSmoothFactor;\r\n\r\n            this.pointers.push(pointer);\r\n\r\n            this.pointersTotal++;\r\n\r\n            output.push(pointer);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Internal method that gets a list of all the active Input Plugins in the game\r\n     * and updates each of them in turn, in reverse order (top to bottom), to allow\r\n     * for DOM top-level event handling simulation.\r\n     *\r\n     * @method Phaser.Input.InputManager#updateInputPlugins\r\n     * @since 3.16.0\r\n     *\r\n     * @param {number} type - The type of event to process.\r\n     * @param {Phaser.Input.Pointer[]} pointers - An array of Pointers on which the event occurred.\r\n     */\r\n    updateInputPlugins: function (type, pointers)\r\n    {\r\n        var scenes = this.game.scene.getScenes(true, true);\r\n\r\n        this._tempSkip = false;\r\n\r\n        for (var i = 0; i < scenes.length; i++)\r\n        {\r\n            var scene = scenes[i];\r\n\r\n            if (scene.sys.input)\r\n            {\r\n                var capture = scene.sys.input.update(type, pointers);\r\n\r\n                if ((capture && this.globalTopOnly) || this._tempSkip)\r\n                {\r\n                    //  If the Scene returns true, or called stopPropagation, it means it captured some input that no other Scene should get, so we bail out\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    //  event.targetTouches = list of all touches on the TARGET ELEMENT (i.e. game dom element)\r\n    //  event.touches = list of all touches on the ENTIRE DOCUMENT, not just the target element\r\n    //  event.changedTouches = the touches that CHANGED in this event, not the total number of them\r\n\r\n    /**\r\n     * Processes a touch start event, as passed in by the TouchManager.\r\n     *\r\n     * @method Phaser.Input.InputManager#onTouchStart\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch event.\r\n     */\r\n    onTouchStart: function (event)\r\n    {\r\n        var pointers = this.pointers;\r\n        var changed = [];\r\n\r\n        for (var c = 0; c < event.changedTouches.length; c++)\r\n        {\r\n            var changedTouch = event.changedTouches[c];\r\n\r\n            for (var i = 1; i < this.pointersTotal; i++)\r\n            {\r\n                var pointer = pointers[i];\r\n\r\n                if (!pointer.active)\r\n                {\r\n                    pointer.touchstart(changedTouch, event);\r\n\r\n                    this.activePointer = pointer;\r\n\r\n                    changed.push(pointer);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.updateInputPlugins(CONST.TOUCH_START, changed);\r\n    },\r\n\r\n    /**\r\n     * Processes a touch move event, as passed in by the TouchManager.\r\n     *\r\n     * @method Phaser.Input.InputManager#onTouchMove\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch event.\r\n     */\r\n    onTouchMove: function (event)\r\n    {\r\n        var pointers = this.pointers;\r\n        var changed = [];\r\n\r\n        for (var c = 0; c < event.changedTouches.length; c++)\r\n        {\r\n            var changedTouch = event.changedTouches[c];\r\n\r\n            for (var i = 1; i < this.pointersTotal; i++)\r\n            {\r\n                var pointer = pointers[i];\r\n\r\n                if (pointer.active && pointer.identifier === changedTouch.identifier)\r\n                {\r\n                    pointer.touchmove(changedTouch, event);\r\n\r\n                    this.activePointer = pointer;\r\n\r\n                    changed.push(pointer);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.updateInputPlugins(CONST.TOUCH_MOVE, changed);\r\n    },\r\n\r\n    //  For touch end its a list of the touch points that have been removed from the surface\r\n    //  https://developer.mozilla.org/en-US/docs/DOM/TouchList\r\n    //  event.changedTouches = the touches that CHANGED in this event, not the total number of them\r\n\r\n    /**\r\n     * Processes a touch end event, as passed in by the TouchManager.\r\n     *\r\n     * @method Phaser.Input.InputManager#onTouchEnd\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch event.\r\n     */\r\n    onTouchEnd: function (event)\r\n    {\r\n        var pointers = this.pointers;\r\n        var changed = [];\r\n\r\n        for (var c = 0; c < event.changedTouches.length; c++)\r\n        {\r\n            var changedTouch = event.changedTouches[c];\r\n\r\n            for (var i = 1; i < this.pointersTotal; i++)\r\n            {\r\n                var pointer = pointers[i];\r\n\r\n                if (pointer.active && pointer.identifier === changedTouch.identifier)\r\n                {\r\n                    pointer.touchend(changedTouch, event);\r\n\r\n                    changed.push(pointer);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.updateInputPlugins(CONST.TOUCH_END, changed);\r\n    },\r\n\r\n    /**\r\n     * Processes a touch cancel event, as passed in by the TouchManager.\r\n     *\r\n     * @method Phaser.Input.InputManager#onTouchCancel\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch event.\r\n     */\r\n    onTouchCancel: function (event)\r\n    {\r\n        var pointers = this.pointers;\r\n        var changed = [];\r\n\r\n        for (var c = 0; c < event.changedTouches.length; c++)\r\n        {\r\n            var changedTouch = event.changedTouches[c];\r\n\r\n            for (var i = 1; i < this.pointersTotal; i++)\r\n            {\r\n                var pointer = pointers[i];\r\n\r\n                if (pointer.active && pointer.identifier === changedTouch.identifier)\r\n                {\r\n                    pointer.touchcancel(changedTouch, event);\r\n\r\n                    changed.push(pointer);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.updateInputPlugins(CONST.TOUCH_CANCEL, changed);\r\n    },\r\n\r\n    /**\r\n     * Processes a mouse down event, as passed in by the MouseManager.\r\n     *\r\n     * @method Phaser.Input.InputManager#onMouseDown\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse event.\r\n     */\r\n    onMouseDown: function (event)\r\n    {\r\n        var mousePointer = this.mousePointer;\r\n\r\n        mousePointer.down(event);\r\n\r\n        mousePointer.updateMotion();\r\n\r\n        this.activePointer = mousePointer;\r\n\r\n        this.updateInputPlugins(CONST.MOUSE_DOWN, this.mousePointerContainer);\r\n    },\r\n\r\n    /**\r\n     * Processes a mouse move event, as passed in by the MouseManager.\r\n     *\r\n     * @method Phaser.Input.InputManager#onMouseMove\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse event.\r\n     */\r\n    onMouseMove: function (event)\r\n    {\r\n        var mousePointer = this.mousePointer;\r\n\r\n        mousePointer.move(event);\r\n\r\n        mousePointer.updateMotion();\r\n\r\n        this.activePointer = mousePointer;\r\n\r\n        this.updateInputPlugins(CONST.MOUSE_MOVE, this.mousePointerContainer);\r\n    },\r\n\r\n    /**\r\n     * Processes a mouse up event, as passed in by the MouseManager.\r\n     *\r\n     * @method Phaser.Input.InputManager#onMouseUp\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse event.\r\n     */\r\n    onMouseUp: function (event)\r\n    {\r\n        var mousePointer = this.mousePointer;\r\n\r\n        mousePointer.up(event);\r\n\r\n        mousePointer.updateMotion();\r\n\r\n        this.activePointer = mousePointer;\r\n\r\n        this.updateInputPlugins(CONST.MOUSE_UP, this.mousePointerContainer);\r\n    },\r\n\r\n    /**\r\n     * Processes a mouse wheel event, as passed in by the MouseManager.\r\n     *\r\n     * @method Phaser.Input.InputManager#onMouseWheel\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {WheelEvent} event - The native DOM Wheel event.\r\n     */\r\n    onMouseWheel: function (event)\r\n    {\r\n        var mousePointer = this.mousePointer;\r\n\r\n        mousePointer.wheel(event);\r\n\r\n        this.activePointer = mousePointer;\r\n\r\n        this.updateInputPlugins(CONST.MOUSE_WHEEL, this.mousePointerContainer);\r\n    },\r\n\r\n    /**\r\n     * Processes a pointer lock change event, as passed in by the MouseManager.\r\n     *\r\n     * @method Phaser.Input.InputManager#onPointerLockChange\r\n     * @fires Phaser.Input.Events#POINTERLOCK_CHANGE\r\n     * @private\r\n     * @since 3.19.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse event.\r\n     */\r\n    onPointerLockChange: function (event)\r\n    {\r\n        var isLocked = this.mouse.locked;\r\n\r\n        this.mousePointer.locked = isLocked;\r\n\r\n        this.events.emit(Events.POINTERLOCK_CHANGE, event, isLocked);\r\n    },\r\n\r\n    /**\r\n     * Checks if the given Game Object should be considered as a candidate for input or not.\r\n     *\r\n     * Checks if the Game Object has an input component that is enabled, that it will render,\r\n     * and finally, if it has a parent, that the parent parent, or any ancestor, is visible or not.\r\n     *\r\n     * @method Phaser.Input.InputManager#inputCandidate\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to test.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera which is being tested against.\r\n     *\r\n     * @return {boolean} `true` if the Game Object should be considered for input, otherwise `false`.\r\n     */\r\n    inputCandidate: function (gameObject, camera)\r\n    {\r\n        var input = gameObject.input;\r\n\r\n        if (!input || !input.enabled || (!input.alwaysEnabled && !gameObject.willRender(camera)))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var visible = true;\r\n        var parent = gameObject.parentContainer;\r\n\r\n        if (parent)\r\n        {\r\n            do\r\n            {\r\n                if (!parent.willRender(camera))\r\n                {\r\n                    visible = false;\r\n                    break;\r\n                }\r\n\r\n                parent = parent.parentContainer;\r\n\r\n            } while (parent);\r\n        }\r\n\r\n        return visible;\r\n    },\r\n\r\n    /**\r\n     * Performs a hit test using the given Pointer and camera, against an array of interactive Game Objects.\r\n     *\r\n     * The Game Objects are culled against the camera, and then the coordinates are translated into the local camera space\r\n     * and used to determine if they fall within the remaining Game Objects hit areas or not.\r\n     *\r\n     * If nothing is matched an empty array is returned.\r\n     *\r\n     * This method is called automatically by InputPlugin.hitTestPointer and doesn't usually need to be invoked directly.\r\n     *\r\n     * @method Phaser.Input.InputManager#hitTest\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Input.Pointer} pointer - The Pointer to test against.\r\n     * @param {array} gameObjects - An array of interactive Game Objects to check.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera which is being tested against.\r\n     * @param {array} [output] - An array to store the results in. If not given, a new empty array is created.\r\n     *\r\n     * @return {array} An array of the Game Objects that were hit during this hit test.\r\n     */\r\n    hitTest: function (pointer, gameObjects, camera, output)\r\n    {\r\n        if (output === undefined) { output = this._tempHitTest; }\r\n\r\n        var tempPoint = this._tempPoint;\r\n\r\n        var csx = camera.scrollX;\r\n        var csy = camera.scrollY;\r\n\r\n        output.length = 0;\r\n\r\n        var x = pointer.x;\r\n        var y = pointer.y;\r\n\r\n        //  Stores the world point inside of tempPoint\r\n        camera.getWorldPoint(x, y, tempPoint);\r\n\r\n        pointer.worldX = tempPoint.x;\r\n        pointer.worldY = tempPoint.y;\r\n\r\n        var point = { x: 0, y: 0 };\r\n\r\n        var matrix = this._tempMatrix;\r\n        var parentMatrix = this._tempMatrix2;\r\n\r\n        for (var i = 0; i < gameObjects.length; i++)\r\n        {\r\n            var gameObject = gameObjects[i];\r\n\r\n            //  Checks if the Game Object can receive input (isn't being ignored by the camera, invisible, etc)\r\n            //  and also checks all of its parents, if any\r\n            if (!this.inputCandidate(gameObject, camera))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var px = tempPoint.x + (csx * gameObject.scrollFactorX) - csx;\r\n            var py = tempPoint.y + (csy * gameObject.scrollFactorY) - csy;\r\n\r\n            if (gameObject.parentContainer)\r\n            {\r\n                gameObject.getWorldTransformMatrix(matrix, parentMatrix);\r\n\r\n                matrix.applyInverse(px, py, point);\r\n            }\r\n            else\r\n            {\r\n                TransformXY(px, py, gameObject.x, gameObject.y, gameObject.rotation, gameObject.scaleX, gameObject.scaleY, point);\r\n            }\r\n\r\n            if (this.pointWithinHitArea(gameObject, point.x, point.y))\r\n            {\r\n                output.push(gameObject);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given x and y coordinate are within the hit area of the Game Object.\r\n     *\r\n     * This method assumes that the coordinate values have already been translated into the space of the Game Object.\r\n     *\r\n     * If the coordinates are within the hit area they are set into the Game Objects Input `localX` and `localY` properties.\r\n     *\r\n     * @method Phaser.Input.InputManager#pointWithinHitArea\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The interactive Game Object to check against.\r\n     * @param {number} x - The translated x coordinate for the hit test.\r\n     * @param {number} y - The translated y coordinate for the hit test.\r\n     *\r\n     * @return {boolean} `true` if the coordinates were inside the Game Objects hit area, otherwise `false`.\r\n     */\r\n    pointWithinHitArea: function (gameObject, x, y)\r\n    {\r\n        //  Normalize the origin\r\n        x += gameObject.displayOriginX;\r\n        y += gameObject.displayOriginY;\r\n\r\n        var input = gameObject.input;\r\n\r\n        if (input && input.hitAreaCallback(input.hitArea, x, y, gameObject))\r\n        {\r\n            input.localX = x;\r\n            input.localY = y;\r\n\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks if the given x and y coordinate are within the hit area of the Interactive Object.\r\n     *\r\n     * This method assumes that the coordinate values have already been translated into the space of the Interactive Object.\r\n     *\r\n     * If the coordinates are within the hit area they are set into the Interactive Objects Input `localX` and `localY` properties.\r\n     *\r\n     * @method Phaser.Input.InputManager#pointWithinInteractiveObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Input.InteractiveObject} object - The Interactive Object to check against.\r\n     * @param {number} x - The translated x coordinate for the hit test.\r\n     * @param {number} y - The translated y coordinate for the hit test.\r\n     *\r\n     * @return {boolean} `true` if the coordinates were inside the Game Objects hit area, otherwise `false`.\r\n     */\r\n    pointWithinInteractiveObject: function (object, x, y)\r\n    {\r\n        if (!object.hitArea)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  Normalize the origin\r\n        x += object.gameObject.displayOriginX;\r\n        y += object.gameObject.displayOriginY;\r\n\r\n        object.localX = x;\r\n        object.localY = y;\r\n\r\n        return object.hitAreaCallback(object.hitArea, x, y, object);\r\n    },\r\n\r\n    /**\r\n     * Transforms the pageX and pageY values of a Pointer into the scaled coordinate space of the Input Manager.\r\n     *\r\n     * @method Phaser.Input.InputManager#transformPointer\r\n     * @since 3.10.0\r\n     *\r\n     * @param {Phaser.Input.Pointer} pointer - The Pointer to transform the values for.\r\n     * @param {number} pageX - The Page X value.\r\n     * @param {number} pageY - The Page Y value.\r\n     * @param {boolean} wasMove - Are we transforming the Pointer from a move event, or an up / down event?\r\n     */\r\n    transformPointer: function (pointer, pageX, pageY, wasMove)\r\n    {\r\n        var p0 = pointer.position;\r\n        var p1 = pointer.prevPosition;\r\n\r\n        //  Store previous position\r\n        p1.x = p0.x;\r\n        p1.y = p0.y;\r\n\r\n        //  Translate coordinates\r\n        var x = this.scaleManager.transformX(pageX);\r\n        var y = this.scaleManager.transformY(pageY);\r\n\r\n        var a = pointer.smoothFactor;\r\n\r\n        if (!wasMove || a === 0)\r\n        {\r\n            //  Set immediately\r\n            p0.x = x;\r\n            p0.y = y;\r\n        }\r\n        else\r\n        {\r\n            //  Apply smoothing\r\n            p0.x = x * a + p1.x * (1 - a);\r\n            p0.y = y * a + p1.y * (1 - a);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys the Input Manager and all of its systems.\r\n     *\r\n     * There is no way to recover from doing this.\r\n     *\r\n     * @method Phaser.Input.InputManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.events.removeAllListeners();\r\n\r\n        this.game.events.off(GameEvents.PRE_RENDER);\r\n\r\n        if (this.keyboard)\r\n        {\r\n            this.keyboard.destroy();\r\n        }\r\n\r\n        if (this.mouse)\r\n        {\r\n            this.mouse.destroy();\r\n        }\r\n\r\n        if (this.touch)\r\n        {\r\n            this.touch.destroy();\r\n        }\r\n\r\n        for (var i = 0; i < this.pointers.length; i++)\r\n        {\r\n            this.pointers[i].destroy();\r\n        }\r\n\r\n        this.pointers = [];\r\n        this._tempHitTest = [];\r\n        this._tempMatrix.destroy();\r\n        this.canvas = null;\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = InputManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Angle = require('../math/angle/Between');\r\nvar Class = require('../utils/Class');\r\nvar Distance = require('../math/distance/DistanceBetween');\r\nvar FuzzyEqual = require('../math/fuzzy/Equal');\r\nvar SmoothStepInterpolation = require('../math/interpolation/SmoothStepInterpolation');\r\nvar Vector2 = require('../math/Vector2');\r\nvar OS = require('../device/OS');\r\n\r\n/**\r\n * @classdesc\r\n * A Pointer object encapsulates both mouse and touch input within Phaser.\r\n *\r\n * By default, Phaser will create 2 pointers for your game to use. If you require more, i.e. for a multi-touch\r\n * game, then use the `InputPlugin.addPointer` method to do so, rather than instantiating this class directly,\r\n * otherwise it won't be managed by the input system.\r\n *\r\n * You can reference the current active pointer via `InputPlugin.activePointer`. You can also use the properties\r\n * `InputPlugin.pointer1` through to `pointer10`, for each pointer you have enabled in your game.\r\n *\r\n * The properties of this object are set by the Input Plugin during processing. This object is then sent in all\r\n * input related events that the Input Plugin emits, so you can reference properties from it directly in your\r\n * callbacks.\r\n *\r\n * @class Pointer\r\n * @memberof Phaser.Input\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} manager - A reference to the Input Manager.\r\n * @param {number} id - The internal ID of this Pointer.\r\n */\r\nvar Pointer = new Class({\r\n\r\n    initialize:\r\n\r\n    function Pointer (manager, id)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Pointer#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * The internal ID of this Pointer.\r\n         *\r\n         * @name Phaser.Input.Pointer#id\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.id = id;\r\n\r\n        /**\r\n         * The most recent native DOM Event this Pointer has processed.\r\n         *\r\n         * @name Phaser.Input.Pointer#event\r\n         * @type {(TouchEvent|MouseEvent|WheelEvent)}\r\n         * @since 3.0.0\r\n         */\r\n        this.event;\r\n\r\n        /**\r\n         * The DOM element the Pointer was pressed down on, taken from the DOM event.\r\n         * In a default set-up this will be the Canvas that Phaser is rendering to, or the Window element.\r\n         *\r\n         * @name Phaser.Input.Pointer#downElement\r\n         * @type {any}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.downElement;\r\n\r\n        /**\r\n         * The DOM element the Pointer was released on, taken from the DOM event.\r\n         * In a default set-up this will be the Canvas that Phaser is rendering to, or the Window element.\r\n         *\r\n         * @name Phaser.Input.Pointer#upElement\r\n         * @type {any}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.upElement;\r\n\r\n        /**\r\n         * The camera the Pointer interacted with during its last update.\r\n         *\r\n         * A Pointer can only ever interact with one camera at once, which will be the top-most camera\r\n         * in the list should multiple cameras be positioned on-top of each other.\r\n         *\r\n         * @name Phaser.Input.Pointer#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.camera = null;\r\n\r\n        /**\r\n         * A read-only property that indicates which button was pressed, or released, on the pointer\r\n         * during the most recent event. It is only set during `up` and `down` events.\r\n         *\r\n         * On Touch devices the value is always 0.\r\n         *\r\n         * Users may change the configuration of buttons on their pointing device so that if an event's button property\r\n         * is zero, it may not have been caused by the button that is physically left–most on the pointing device;\r\n         * however, it should behave as if the left button was clicked in the standard button layout.\r\n         *\r\n         * @name Phaser.Input.Pointer#button\r\n         * @type {number}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.18.0\r\n         */\r\n        this.button = 0;\r\n\r\n        /**\r\n         * 0: No button or un-initialized\r\n         * 1: Left button\r\n         * 2: Right button\r\n         * 4: Wheel button or middle button\r\n         * 8: 4th button (typically the \"Browser Back\" button)\r\n         * 16: 5th button (typically the \"Browser Forward\" button)\r\n         *\r\n         * For a mouse configured for left-handed use, the button actions are reversed.\r\n         * In this case, the values are read from right to left.\r\n         *\r\n         * @name Phaser.Input.Pointer#buttons\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.buttons = 0;\r\n\r\n        /**\r\n         * The position of the Pointer in screen space.\r\n         *\r\n         * @name Phaser.Input.Pointer#position\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector2();\r\n\r\n        /**\r\n         * The previous position of the Pointer in screen space.\r\n         *\r\n         * The old x and y values are stored in here during the InputManager.transformPointer call.\r\n         *\r\n         * Use the properties `velocity`, `angle` and `distance` to create your own gesture recognition.\r\n         *\r\n         * @name Phaser.Input.Pointer#prevPosition\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.prevPosition = new Vector2();\r\n\r\n        /**\r\n         * An internal vector used for calculations of the pointer speed and angle.\r\n         *\r\n         * @name Phaser.Input.Pointer#midPoint\r\n         * @type {Phaser.Math.Vector2}\r\n         * @private\r\n         * @since 3.16.0\r\n         */\r\n        this.midPoint = new Vector2(-1, -1);\r\n\r\n        /**\r\n         * The current velocity of the Pointer, based on its current and previous positions.\r\n         *\r\n         * This value is smoothed out each frame, according to the `motionFactor` property.\r\n         *\r\n         * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\r\n         * it changes based on movement alone - a button doesn't have to be pressed first.\r\n         *\r\n         * @name Phaser.Input.Pointer#velocity\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.velocity = new Vector2();\r\n\r\n        /**\r\n         * The current angle the Pointer is moving, in radians, based on its previous and current position.\r\n         *\r\n         * The angle is based on the old position facing to the current position.\r\n         *\r\n         * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\r\n         * it changes based on movement alone - a button doesn't have to be pressed first.\r\n         *\r\n         * @name Phaser.Input.Pointer#angle\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.angle = 0;\r\n\r\n        /**\r\n         * The distance the Pointer has moved, based on its previous and current position.\r\n         *\r\n         * This value is smoothed out each frame, according to the `motionFactor` property.\r\n         *\r\n         * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\r\n         * it changes based on movement alone - a button doesn't have to be pressed first.\r\n         *\r\n         * If you need the total distance travelled since the primary buttons was pressed down,\r\n         * then use the `Pointer.getDistance` method.\r\n         *\r\n         * @name Phaser.Input.Pointer#distance\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.distance = 0;\r\n\r\n        /**\r\n         * The smoothing factor to apply to the Pointer position.\r\n         *\r\n         * Due to their nature, pointer positions are inherently noisy. While this is fine for lots of games, if you need cleaner positions\r\n         * then you can set this value to apply an automatic smoothing to the positions as they are recorded.\r\n         *\r\n         * The default value of zero means 'no smoothing'.\r\n         * Set to a small value, such as 0.2, to apply an average level of smoothing between positions. You can do this by changing this\r\n         * value directly, or by setting the `input.smoothFactor` property in the Game Config.\r\n         *\r\n         * Positions are only smoothed when the pointer moves. If the primary button on this Pointer enters an Up or Down state, then the position\r\n         * is always precise, and not smoothed.\r\n         *\r\n         * @name Phaser.Input.Pointer#smoothFactor\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.16.0\r\n         */\r\n        this.smoothFactor = 0;\r\n\r\n        /**\r\n         * The factor applied to the motion smoothing each frame.\r\n         *\r\n         * This value is passed to the Smooth Step Interpolation that is used to calculate the velocity,\r\n         * angle and distance of the Pointer. It's applied every frame, until the midPoint reaches the current\r\n         * position of the Pointer. 0.2 provides a good average but can be increased if you need a\r\n         * quicker update and are working in a high performance environment. Never set this value to\r\n         * zero.\r\n         *\r\n         * @name Phaser.Input.Pointer#motionFactor\r\n         * @type {number}\r\n         * @default 0.2\r\n         * @since 3.16.0\r\n         */\r\n        this.motionFactor = 0.2;\r\n\r\n        /**\r\n         * The x position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.\r\n         *\r\n         * If you wish to use this value _outside_ of an input event handler then you should update it first by calling\r\n         * the `Pointer.updateWorldPoint` method.\r\n         *\r\n         * @name Phaser.Input.Pointer#worldX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.10.0\r\n         */\r\n        this.worldX = 0;\r\n\r\n        /**\r\n         * The y position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.\r\n         *\r\n         * If you wish to use this value _outside_ of an input event handler then you should update it first by calling\r\n         * the `Pointer.updateWorldPoint` method.\r\n         *\r\n         * @name Phaser.Input.Pointer#worldY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.10.0\r\n         */\r\n        this.worldY = 0;\r\n\r\n        /**\r\n         * Time when this Pointer was most recently moved (regardless of the state of its buttons, if any)\r\n         *\r\n         * @name Phaser.Input.Pointer#moveTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.moveTime = 0;\r\n\r\n        /**\r\n         * X coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#downX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.downX = 0;\r\n\r\n        /**\r\n         * Y coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#downY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.downY = 0;\r\n\r\n        /**\r\n         * The Event timestamp when the first button, or Touch input, was pressed. Used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#downTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.downTime = 0;\r\n\r\n        /**\r\n         * X coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#upX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.upX = 0;\r\n\r\n        /**\r\n         * Y coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#upY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.upY = 0;\r\n\r\n        /**\r\n         * The Event timestamp when the final button, or Touch input, was released. Used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#upTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.upTime = 0;\r\n\r\n        /**\r\n         * Is the primary button down? (usually button 0, the left mouse button)\r\n         *\r\n         * @name Phaser.Input.Pointer#primaryDown\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.primaryDown = false;\r\n\r\n        /**\r\n         * Is _any_ button on this pointer considered as being down?\r\n         *\r\n         * @name Phaser.Input.Pointer#isDown\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isDown = false;\r\n\r\n        /**\r\n         * Did the previous input event come from a Touch input (true) or Mouse? (false)\r\n         *\r\n         * @name Phaser.Input.Pointer#wasTouch\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.wasTouch = false;\r\n\r\n        /**\r\n         * Did this Pointer get canceled by a touchcancel event?\r\n         *\r\n         * Note: \"canceled\" is the American-English spelling of \"cancelled\". Please don't submit PRs correcting it!\r\n         *\r\n         * @name Phaser.Input.Pointer#wasCanceled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.15.0\r\n         */\r\n        this.wasCanceled = false;\r\n\r\n        /**\r\n         * If the mouse is locked, the horizontal relative movement of the Pointer in pixels since last frame.\r\n         *\r\n         * @name Phaser.Input.Pointer#movementX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.movementX = 0;\r\n\r\n        /**\r\n         * If the mouse is locked, the vertical relative movement of the Pointer in pixels since last frame.\r\n         *\r\n         * @name Phaser.Input.Pointer#movementY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.movementY = 0;\r\n\r\n        /**\r\n         * The identifier property of the Pointer as set by the DOM event when this Pointer is started.\r\n         *\r\n         * @name Phaser.Input.Pointer#identifier\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this.identifier = 0;\r\n\r\n        /**\r\n         * The pointerId property of the Pointer as set by the DOM event when this Pointer is started.\r\n         * The browser can and will recycle this value.\r\n         *\r\n         * @name Phaser.Input.Pointer#pointerId\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this.pointerId = null;\r\n\r\n        /**\r\n         * An active Pointer is one that is currently pressed down on the display.\r\n         * A Mouse is always considered as active.\r\n         *\r\n         * @name Phaser.Input.Pointer#active\r\n         * @type {boolean}\r\n         * @since 3.10.0\r\n         */\r\n        this.active = (id === 0) ? true : false;\r\n\r\n        /**\r\n         * Is this pointer Pointer Locked?\r\n         *\r\n         * Only a mouse pointer can be locked and it only becomes locked when requested via\r\n         * the browsers Pointer Lock API.\r\n         *\r\n         * You can request this by calling the `this.input.mouse.requestPointerLock()` method from\r\n         * a `pointerdown` or `pointerup` event handler.\r\n         *\r\n         * @name Phaser.Input.Pointer#locked\r\n         * @readonly\r\n         * @type {boolean}\r\n         * @since 3.19.0\r\n         */\r\n        this.locked = false;\r\n\r\n        /**\r\n         * The horizontal scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n         *\r\n         * @name Phaser.Input.Pointer#deltaX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.18.0\r\n         */\r\n        this.deltaX = 0;\r\n\r\n        /**\r\n         * The vertical scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n         * This value will typically be less than 0 if the user scrolls up and greater than zero if scrolling down.\r\n         *\r\n         * @name Phaser.Input.Pointer#deltaY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.18.0\r\n         */\r\n        this.deltaY = 0;\r\n\r\n        /**\r\n         * The z-axis scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n         *\r\n         * @name Phaser.Input.Pointer#deltaZ\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.18.0\r\n         */\r\n        this.deltaZ = 0;\r\n    },\r\n\r\n    /**\r\n     * Takes a Camera and updates this Pointer's `worldX` and `worldY` values so they are\r\n     * the result of a translation through the given Camera.\r\n     *\r\n     * Note that the values will be automatically replaced the moment the Pointer is\r\n     * updated by an input event, such as a mouse move, so should be used immediately.\r\n     *\r\n     * @method Phaser.Input.Pointer#updateWorldPoint\r\n     * @since 3.19.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera which is being tested against.\r\n     *\r\n     * @return {this} This Pointer object.\r\n     */\r\n    updateWorldPoint: function (camera)\r\n    {\r\n        //  Stores the world point inside of tempPoint\r\n        var temp = camera.getWorldPoint(this.x, this.y);\r\n\r\n        this.worldX = temp.x;\r\n        this.worldY = temp.y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes a Camera and returns a Vector2 containing the translated position of this Pointer\r\n     * within that Camera. This can be used to convert this Pointers position into camera space.\r\n     *\r\n     * @method Phaser.Input.Pointer#positionToCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to use for the translation.\r\n     * @param {(Phaser.Math.Vector2|object)} [output] - A Vector2-like object in which to store the translated position.\r\n     *\r\n     * @return {(Phaser.Math.Vector2|object)} A Vector2 containing the translated coordinates of this Pointer, based on the given camera.\r\n     */\r\n    positionToCamera: function (camera, output)\r\n    {\r\n        return camera.getWorldPoint(this.x, this.y, output);\r\n    },\r\n\r\n    /**\r\n     * Calculates the motion of this Pointer, including its velocity and angle of movement.\r\n     * This method is called automatically each frame by the Input Manager.\r\n     *\r\n     * @method Phaser.Input.Pointer#updateMotion\r\n     * @private\r\n     * @since 3.16.0\r\n     */\r\n    updateMotion: function ()\r\n    {\r\n        var cx = this.position.x;\r\n        var cy = this.position.y;\r\n\r\n        var mx = this.midPoint.x;\r\n        var my = this.midPoint.y;\r\n\r\n        if (cx === mx && cy === my)\r\n        {\r\n            //  Nothing to do here\r\n            return;\r\n        }\r\n\r\n        //  Moving towards our goal ...\r\n        var vx = SmoothStepInterpolation(this.motionFactor, mx, cx);\r\n        var vy = SmoothStepInterpolation(this.motionFactor, my, cy);\r\n\r\n        if (FuzzyEqual(vx, cx, 0.1))\r\n        {\r\n            vx = cx;\r\n        }\r\n\r\n        if (FuzzyEqual(vy, cy, 0.1))\r\n        {\r\n            vy = cy;\r\n        }\r\n\r\n        this.midPoint.set(vx, vy);\r\n\r\n        var dx = cx - vx;\r\n        var dy = cy - vy;\r\n\r\n        this.velocity.set(dx, dy);\r\n\r\n        this.angle = Angle(vx, vy, cx, cy);\r\n\r\n        this.distance = Math.sqrt(dx * dx + dy * dy);\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Up Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#up\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The Mouse Event to process.\r\n     */\r\n    up: function (event)\r\n    {\r\n        if ('buttons' in event)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        this.button = event.button;\r\n\r\n        this.upElement = event.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY, false);\r\n\r\n        //  0: Main button pressed, usually the left button or the un-initialized state\r\n        if (event.button === 0)\r\n        {\r\n            this.primaryDown = false;\r\n            this.upX = this.x;\r\n            this.upY = this.y;\r\n        }\r\n\r\n        if (this.buttons === 0)\r\n        {\r\n            //  No more buttons are still down\r\n            this.isDown = false;\r\n\r\n            this.upTime = event.timeStamp;\r\n\r\n            this.wasTouch = false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Down Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#down\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The Mouse Event to process.\r\n     */\r\n    down: function (event)\r\n    {\r\n        if ('buttons' in event)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        this.button = event.button;\r\n\r\n        this.downElement = event.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY, false);\r\n\r\n        //  0: Main button pressed, usually the left button or the un-initialized state\r\n        if (event.button === 0)\r\n        {\r\n            this.primaryDown = true;\r\n            this.downX = this.x;\r\n            this.downY = this.y;\r\n        }\r\n\r\n        if (OS.macOS && event.ctrlKey)\r\n        {\r\n            //  Override button settings on macOS\r\n            this.buttons = 2;\r\n            this.primaryDown = false;\r\n        }\r\n\r\n        if (!this.isDown)\r\n        {\r\n            this.isDown = true;\r\n\r\n            this.downTime = event.timeStamp;\r\n        }\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Move Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#move\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The Mouse Event to process.\r\n     */\r\n    move: function (event)\r\n    {\r\n        if ('buttons' in event)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY, true);\r\n\r\n        if (this.locked)\r\n        {\r\n            //  Multiple DOM events may occur within one frame, but only one Phaser event will fire\r\n            this.movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\r\n            this.movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\r\n        }\r\n\r\n        this.moveTime = event.timeStamp;\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Wheel Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#wheel\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {WheelEvent} event - The Wheel Event to process.\r\n     */\r\n    wheel: function (event)\r\n    {\r\n        if ('buttons' in event)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY, false);\r\n\r\n        this.deltaX = event.deltaX;\r\n        this.deltaY = event.deltaY;\r\n        this.deltaZ = event.deltaZ;\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch Start Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchstart\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n     * @param {TouchEvent} event - The full Touch Event.\r\n     */\r\n    touchstart: function (touch, event)\r\n    {\r\n        if (touch['pointerId'])\r\n        {\r\n            this.pointerId = touch.pointerId;\r\n        }\r\n\r\n        this.identifier = touch.identifier;\r\n        this.target = touch.target;\r\n        this.active = true;\r\n\r\n        this.buttons = 1;\r\n\r\n        this.event = event;\r\n\r\n        this.downElement = touch.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, touch.pageX, touch.pageY, false);\r\n\r\n        this.primaryDown = true;\r\n        this.downX = this.x;\r\n        this.downY = this.y;\r\n        this.downTime = event.timeStamp;\r\n\r\n        this.isDown = true;\r\n\r\n        this.wasTouch = true;\r\n        this.wasCanceled = false;\r\n\r\n        this.updateMotion();\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch Move Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchmove\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n     * @param {TouchEvent} event - The full Touch Event.\r\n     */\r\n    touchmove: function (touch, event)\r\n    {\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, touch.pageX, touch.pageY, true);\r\n\r\n        this.moveTime = event.timeStamp;\r\n\r\n        this.wasTouch = true;\r\n\r\n        this.updateMotion();\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch End Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchend\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n     * @param {TouchEvent} event - The full Touch Event.\r\n     */\r\n    touchend: function (touch, event)\r\n    {\r\n        this.buttons = 0;\r\n\r\n        this.event = event;\r\n\r\n        this.upElement = touch.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, touch.pageX, touch.pageY, false);\r\n\r\n        this.primaryDown = false;\r\n        this.upX = this.x;\r\n        this.upY = this.y;\r\n        this.upTime = event.timeStamp;\r\n\r\n        this.isDown = false;\r\n\r\n        this.wasTouch = true;\r\n        this.wasCanceled = false;\r\n\r\n        this.active = false;\r\n\r\n        this.updateMotion();\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch Cancel Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchcancel\r\n     * @private\r\n     * @since 3.15.0\r\n     *\r\n     * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n     * @param {TouchEvent} event - The full Touch Event.\r\n     */\r\n    touchcancel: function (touch, event)\r\n    {\r\n        this.buttons = 0;\r\n\r\n        this.event = event;\r\n\r\n        this.upElement = touch.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, touch.pageX, touch.pageY, false);\r\n\r\n        this.primaryDown = false;\r\n        this.upX = this.x;\r\n        this.upY = this.y;\r\n        this.upTime = event.timeStamp;\r\n\r\n        this.isDown = false;\r\n\r\n        this.wasTouch = true;\r\n        this.wasCanceled = true;\r\n\r\n        this.active = false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if any buttons are being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#noButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if no buttons are being held down.\r\n     */\r\n    noButtonDown: function ()\r\n    {\r\n        return (this.buttons === 0);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the left button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#leftButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the left button is being held down.\r\n     */\r\n    leftButtonDown: function ()\r\n    {\r\n        return (this.buttons & 1) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the right button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#rightButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the right button is being held down.\r\n     */\r\n    rightButtonDown: function ()\r\n    {\r\n        return (this.buttons & 2) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the middle button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#middleButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the middle button is being held down.\r\n     */\r\n    middleButtonDown: function ()\r\n    {\r\n        return (this.buttons & 4) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the back button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#backButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the back button is being held down.\r\n     */\r\n    backButtonDown: function ()\r\n    {\r\n        return (this.buttons & 8) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the forward button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#forwardButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the forward button is being held down.\r\n     */\r\n    forwardButtonDown: function ()\r\n    {\r\n        return (this.buttons & 16) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the left button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#leftButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the left button was just released.\r\n     */\r\n    leftButtonReleased: function ()\r\n    {\r\n        return (this.button === 0 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the right button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#rightButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the right button was just released.\r\n     */\r\n    rightButtonReleased: function ()\r\n    {\r\n        return (this.button === 2 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the middle button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#middleButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the middle button was just released.\r\n     */\r\n    middleButtonReleased: function ()\r\n    {\r\n        return (this.button === 1 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the back button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#backButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the back button was just released.\r\n     */\r\n    backButtonReleased: function ()\r\n    {\r\n        return (this.button === 3 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the forward button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#forwardButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the forward button was just released.\r\n     */\r\n    forwardButtonReleased: function ()\r\n    {\r\n        return (this.button === 4 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * distance between the Pointer's `downX` and `downY` values and the current position.\r\n     *\r\n     * If no button is held down, it will return the last recorded distance, based on where\r\n     * the Pointer was when the button was released.\r\n     *\r\n     * If you wish to get the distance being travelled currently, based on the velocity of the Pointer,\r\n     * then see the `Pointer.distance` property.\r\n     *\r\n     * @method Phaser.Input.Pointer#getDistance\r\n     * @since 3.13.0\r\n     *\r\n     * @return {number} The distance the Pointer moved.\r\n     */\r\n    getDistance: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return Distance(this.downX, this.downY, this.x, this.y);\r\n        }\r\n        else\r\n        {\r\n            return Distance(this.downX, this.downY, this.upX, this.upY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * horizontal distance between the Pointer's `downX` and `downY` values and the current position.\r\n     *\r\n     * If no button is held down, it will return the last recorded horizontal distance, based on where\r\n     * the Pointer was when the button was released.\r\n     *\r\n     * @method Phaser.Input.Pointer#getDistanceX\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The horizontal distance the Pointer moved.\r\n     */\r\n    getDistanceX: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return Math.abs(this.downX - this.x);\r\n        }\r\n        else\r\n        {\r\n            return Math.abs(this.downX - this.upX);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * vertical distance between the Pointer's `downX` and `downY` values and the current position.\r\n     *\r\n     * If no button is held down, it will return the last recorded vertical distance, based on where\r\n     * the Pointer was when the button was released.\r\n     *\r\n     * @method Phaser.Input.Pointer#getDistanceY\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The vertical distance the Pointer moved.\r\n     */\r\n    getDistanceY: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return Math.abs(this.downY - this.y);\r\n        }\r\n        else\r\n        {\r\n            return Math.abs(this.downY - this.upY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * duration since the button was pressed down.\r\n     *\r\n     * If no button is held down, it will return the last recorded duration, based on the time\r\n     * the last button on the Pointer was released.\r\n     *\r\n     * @method Phaser.Input.Pointer#getDuration\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The duration the Pointer was held down for in milliseconds.\r\n     */\r\n    getDuration: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return (this.manager.time - this.downTime);\r\n        }\r\n        else\r\n        {\r\n            return (this.upTime - this.downTime);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * angle between the Pointer's `downX` and `downY` values and the current position.\r\n     *\r\n     * If no button is held down, it will return the last recorded angle, based on where\r\n     * the Pointer was when the button was released.\r\n     *\r\n     * The angle is based on the old position facing to the current position.\r\n     *\r\n     * If you wish to get the current angle, based on the velocity of the Pointer, then\r\n     * see the `Pointer.angle` property.\r\n     *\r\n     * @method Phaser.Input.Pointer#getAngle\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The angle between the Pointer's coordinates in radians.\r\n     */\r\n    getAngle: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return Angle(this.downX, this.downY, this.x, this.y);\r\n        }\r\n        else\r\n        {\r\n            return Angle(this.downX, this.downY, this.upX, this.upY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Takes the previous and current Pointer positions and then generates an array of interpolated values between\r\n     * the two. The array will be populated up to the size of the `steps` argument.\r\n     *\r\n     * ```javaScript\r\n     * var points = pointer.getInterpolatedPosition(4);\r\n     *\r\n     * // points[0] = { x: 0, y: 0 }\r\n     * // points[1] = { x: 2, y: 1 }\r\n     * // points[2] = { x: 3, y: 2 }\r\n     * // points[3] = { x: 6, y: 3 }\r\n     * ```\r\n     *\r\n     * Use this if you need to get smoothed values between the previous and current pointer positions. DOM pointer\r\n     * events can often fire faster than the main browser loop, and this will help you avoid janky movement\r\n     * especially if you have an object following a Pointer.\r\n     *\r\n     * Note that if you provide an output array it will only be populated up to the number of steps provided.\r\n     * It will not clear any previous data that may have existed beyond the range of the steps count.\r\n     *\r\n     * Internally it uses the Smooth Step interpolation calculation.\r\n     *\r\n     * @method Phaser.Input.Pointer#getInterpolatedPosition\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} [steps=10] - The number of interpolation steps to use.\r\n     * @param {array} [out] - An array to store the results in. If not provided a new one will be created.\r\n     *\r\n     * @return {array} An array of interpolated values.\r\n     */\r\n    getInterpolatedPosition: function (steps, out)\r\n    {\r\n        if (steps === undefined) { steps = 10; }\r\n        if (out === undefined) { out = []; }\r\n\r\n        var prevX = this.prevPosition.x;\r\n        var prevY = this.prevPosition.y;\r\n\r\n        var curX = this.position.x;\r\n        var curY = this.position.y;\r\n\r\n        for (var i = 0; i < steps; i++)\r\n        {\r\n            var t = (1 / steps) * i;\r\n\r\n            out[i] = { x: SmoothStepInterpolation(t, prevX, curX), y: SmoothStepInterpolation(t, prevY, curY) };\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Pointer instance and resets its external references.\r\n     *\r\n     * @method Phaser.Input.Pointer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.camera = null;\r\n        this.manager = null;\r\n        this.position = null;\r\n    },\r\n\r\n    /**\r\n     * The x position of this Pointer.\r\n     * The value is in screen space.\r\n     * See `worldX` to get a camera converted position.\r\n     *\r\n     * @name Phaser.Input.Pointer#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.x = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of this Pointer.\r\n     * The value is in screen space.\r\n     * See `worldY` to get a camera converted position.\r\n     *\r\n     * @name Phaser.Input.Pointer#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.y = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Time when this Pointer was most recently updated by a DOM Event.\r\n     * This comes directly from the `event.timeStamp` property.\r\n     * If no event has yet taken place, it will return zero.\r\n     *\r\n     * @name Phaser.Input.Pointer#time\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.16.0\r\n     */\r\n    time: {\r\n\r\n        get: function ()\r\n        {\r\n            return (this.event) ? this.event.timeStamp : 0;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Pointer;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar INPUT_CONST = {\r\n\r\n    /**\r\n     * The mouse pointer is being held down.\r\n     * \r\n     * @name Phaser.Input.MOUSE_DOWN\r\n     * @type {number}\r\n     * @since 3.10.0\r\n     */\r\n    MOUSE_DOWN: 0,\r\n\r\n    /**\r\n     * The mouse pointer is being moved.\r\n     * \r\n     * @name Phaser.Input.MOUSE_MOVE\r\n     * @type {number}\r\n     * @since 3.10.0\r\n     */\r\n    MOUSE_MOVE: 1,\r\n\r\n    /**\r\n     * The mouse pointer is released.\r\n     * \r\n     * @name Phaser.Input.MOUSE_UP\r\n     * @type {number}\r\n     * @since 3.10.0\r\n     */\r\n    MOUSE_UP: 2,\r\n\r\n    /**\r\n     * A touch pointer has been started.\r\n     * \r\n     * @name Phaser.Input.TOUCH_START\r\n     * @type {number}\r\n     * @since 3.10.0\r\n     */\r\n    TOUCH_START: 3,\r\n\r\n    /**\r\n     * A touch pointer has been started.\r\n     * \r\n     * @name Phaser.Input.TOUCH_MOVE\r\n     * @type {number}\r\n     * @since 3.10.0\r\n     */\r\n    TOUCH_MOVE: 4,\r\n\r\n    /**\r\n     * A touch pointer has been started.\r\n     * \r\n     * @name Phaser.Input.TOUCH_END\r\n     * @type {number}\r\n     * @since 3.10.0\r\n     */\r\n    TOUCH_END: 5,\r\n\r\n    /**\r\n     * The pointer lock has changed.\r\n     * \r\n     * @name Phaser.Input.POINTER_LOCK_CHANGE\r\n     * @type {number}\r\n     * @since 3.10.0\r\n     */\r\n    POINTER_LOCK_CHANGE: 6,\r\n\r\n    /**\r\n     * A touch pointer has been been cancelled by the browser.\r\n     * \r\n     * @name Phaser.Input.TOUCH_CANCEL\r\n     * @type {number}\r\n     * @since 3.15.0\r\n     */\r\n    TOUCH_CANCEL: 7,\r\n\r\n    /**\r\n     * The mouse wheel changes.\r\n     * \r\n     * @name Phaser.Input.MOUSE_WHEEL\r\n     * @type {number}\r\n     * @since 3.18.0\r\n     */\r\n    MOUSE_WHEEL: 8\r\n\r\n};\r\n\r\nmodule.exports = INPUT_CONST;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ArrayRemove = require('../../utils/array/Remove');\r\nvar Class = require('../../utils/Class');\r\nvar GameEvents = require('../../core/events');\r\nvar InputEvents = require('../events');\r\nvar KeyCodes = require('../../input/keyboard/keys/KeyCodes');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n/**\r\n * @classdesc\r\n * The Keyboard Manager is a helper class that belongs to the global Input Manager.\r\n *\r\n * Its role is to listen for native DOM Keyboard Events and then store them for further processing by the Keyboard Plugin.\r\n *\r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically if keyboard\r\n * input has been enabled in the Game Config.\r\n *\r\n * @class KeyboardManager\r\n * @memberof Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.16.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar KeyboardManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function KeyboardManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.16.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * An internal event queue.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#queue\r\n         * @type {KeyboardEvent[]}\r\n         * @private\r\n         * @since 3.16.0\r\n         */\r\n        this.queue = [];\r\n\r\n        /**\r\n         * A flag that controls if the non-modified keys, matching those stored in the `captures` array,\r\n         * have `preventDefault` called on them or not.\r\n         *\r\n         * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\r\n         * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\r\n         * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\r\n         * However, if the user presses just the r key on its own, it will have its event prevented.\r\n         *\r\n         * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\r\n         * you can toggle this property at run-time.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#preventDefault\r\n         * @type {boolean}\r\n         * @since 3.16.0\r\n         */\r\n        this.preventDefault = true;\r\n\r\n        /**\r\n         * An array of Key Code values that will automatically have `preventDefault` called on them,\r\n         * as long as the `KeyboardManager.preventDefault` boolean is set to `true`.\r\n         *\r\n         * By default the array is empty.\r\n         *\r\n         * The key must be non-modified when pressed in order to be captured.\r\n         *\r\n         * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\r\n         * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\r\n         * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\r\n         * However, if the user presses just the r key on its own, it will have its event prevented.\r\n         *\r\n         * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\r\n         * you can toggle the `KeyboardManager.preventDefault` boolean at run-time.\r\n         *\r\n         * If you need more specific control, you can create Key objects and set the flag on each of those instead.\r\n         *\r\n         * This array can be populated via the Game Config by setting the `input.keyboard.capture` array, or you\r\n         * can call the `addCapture` method. See also `removeCapture` and `clearCaptures`.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#captures\r\n         * @type {number[]}\r\n         * @since 3.16.0\r\n         */\r\n        this.captures = [];\r\n\r\n        /**\r\n         * A boolean that controls if the Keyboard Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.16.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Keyboard Event target, as defined in the Game Config.\r\n         * Typically the window in which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#target\r\n         * @type {any}\r\n         * @since 3.16.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * The Key Down Event handler.\r\n         * This function is sent the native DOM KeyEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#onKeyDown\r\n         * @type {function}\r\n         * @since 3.16.00\r\n         */\r\n        this.onKeyDown = NOOP;\r\n\r\n        /**\r\n         * The Key Up Event handler.\r\n         * This function is sent the native DOM KeyEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#onKeyUp\r\n         * @type {function}\r\n         * @since 3.16.00\r\n         */\r\n        this.onKeyUp = NOOP;\r\n\r\n        inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Keyboard Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#boot\r\n     * @private\r\n     * @since 3.16.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputKeyboard;\r\n        this.target = config.inputKeyboardEventTarget;\r\n\r\n        this.addCapture(config.inputKeyboardCapture);\r\n\r\n        if (!this.target && window)\r\n        {\r\n            this.target = window;\r\n        }\r\n\r\n        if (this.enabled && this.target)\r\n        {\r\n            this.startListeners();\r\n        }\r\n\r\n        this.manager.game.events.on(GameEvents.POST_STEP, this.postUpdate, this);\r\n    },\r\n\r\n    /**\r\n     * Starts the Keyboard Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#startListeners\r\n     * @since 3.16.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        this.onKeyDown = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            _this.queue.push(event);\r\n\r\n            _this.manager.events.emit(InputEvents.MANAGER_PROCESS);\r\n\r\n            var modified = (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey);\r\n\r\n            if (_this.preventDefault && !modified && _this.captures.indexOf(event.keyCode) > -1)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onKeyUp = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            _this.queue.push(event);\r\n\r\n            _this.manager.events.emit(InputEvents.MANAGER_PROCESS);\r\n\r\n            var modified = (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey);\r\n\r\n            if (_this.preventDefault && !modified && _this.captures.indexOf(event.keyCode) > -1)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        var target = this.target;\r\n\r\n        if (target)\r\n        {\r\n            target.addEventListener('keydown', this.onKeyDown, false);\r\n            target.addEventListener('keyup', this.onKeyUp, false);\r\n\r\n            this.enabled = true;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Stops the Key Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#stopListeners\r\n     * @since 3.16.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('keydown', this.onKeyDown, false);\r\n        target.removeEventListener('keyup', this.onKeyUp, false);\r\n\r\n        this.enabled = false;\r\n    },\r\n\r\n    /**\r\n     * Clears the event queue.\r\n     * Called automatically by the Input Manager.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#postUpdate\r\n     * @private\r\n     * @since 3.16.0\r\n     */\r\n    postUpdate: function ()\r\n    {\r\n        this.queue = [];\r\n    },\r\n\r\n    /**\r\n     * By default when a key is pressed Phaser will not stop the event from propagating up to the browser.\r\n     * There are some keys this can be annoying for, like the arrow keys or space bar, which make the browser window scroll.\r\n     *\r\n     * This `addCapture` method enables consuming keyboard event for specific keys so it doesn't bubble up to the the browser\r\n     * and cause the default browser behavior.\r\n     *\r\n     * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to say prevent\r\n     * the SPACE BAR from triggering a page scroll, then it will prevent it for any Scene in your game, not just the calling one.\r\n     *\r\n     * You can pass in a single key code value, or an array of key codes, or a string:\r\n     *\r\n     * ```javascript\r\n     * this.input.keyboard.addCapture(62);\r\n     * ```\r\n     *\r\n     * An array of key codes:\r\n     *\r\n     * ```javascript\r\n     * this.input.keyboard.addCapture([ 62, 63, 64 ]);\r\n     * ```\r\n     *\r\n     * Or a string:\r\n     *\r\n     * ```javascript\r\n     * this.input.keyboard.addCapture('W,S,A,D');\r\n     * ```\r\n     *\r\n     * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n     *\r\n     * You can also provide an array mixing both strings and key code integers.\r\n     *\r\n     * If there are active captures after calling this method, the `preventDefault` property is set to `true`.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#addCapture\r\n     * @since 3.16.0\r\n     *\r\n     * @param {(string|number|number[]|any[])} keycode - The Key Codes to enable capture for, preventing them reaching the browser.\r\n     */\r\n    addCapture: function (keycode)\r\n    {\r\n        if (typeof keycode === 'string')\r\n        {\r\n            keycode = keycode.split(',');\r\n        }\r\n\r\n        if (!Array.isArray(keycode))\r\n        {\r\n            keycode = [ keycode ];\r\n        }\r\n\r\n        var captures = this.captures;\r\n\r\n        for (var i = 0; i < keycode.length; i++)\r\n        {\r\n            var code = keycode[i];\r\n\r\n            if (typeof code === 'string')\r\n            {\r\n                code = KeyCodes[code.trim().toUpperCase()];\r\n            }\r\n\r\n            if (captures.indexOf(code) === -1)\r\n            {\r\n                captures.push(code);\r\n            }\r\n        }\r\n\r\n        this.preventDefault = captures.length > 0;\r\n    },\r\n\r\n    /**\r\n     * Removes an existing key capture.\r\n     *\r\n     * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to remove\r\n     * the capture of a key, then it will remove it for any Scene in your game, not just the calling one.\r\n     *\r\n     * You can pass in a single key code value, or an array of key codes, or a string:\r\n     *\r\n     * ```javascript\r\n     * this.input.keyboard.removeCapture(62);\r\n     * ```\r\n     *\r\n     * An array of key codes:\r\n     *\r\n     * ```javascript\r\n     * this.input.keyboard.removeCapture([ 62, 63, 64 ]);\r\n     * ```\r\n     *\r\n     * Or a string:\r\n     *\r\n     * ```javascript\r\n     * this.input.keyboard.removeCapture('W,S,A,D');\r\n     * ```\r\n     *\r\n     * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n     *\r\n     * You can also provide an array mixing both strings and key code integers.\r\n     *\r\n     * If there are no captures left after calling this method, the `preventDefault` property is set to `false`.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#removeCapture\r\n     * @since 3.16.0\r\n     *\r\n     * @param {(string|number|number[]|any[])} keycode - The Key Codes to disable capture for, allowing them reaching the browser again.\r\n     */\r\n    removeCapture: function (keycode)\r\n    {\r\n        if (typeof keycode === 'string')\r\n        {\r\n            keycode = keycode.split(',');\r\n        }\r\n\r\n        if (!Array.isArray(keycode))\r\n        {\r\n            keycode = [ keycode ];\r\n        }\r\n\r\n        var captures = this.captures;\r\n\r\n        for (var i = 0; i < keycode.length; i++)\r\n        {\r\n            var code = keycode[i];\r\n\r\n            if (typeof code === 'string')\r\n            {\r\n                code = KeyCodes[code.toUpperCase()];\r\n            }\r\n\r\n            ArrayRemove(captures, code);\r\n        }\r\n\r\n        this.preventDefault = captures.length > 0;\r\n    },\r\n\r\n    /**\r\n     * Removes all keyboard captures and sets the `preventDefault` property to `false`.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#clearCaptures\r\n     * @since 3.16.0\r\n     */\r\n    clearCaptures: function ()\r\n    {\r\n        this.captures = [];\r\n\r\n        this.preventDefault = false;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Keyboard Manager instance.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#destroy\r\n     * @since 3.16.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.clearCaptures();\r\n\r\n        this.queue = [];\r\n\r\n        this.manager.game.events.off(GameEvents.POST_RENDER, this.postUpdate, this);\r\n\r\n        this.target = null;\r\n        this.enabled = false;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = KeyboardManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Keyboard Codes.\r\n *\r\n * @namespace Phaser.Input.Keyboard.KeyCodes\r\n * @memberof Phaser.Input.Keyboard\r\n * @since 3.0.0\r\n */\r\n\r\nvar KeyCodes = {\r\n\r\n    /**\r\n     * The BACKSPACE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.BACKSPACE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    BACKSPACE: 8,\r\n\r\n    /**\r\n     * The TAB key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.TAB\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    TAB: 9,\r\n\r\n    /**\r\n     * The ENTER key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.ENTER\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    ENTER: 13,\r\n\r\n    /**\r\n     * The SHIFT key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.SHIFT\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    SHIFT: 16,\r\n\r\n    /**\r\n     * The CTRL key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.CTRL\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    CTRL: 17,\r\n\r\n    /**\r\n     * The ALT key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.ALT\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    ALT: 18,\r\n\r\n    /**\r\n     * The PAUSE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.PAUSE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PAUSE: 19,\r\n\r\n    /**\r\n     * The CAPS_LOCK key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.CAPS_LOCK\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    CAPS_LOCK: 20,\r\n\r\n    /**\r\n     * The ESC key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.ESC\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    ESC: 27,\r\n\r\n    /**\r\n     * The SPACE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.SPACE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    SPACE: 32,\r\n\r\n    /**\r\n     * The PAGE_UP key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.PAGE_UP\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PAGE_UP: 33,\r\n\r\n    /**\r\n     * The PAGE_DOWN key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.PAGE_DOWN\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PAGE_DOWN: 34,\r\n\r\n    /**\r\n     * The END key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.END\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    END: 35,\r\n\r\n    /**\r\n     * The HOME key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.HOME\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    HOME: 36,\r\n\r\n    /**\r\n     * The LEFT key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.LEFT\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    LEFT: 37,\r\n\r\n    /**\r\n     * The UP key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.UP\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    UP: 38,\r\n\r\n    /**\r\n     * The RIGHT key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.RIGHT\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    RIGHT: 39,\r\n\r\n    /**\r\n     * The DOWN key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.DOWN\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    DOWN: 40,\r\n\r\n    /**\r\n     * The PRINT_SCREEN key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.PRINT_SCREEN\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PRINT_SCREEN: 42,\r\n\r\n    /**\r\n     * The INSERT key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.INSERT\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    INSERT: 45,\r\n\r\n    /**\r\n     * The DELETE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.DELETE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    DELETE: 46,\r\n\r\n    /**\r\n     * The ZERO key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.ZERO\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    ZERO: 48,\r\n\r\n    /**\r\n     * The ONE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.ONE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    ONE: 49,\r\n\r\n    /**\r\n     * The TWO key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.TWO\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    TWO: 50,\r\n\r\n    /**\r\n     * The THREE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.THREE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    THREE: 51,\r\n\r\n    /**\r\n     * The FOUR key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.FOUR\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    FOUR: 52,\r\n\r\n    /**\r\n     * The FIVE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.FIVE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    FIVE: 53,\r\n\r\n    /**\r\n     * The SIX key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.SIX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    SIX: 54,\r\n\r\n    /**\r\n     * The SEVEN key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.SEVEN\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    SEVEN: 55,\r\n\r\n    /**\r\n     * The EIGHT key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.EIGHT\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    EIGHT: 56,\r\n\r\n    /**\r\n     * The NINE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NINE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NINE: 57,\r\n\r\n    /**\r\n     * The NUMPAD_ZERO key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_ZERO\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_ZERO: 96,\r\n\r\n    /**\r\n     * The NUMPAD_ONE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_ONE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_ONE: 97,\r\n\r\n    /**\r\n     * The NUMPAD_TWO key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_TWO\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_TWO: 98,\r\n\r\n    /**\r\n     * The NUMPAD_THREE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_THREE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_THREE: 99,\r\n\r\n    /**\r\n     * The NUMPAD_FOUR key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_FOUR\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_FOUR: 100,\r\n\r\n    /**\r\n     * The NUMPAD_FIVE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_FIVE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_FIVE: 101,\r\n\r\n    /**\r\n     * The NUMPAD_SIX key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_SIX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_SIX: 102,\r\n\r\n    /**\r\n     * The NUMPAD_SEVEN key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_SEVEN\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_SEVEN: 103,\r\n\r\n    /**\r\n     * The NUMPAD_EIGHT key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_EIGHT\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_EIGHT: 104,\r\n\r\n    /**\r\n     * The NUMPAD_NINE key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_NINE\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    NUMPAD_NINE: 105,\r\n\r\n    /**\r\n     * The Numpad Addition (+) key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_ADD\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    NUMPAD_ADD: 107,\r\n\r\n    /**\r\n     * The Numpad Subtraction (-) key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.NUMPAD_SUBTRACT\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    NUMPAD_SUBTRACT: 109,\r\n\r\n    /**\r\n     * The A key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.A\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    A: 65,\r\n\r\n    /**\r\n     * The B key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.B\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    B: 66,\r\n\r\n    /**\r\n     * The C key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.C\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    C: 67,\r\n\r\n    /**\r\n     * The D key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.D\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    D: 68,\r\n\r\n    /**\r\n     * The E key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.E\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    E: 69,\r\n\r\n    /**\r\n     * The F key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F: 70,\r\n\r\n    /**\r\n     * The G key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.G\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    G: 71,\r\n\r\n    /**\r\n     * The H key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.H\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    H: 72,\r\n\r\n    /**\r\n     * The I key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.I\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    I: 73,\r\n\r\n    /**\r\n     * The J key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.J\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    J: 74,\r\n\r\n    /**\r\n     * The K key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.K\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    K: 75,\r\n\r\n    /**\r\n     * The L key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.L\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    L: 76,\r\n\r\n    /**\r\n     * The M key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.M\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    M: 77,\r\n\r\n    /**\r\n     * The N key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.N\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    N: 78,\r\n\r\n    /**\r\n     * The O key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.O\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    O: 79,\r\n\r\n    /**\r\n     * The P key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.P\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    P: 80,\r\n\r\n    /**\r\n     * The Q key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.Q\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    Q: 81,\r\n\r\n    /**\r\n     * The R key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.R\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    R: 82,\r\n\r\n    /**\r\n     * The S key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.S\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    S: 83,\r\n\r\n    /**\r\n     * The T key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.T\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    T: 84,\r\n\r\n    /**\r\n     * The U key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.U\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    U: 85,\r\n\r\n    /**\r\n     * The V key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.V\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    V: 86,\r\n\r\n    /**\r\n     * The W key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.W\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    W: 87,\r\n\r\n    /**\r\n     * The X key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.X\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    X: 88,\r\n\r\n    /**\r\n     * The Y key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.Y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    Y: 89,\r\n\r\n    /**\r\n     * The Z key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.Z\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    Z: 90,\r\n\r\n    /**\r\n     * The F1 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F1\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F1: 112,\r\n\r\n    /**\r\n     * The F2 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F2\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F2: 113,\r\n\r\n    /**\r\n     * The F3 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F3\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F3: 114,\r\n\r\n    /**\r\n     * The F4 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F4\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F4: 115,\r\n\r\n    /**\r\n     * The F5 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F5\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F5: 116,\r\n\r\n    /**\r\n     * The F6 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F6\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F6: 117,\r\n\r\n    /**\r\n     * The F7 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F7\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F7: 118,\r\n\r\n    /**\r\n     * The F8 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F8\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F8: 119,\r\n\r\n    /**\r\n     * The F9 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F9\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F9: 120,\r\n\r\n    /**\r\n     * The F10 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F10\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F10: 121,\r\n\r\n    /**\r\n     * The F11 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F11\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F11: 122,\r\n\r\n    /**\r\n     * The F12 key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.F12\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    F12: 123,\r\n\r\n    /**\r\n     * The SEMICOLON key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.SEMICOLON\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    SEMICOLON: 186,\r\n\r\n    /**\r\n     * The PLUS key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.PLUS\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PLUS: 187,\r\n\r\n    /**\r\n     * The COMMA key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.COMMA\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    COMMA: 188,\r\n\r\n    /**\r\n     * The MINUS key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.MINUS\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    MINUS: 189,\r\n\r\n    /**\r\n     * The PERIOD key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.PERIOD\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PERIOD: 190,\r\n\r\n    /**\r\n     * The FORWARD_SLASH key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.FORWARD_SLASH\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    FORWARD_SLASH: 191,\r\n\r\n    /**\r\n     * The BACK_SLASH key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.BACK_SLASH\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    BACK_SLASH: 220,\r\n\r\n    /**\r\n     * The QUOTES key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.QUOTES\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    QUOTES: 222,\r\n\r\n    /**\r\n     * The BACKTICK key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.BACKTICK\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    BACKTICK: 192,\r\n\r\n    /**\r\n     * The OPEN_BRACKET key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.OPEN_BRACKET\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    OPEN_BRACKET: 219,\r\n\r\n    /**\r\n     * The CLOSED_BRACKET key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.CLOSED_BRACKET\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    CLOSED_BRACKET: 221,\r\n\r\n    /**\r\n     * The SEMICOLON_FIREFOX key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.SEMICOLON_FIREFOX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    SEMICOLON_FIREFOX: 59,\r\n\r\n    /**\r\n     * The COLON key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.COLON\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    COLON: 58,\r\n\r\n    /**\r\n     * The COMMA_FIREFOX_WINDOWS key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.COMMA_FIREFOX_WINDOWS\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    COMMA_FIREFOX_WINDOWS: 60,\r\n\r\n    /**\r\n     * The COMMA_FIREFOX key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.COMMA_FIREFOX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    COMMA_FIREFOX: 62,\r\n\r\n    /**\r\n     * The BRACKET_RIGHT_FIREFOX key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.BRACKET_RIGHT_FIREFOX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    BRACKET_RIGHT_FIREFOX: 174,\r\n\r\n    /**\r\n     * The BRACKET_LEFT_FIREFOX key.\r\n     * \r\n     * @name Phaser.Input.Keyboard.KeyCodes.BRACKET_LEFT_FIREFOX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    BRACKET_LEFT_FIREFOX: 175\r\n};\r\n\r\nmodule.exports = KeyCodes;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Features = require('../../device/Features');\r\nvar InputEvents = require('../events');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n//  https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\r\n//  https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n\r\n/**\r\n * @classdesc\r\n * The Mouse Manager is a helper class that belongs to the Input Manager.\r\n *\r\n * Its role is to listen for native DOM Mouse Events and then pass them onto the Input Manager for further processing.\r\n *\r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class MouseManager\r\n * @memberof Phaser.Input.Mouse\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar MouseManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function MouseManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * If `true` the DOM `mousedown` event will have `preventDefault` set.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#preventDefaultDown\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.50.0\r\n         */\r\n        this.preventDefaultDown = true;\r\n\r\n        /**\r\n         * If `true` the DOM `mouseup` event will have `preventDefault` set.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#preventDefaultUp\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.50.0\r\n         */\r\n        this.preventDefaultUp = true;\r\n\r\n        /**\r\n         * If `true` the DOM `mousemove` event will have `preventDefault` set.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#preventDefaultMove\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.50.0\r\n         */\r\n        this.preventDefaultMove = true;\r\n\r\n        /**\r\n         * If `true` the DOM `wheel` event will have `preventDefault` set.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#preventDefaultWheel\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.50.0\r\n         */\r\n        this.preventDefaultWheel = false;\r\n\r\n        /**\r\n         * A boolean that controls if the Mouse Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Mouse target, as defined in the Game Config.\r\n         * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#target\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * If the mouse has been pointer locked successfully this will be set to true.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#locked\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.locked = false;\r\n\r\n        /**\r\n         * The Mouse Move Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseMove\r\n         * @type {function}\r\n         * @since 3.10.0\r\n         */\r\n        this.onMouseMove = NOOP;\r\n\r\n        /**\r\n         * The Mouse Down Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseDown\r\n         * @type {function}\r\n         * @since 3.10.0\r\n         */\r\n        this.onMouseDown = NOOP;\r\n\r\n        /**\r\n         * The Mouse Up Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseUp\r\n         * @type {function}\r\n         * @since 3.10.0\r\n         */\r\n        this.onMouseUp = NOOP;\r\n\r\n        /**\r\n         * The Mouse Down Event handler specifically for events on the Window.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseDownWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onMouseDownWindow = NOOP;\r\n\r\n        /**\r\n         * The Mouse Up Event handler specifically for events on the Window.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseUpWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onMouseUpWindow = NOOP;\r\n\r\n        /**\r\n         * The Mouse Over Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseOver\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onMouseOver = NOOP;\r\n\r\n        /**\r\n         * The Mouse Out Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseOut\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onMouseOut = NOOP;\r\n\r\n        /**\r\n         * The Mouse Wheel Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseWheel\r\n         * @type {function}\r\n         * @since 3.18.0\r\n         */\r\n        this.onMouseWheel = NOOP;\r\n\r\n        /**\r\n         * Internal pointerLockChange handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#pointerLockChange\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.pointerLockChange = NOOP;\r\n\r\n        /**\r\n         * Are the event listeners hooked into `window.top` or `window`?\r\n         *\r\n         * This is set during the `boot` sequence. If the browser does not have access to `window.top`,\r\n         * such as in cross-origin iframe environments, this property gets set to `false` and the events\r\n         * are hooked into `window` instead.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#isTop\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.50.0\r\n         */\r\n        this.isTop = true;\r\n\r\n        inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Touch Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputMouse;\r\n        this.target = config.inputMouseEventTarget;\r\n        this.passive = config.inputMousePassive;\r\n\r\n        this.preventDefaultDown = config.inputMousePreventDefaultDown;\r\n        this.preventDefaultUp = config.inputMousePreventDefaultUp;\r\n        this.preventDefaultMove = config.inputMousePreventDefaultMove;\r\n        this.preventDefaultWheel = config.inputMousePreventDefaultWheel;\r\n\r\n        if (!this.target)\r\n        {\r\n            this.target = this.manager.game.canvas;\r\n        }\r\n        else if (typeof this.target === 'string')\r\n        {\r\n            this.target = document.getElementById(this.target);\r\n        }\r\n\r\n        if (config.disableContextMenu)\r\n        {\r\n            this.disableContextMenu();\r\n        }\r\n\r\n        if (this.enabled && this.target)\r\n        {\r\n            this.startListeners();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Attempts to disable the context menu from appearing if you right-click on the browser.\r\n     *\r\n     * Works by listening for the `contextmenu` event and prevent defaulting it.\r\n     *\r\n     * Use this if you need to enable right-button mouse support in your game, and the browser\r\n     * menu keeps getting in the way.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#disableContextMenu\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Mouse Manager instance.\r\n     */\r\n    disableContextMenu: function ()\r\n    {\r\n        document.body.addEventListener('contextmenu', function (event)\r\n        {\r\n            event.preventDefault();\r\n            return false;\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * If the browser supports it, you can request that the pointer be locked to the browser window.\r\n     *\r\n     * This is classically known as 'FPS controls', where the pointer can't leave the browser until\r\n     * the user presses an exit key.\r\n     *\r\n     * If the browser successfully enters a locked state, a `POINTER_LOCK_CHANGE_EVENT` will be dispatched,\r\n     * from the games Input Manager, with an `isPointerLocked` property.\r\n     *\r\n     * It is important to note that pointer lock can only be enabled after an 'engagement gesture',\r\n     * see: https://w3c.github.io/pointerlock/#dfn-engagement-gesture.\r\n     *\r\n     * Note for Firefox: There is a bug in certain Firefox releases that cause native DOM events like\r\n     * `mousemove` to fire continuously when in pointer lock mode. You can get around this by setting\r\n     * `this.preventDefaultMove` to `false` in this class. You may also need to do the same for\r\n     * `preventDefaultDown` and/or `preventDefaultUp`. Please test combinations of these if you encounter\r\n     * the error.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#requestPointerLock\r\n     * @since 3.0.0\r\n     */\r\n    requestPointerLock: function ()\r\n    {\r\n        if (Features.pointerLock)\r\n        {\r\n            var element = this.target;\r\n\r\n            element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;\r\n\r\n            element.requestPointerLock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the browser supports pointer lock, this will request that the pointer lock is released. If\r\n     * the browser successfully enters a locked state, a 'POINTER_LOCK_CHANGE_EVENT' will be\r\n     * dispatched - from the game's input manager - with an `isPointerLocked` property.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#releasePointerLock\r\n     * @since 3.0.0\r\n     */\r\n    releasePointerLock: function ()\r\n    {\r\n        if (Features.pointerLock)\r\n        {\r\n            document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;\r\n            document.exitPointerLock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Starts the Mouse Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#startListeners\r\n     * @since 3.0.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        if (!target)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var _this = this;\r\n        var manager = this.manager;\r\n        var canvas = manager.canvas;\r\n        var autoFocus = (window && window.focus && manager.game.config.autoFocus);\r\n\r\n        this.onMouseMove = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && manager && manager.enabled)\r\n            {\r\n                manager.onMouseMove(event);\r\n\r\n                if (_this.preventDefaultMove)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMouseDown = function (event)\r\n        {\r\n            if (autoFocus)\r\n            {\r\n                window.focus();\r\n            }\r\n\r\n            if (!event.defaultPrevented && _this.enabled && manager && manager.enabled)\r\n            {\r\n                manager.onMouseDown(event);\r\n\r\n                if (_this.preventDefaultDown && event.target === canvas)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMouseDownWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && manager && manager.enabled && event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                manager.onMouseDown(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseUp = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && manager && manager.enabled)\r\n            {\r\n                manager.onMouseUp(event);\r\n\r\n                if (_this.preventDefaultUp && event.target === canvas)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMouseUpWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && manager && manager.enabled && event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                manager.onMouseUp(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseOver = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && manager && manager.enabled)\r\n            {\r\n                manager.setCanvasOver(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseOut = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && manager && manager.enabled)\r\n            {\r\n                manager.setCanvasOut(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseWheel = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && manager && manager.enabled)\r\n            {\r\n                manager.onMouseWheel(event);\r\n            }\r\n\r\n            if (_this.preventDefaultWheel && event.target === canvas)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        var passive = { passive: true };\r\n\r\n        target.addEventListener('mousemove', this.onMouseMove);\r\n        target.addEventListener('mousedown', this.onMouseDown);\r\n        target.addEventListener('mouseup', this.onMouseUp);\r\n        target.addEventListener('mouseover', this.onMouseOver, passive);\r\n        target.addEventListener('mouseout', this.onMouseOut, passive);\r\n\r\n        if (this.preventDefaultWheel)\r\n        {\r\n            target.addEventListener('wheel', this.onMouseWheel, { passive: false });\r\n        }\r\n        else\r\n        {\r\n            target.addEventListener('wheel', this.onMouseWheel, passive);\r\n        }\r\n\r\n        if (window && manager.game.config.inputWindowEvents)\r\n        {\r\n            try\r\n            {\r\n                window.top.addEventListener('mousedown', this.onMouseDownWindow, passive);\r\n                window.top.addEventListener('mouseup', this.onMouseUpWindow, passive);\r\n            }\r\n            catch (exception)\r\n            {\r\n                window.addEventListener('mousedown', this.onMouseDownWindow, passive);\r\n                window.addEventListener('mouseup', this.onMouseUpWindow, passive);\r\n\r\n                this.isTop = false;\r\n            }\r\n        }\r\n\r\n        if (Features.pointerLock)\r\n        {\r\n            this.pointerLockChange = function (event)\r\n            {\r\n                var element = _this.target;\r\n\r\n                _this.locked = (document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element) ? true : false;\r\n\r\n                manager.onPointerLockChange(event);\r\n            };\r\n\r\n            document.addEventListener('pointerlockchange', this.pointerLockChange, true);\r\n            document.addEventListener('mozpointerlockchange', this.pointerLockChange, true);\r\n            document.addEventListener('webkitpointerlockchange', this.pointerLockChange, true);\r\n        }\r\n\r\n        this.enabled = true;\r\n    },\r\n\r\n    /**\r\n     * Stops the Mouse Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#stopListeners\r\n     * @since 3.0.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('mousemove', this.onMouseMove);\r\n        target.removeEventListener('mousedown', this.onMouseDown);\r\n        target.removeEventListener('mouseup', this.onMouseUp);\r\n        target.removeEventListener('mouseover', this.onMouseOver);\r\n        target.removeEventListener('mouseout', this.onMouseOut);\r\n\r\n        if (window)\r\n        {\r\n            target = (this.isTop) ? window.top : window;\r\n\r\n            target.removeEventListener('mousedown', this.onMouseDownWindow);\r\n            target.removeEventListener('mouseup', this.onMouseUpWindow);\r\n        }\r\n\r\n        if (Features.pointerLock)\r\n        {\r\n            document.removeEventListener('pointerlockchange', this.pointerLockChange, true);\r\n            document.removeEventListener('mozpointerlockchange', this.pointerLockChange, true);\r\n            document.removeEventListener('webkitpointerlockchange', this.pointerLockChange, true);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Mouse Manager instance.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.target = null;\r\n        this.enabled = false;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MouseManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar InputEvents = require('../events');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\r\n// https://patrickhlauke.github.io/touch/tests/results/\r\n// https://www.html5rocks.com/en/mobile/touch/\r\n\r\n/**\r\n * @classdesc\r\n * The Touch Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Touch Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class TouchManager\r\n * @memberof Phaser.Input.Touch\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar TouchManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function TouchManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * If true the DOM events will have event.preventDefault applied to them, if false they will propagate fully.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#capture\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.capture = true;\r\n\r\n        /**\r\n         * A boolean that controls if the Touch Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Touch Event target, as defined in the Game Config.\r\n         * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#target\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * The Touch Start event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchStart\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.onTouchStart = NOOP;\r\n\r\n        /**\r\n         * The Touch Start event handler function specifically for events on the Window.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchStartWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onTouchStartWindow = NOOP;\r\n\r\n        /**\r\n         * The Touch Move event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchMove\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.onTouchMove = NOOP;\r\n\r\n        /**\r\n         * The Touch End event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchEnd\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.onTouchEnd = NOOP;\r\n\r\n        /**\r\n         * The Touch End event handler function specifically for events on the Window.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchEndWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onTouchEndWindow = NOOP;\r\n\r\n        /**\r\n         * The Touch Cancel event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchCancel\r\n         * @type {function}\r\n         * @since 3.15.0\r\n         */\r\n        this.onTouchCancel = NOOP;\r\n\r\n        /**\r\n         * The Touch Cancel event handler function specifically for events on the Window.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchCancelWindow\r\n         * @type {function}\r\n         * @since 3.18.0\r\n         */\r\n        this.onTouchCancelWindow = NOOP;\r\n\r\n        /**\r\n         * The Touch Over event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchOver\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onTouchOver = NOOP;\r\n\r\n        /**\r\n         * The Touch Out event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchOut\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onTouchOut = NOOP;\r\n\r\n        inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Touch Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputTouch;\r\n        this.target = config.inputTouchEventTarget;\r\n        this.capture = config.inputTouchCapture;\r\n\r\n        if (!this.target)\r\n        {\r\n            this.target = this.manager.game.canvas;\r\n        }\r\n\r\n        if (config.disableContextMenu)\r\n        {\r\n            this.disableContextMenu();\r\n        }\r\n\r\n        if (this.enabled && this.target)\r\n        {\r\n            this.startListeners();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Attempts to disable the context menu from appearing if you touch-hold on the browser.\r\n     * \r\n     * Works by listening for the `contextmenu` event and prevent defaulting it.\r\n     * \r\n     * Use this if you need to disable the OS context menu on mobile.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#disableContextMenu\r\n     * @since 3.20.0\r\n     *\r\n     * @return {this} This Touch Manager instance.\r\n     */\r\n    disableContextMenu: function ()\r\n    {\r\n        document.body.addEventListener('contextmenu', function (event)\r\n        {\r\n            event.preventDefault();\r\n            return false;\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Starts the Touch Event listeners running as long as an input target is set.\r\n     * \r\n     * This method is called automatically if Touch Input is enabled in the game config,\r\n     * which it is by default. However, you can call it manually should you need to\r\n     * delay input capturing until later in the game.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#startListeners\r\n     * @since 3.0.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n        var canvas = this.manager.canvas;\r\n        var autoFocus = (window && window.focus && this.manager.game.config.autoFocus);\r\n\r\n        this.onTouchStart = function (event)\r\n        {\r\n            if (autoFocus)\r\n            {\r\n                window.focus();\r\n            }\r\n\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchStart(event);\r\n    \r\n                if (_this.capture && event.cancelable && event.target === canvas)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onTouchStartWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.onTouchStart(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchMove = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchMove(event);\r\n    \r\n                if (_this.capture && event.cancelable)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onTouchEnd = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchEnd(event);\r\n    \r\n                if (_this.capture && event.cancelable && event.target === canvas)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onTouchEndWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.onTouchEnd(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchCancel = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchCancel(event);\r\n    \r\n                if (_this.capture)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onTouchCancelWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchCancel(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchOver = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.setCanvasOver(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchOut = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.setCanvasOut(event);\r\n            }\r\n        };\r\n\r\n        var target = this.target;\r\n\r\n        if (!target)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var passive = { passive: true };\r\n        var nonPassive = { passive: false };\r\n\r\n        target.addEventListener('touchstart', this.onTouchStart, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchmove', this.onTouchMove, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchend', this.onTouchEnd, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchcancel', this.onTouchCancel, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchover', this.onTouchOver, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchout', this.onTouchOut, (this.capture) ? nonPassive : passive);\r\n\r\n        if (window && this.manager.game.config.inputWindowEvents)\r\n        {\r\n            window.addEventListener('touchstart', this.onTouchStartWindow, nonPassive);\r\n            window.addEventListener('touchend', this.onTouchEndWindow, nonPassive);\r\n            window.addEventListener('touchcancel', this.onTouchCancelWindow, nonPassive);\r\n        }\r\n\r\n        this.enabled = true;\r\n    },\r\n\r\n    /**\r\n     * Stops the Touch Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#stopListeners\r\n     * @since 3.0.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('touchstart', this.onTouchStart);\r\n        target.removeEventListener('touchmove', this.onTouchMove);\r\n        target.removeEventListener('touchend', this.onTouchEnd);\r\n        target.removeEventListener('touchcancel', this.onTouchCancel);\r\n        target.removeEventListener('touchover', this.onTouchOver);\r\n        target.removeEventListener('touchout', this.onTouchOut);\r\n\r\n        if (window)\r\n        {\r\n            window.removeEventListener('touchstart', this.onTouchStartWindow);\r\n            window.removeEventListener('touchend', this.onTouchEndWindow);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Touch Manager instance.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.target = null;\r\n        this.enabled = false;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TouchManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Vector2 = require('./Vector2');\r\n\r\n/**\r\n * Takes the `x` and `y` coordinates and transforms them into the same space as\r\n * defined by the position, rotation and scale values.\r\n *\r\n * @function Phaser.Math.TransformXY\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The x coordinate to be transformed.\r\n * @param {number} y - The y coordinate to be transformed.\r\n * @param {number} positionX - Horizontal position of the transform point.\r\n * @param {number} positionY - Vertical position of the transform point.\r\n * @param {number} rotation - Rotation of the transform point, in radians.\r\n * @param {number} scaleX - Horizontal scale of the transform point.\r\n * @param {number} scaleY - Vertical scale of the transform point.\r\n * @param {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} [output] - The output vector, point or object for the translated coordinates.\r\n *\r\n * @return {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} The translated point.\r\n */\r\nvar TransformXY = function (x, y, positionX, positionY, rotation, scaleX, scaleY, output)\r\n{\r\n    if (output === undefined) { output = new Vector2(); }\r\n\r\n    var radianSin = Math.sin(rotation);\r\n    var radianCos = Math.cos(rotation);\r\n\r\n    // Rotate and Scale\r\n    var a = radianCos * scaleX;\r\n    var b = radianSin * scaleX;\r\n    var c = -radianSin * scaleY;\r\n    var d = radianCos * scaleY;\r\n\r\n    //  Invert\r\n    var id = 1 / ((a * d) + (c * -b));\r\n\r\n    output.x = (d * id * x) + (-c * id * y) + (((positionY * c) - (positionX * d)) * id);\r\n    output.y = (a * id * y) + (-b * id * x) + (((-positionY * a) + (positionX * b)) * id);\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = TransformXY;\r\n"],"names":["ua","OS","Browser","chrome","chromeVersion","edge","firefox","firefoxVersion","ie","ieVersion","mobileSafari","opera","safari","safariVersion","silk","trident","tridentVersion","module","exports","navigator","userAgent","test","windowsPhone","parseInt","RegExp","$1","iOS","$3","CanvasPool","Features","canvas","canvasBitBltShift","file","fileSystem","getUserMedia","littleEndian","localStorage","pointerLock","support32bit","vibration","webGL","worker","importScripts","window","getItem","error","a","b","c","isUint8","createWebGL","this","ctx","getContext","canvas2D","create2D","image","createImageData","data","Uint8ClampedArray","remove","e","testWebGL","document","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","oGetUserMedia","URL","webkitURL","mozURL","msURL","vibrate","webkitVibrate","mozVibrate","msVibrate","ArrayBuffer","Uint8Array","Uint32Array","Int32Array","init","android","chromeOS","cordova","crosswalk","desktop","ejecta","electron","iOSVersion","iPad","iPhone","kindle","linux","macOS","node","nodeWebkit","pixelRatio","webApp","windows","maxTouchPoints","match","toLowerCase","indexOf","standalone","undefined","process","versions","Class","CONST","EventEmitter","Events","GameEvents","Keyboard","Mouse","Pointer","Touch","TransformMatrix","TransformXY","InputManager","initialize","game","config","scaleManager","enabled","events","isOver","defaultCursor","keyboard","mouse","touch","pointers","pointersTotal","inputActivePointers","inputTouch","i","pointer","smoothFactor","inputSmoothFactor","push","mousePointer","activePointer","globalTopOnly","time","_tempPoint","x","y","_tempHitTest","_tempMatrix","_tempMatrix2","_tempSkip","mousePointerContainer","once","BOOT","boot","scale","emit","MANAGER_BOOT","on","PRE_RENDER","preRender","DESTROY","destroy","setCanvasOver","event","GAME_OVER","setCanvasOut","GAME_OUT","loop","now","delta","scenes","scene","getScenes","MANAGER_UPDATE","length","sys","input","updatePoll","setDefaultCursor","cursor","style","setCursor","interactiveObject","resetCursor","addPointer","quantity","output","id","updateInputPlugins","type","update","onTouchStart","changed","changedTouches","changedTouch","active","touchstart","TOUCH_START","onTouchMove","identifier","touchmove","TOUCH_MOVE","onTouchEnd","touchend","TOUCH_END","onTouchCancel","touchcancel","TOUCH_CANCEL","onMouseDown","down","updateMotion","MOUSE_DOWN","onMouseMove","move","MOUSE_MOVE","onMouseUp","up","MOUSE_UP","onMouseWheel","wheel","MOUSE_WHEEL","onPointerLockChange","isLocked","locked","POINTERLOCK_CHANGE","inputCandidate","gameObject","camera","alwaysEnabled","willRender","visible","parent","parentContainer","hitTest","gameObjects","tempPoint","csx","scrollX","csy","scrollY","getWorldPoint","worldX","worldY","point","matrix","parentMatrix","px","scrollFactorX","py","scrollFactorY","getWorldTransformMatrix","applyInverse","rotation","scaleX","scaleY","pointWithinHitArea","displayOriginX","displayOriginY","hitAreaCallback","hitArea","localX","localY","pointWithinInteractiveObject","object","transformPointer","pageX","pageY","wasMove","p0","position","p1","prevPosition","transformX","transformY","removeAllListeners","off","Angle","Distance","FuzzyEqual","SmoothStepInterpolation","Vector2","manager","downElement","upElement","button","buttons","midPoint","velocity","angle","distance","motionFactor","moveTime","downX","downY","downTime","upX","upY","upTime","primaryDown","isDown","wasTouch","wasCanceled","movementX","movementY","pointerId","deltaX","deltaY","deltaZ","updateWorldPoint","temp","positionToCamera","cx","cy","mx","my","vx","vy","set","dx","dy","Math","sqrt","target","timeStamp","ctrlKey","mozMovementX","webkitMovementX","mozMovementY","webkitMovementY","noButtonDown","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","leftButtonReleased","rightButtonReleased","middleButtonReleased","backButtonReleased","forwardButtonReleased","getDistance","getDistanceX","abs","getDistanceY","getDuration","getAngle","getInterpolatedPosition","steps","out","prevX","prevY","curX","curY","t","get","value","POINTER_LOCK_CHANGE","ArrayRemove","InputEvents","KeyCodes","NOOP","KeyboardManager","inputManager","queue","preventDefault","captures","onKeyDown","onKeyUp","inputKeyboard","inputKeyboardEventTarget","addCapture","inputKeyboardCapture","startListeners","POST_STEP","postUpdate","_this","defaultPrevented","MANAGER_PROCESS","modified","altKey","shiftKey","metaKey","keyCode","addEventListener","stopListeners","removeEventListener","keycode","split","Array","isArray","code","trim","toUpperCase","removeCapture","clearCaptures","POST_RENDER","BACKSPACE","TAB","ENTER","SHIFT","CTRL","ALT","PAUSE","CAPS_LOCK","ESC","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","LEFT","UP","RIGHT","DOWN","PRINT_SCREEN","INSERT","DELETE","ZERO","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","NUMPAD_ZERO","NUMPAD_ONE","NUMPAD_TWO","NUMPAD_THREE","NUMPAD_FOUR","NUMPAD_FIVE","NUMPAD_SIX","NUMPAD_SEVEN","NUMPAD_EIGHT","NUMPAD_NINE","NUMPAD_ADD","NUMPAD_SUBTRACT","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","SEMICOLON","PLUS","COMMA","MINUS","PERIOD","FORWARD_SLASH","BACK_SLASH","QUOTES","BACKTICK","OPEN_BRACKET","CLOSED_BRACKET","SEMICOLON_FIREFOX","COLON","COMMA_FIREFOX_WINDOWS","COMMA_FIREFOX","BRACKET_RIGHT_FIREFOX","BRACKET_LEFT_FIREFOX","MouseManager","preventDefaultDown","preventDefaultUp","preventDefaultMove","preventDefaultWheel","onMouseDownWindow","onMouseUpWindow","onMouseOver","onMouseOut","pointerLockChange","isTop","inputMouse","inputMouseEventTarget","passive","inputMousePassive","inputMousePreventDefaultDown","inputMousePreventDefaultUp","inputMousePreventDefaultMove","inputMousePreventDefaultWheel","getElementById","disableContextMenu","body","requestPointerLock","element","mozRequestPointerLock","webkitRequestPointerLock","releasePointerLock","exitPointerLock","mozExitPointerLock","webkitExitPointerLock","autoFocus","focus","inputWindowEvents","top","exception","pointerLockElement","mozPointerLockElement","webkitPointerLockElement","TouchManager","capture","onTouchStartWindow","onTouchEndWindow","onTouchCancelWindow","onTouchOver","onTouchOut","inputTouchEventTarget","inputTouchCapture","cancelable","nonPassive","positionX","positionY","radianSin","sin","radianCos","cos","d"],"sourceRoot":""}