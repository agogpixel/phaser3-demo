{"version":3,"file":"js/5228.808e7c79fdd782871efe.js","mappings":";gHAcAA,EAAOC,QAAU,Q,UCAjBD,EAAOC,QAAU,W,UCOjBD,EAAOC,QAAU,W,UCGjBD,EAAOC,QAAU,a,UCCjBD,EAAOC,QAAU,Q,UCDjBD,EAAOC,QAAU,a,UCGjBD,EAAOC,QAAU,Y,UCJjBD,EAAOC,QAAU,a,UCDjBD,EAAOC,QAAU,Q,UCYjBD,EAAOC,QAAU,kB,UCVjBD,EAAOC,QAAU,W,UCDjBD,EAAOC,QAAU,a,SCCjBD,EAAOC,QAAU,Q,UCDjBD,EAAOC,QAAU,a,UCGjBD,EAAOC,QAAU,Y,UCCjBD,EAAOC,QAAU,a,UCJjBD,EAAOC,QAAU,Q,UCWjBD,EAAOC,QAAU,kB,UCAjBD,EAAOC,QAAU,iB,UCAjBD,EAAOC,QAAU,kB,UCAjBD,EAAOC,QAAU,e,UCAjBD,EAAOC,QAAU,e,UCFjBD,EAAOC,QAAU,c,UCEjBD,EAAOC,QAAU,e,UCAjBD,EAAOC,QAAU,a,UCCjBD,EAAOC,QAAU,S,UCDjBD,EAAOC,QAAU,gB,UCGjBD,EAAOC,QAAU,mB,QCjBjBD,EAAOC,QAAU,W,UCAjBD,EAAOC,QAAU,Y,SCNjBD,EAAOC,QAAU,Q,UCIjBD,EAAOC,QAAU,W,UCJjBD,EAAOC,QAAU,U,UCGjBD,EAAOC,QAAU,qB,UCWjBD,EAAOC,QAAU,e,UCDjBD,EAAOC,QAAU,sB,UCCjBD,EAAOC,QAAU,e,UCAjBD,EAAOC,QAAU,c,UCAjBD,EAAOC,QAAU,e,UCAjBD,EAAOC,QAAU,a,UCDjBD,EAAOC,QAAU,oB,UCIjBD,EAAOC,QAAU,S,UChBjBD,EAAOC,QAAU,a,SCDjBD,EAAOC,QAAU,Y,UCCjBD,EAAOC,QAAU,S,UCGjBD,EAAOC,QAAU,U,gBCRjBD,EAAOC,QAAU,CAEbC,KAAM,EAAQ,OACdC,QAAS,EAAQ,OACjBC,SAAU,EAAQ,OAClBC,WAAY,EAAQ,OACpBC,KAAM,EAAQ,OACdC,WAAY,EAAQ,OACpBC,UAAW,EAAQ,OACnBC,WAAY,EAAQ,OACpBC,KAAM,EAAQ,OACdC,SAAU,EAAQ,KAClBC,UAAW,EAAQ,OACnBC,gBAAiB,EAAQ,OACzBC,oBAAqB,EAAQ,OAC7BC,sBAAuB,EAAQ,OAC/BC,gBAAiB,EAAQ,MACzBC,sBAAuB,EAAQ,OAC/BC,qBAAsB,EAAQ,OAC9BC,sBAAuB,EAAQ,OAC/BC,gBAAiB,EAAQ,OACzBC,gBAAiB,EAAQ,OACzBC,eAAgB,EAAQ,OACxBC,gBAAiB,EAAQ,OACzBC,wBAAyB,EAAQ,OACjCC,wBAAyB,EAAQ,OACjCC,uBAAwB,EAAQ,OAChCC,wBAAyB,EAAQ,OACjCC,sBAAuB,EAAQ,OAC/BC,yBAA0B,EAAQ,OAClCC,cAAe,EAAQ,OACvBC,iBAAkB,EAAQ,OAC1BC,aAAc,EAAQ,MACtBC,gBAAiB,EAAQ,OACzBC,eAAgB,EAAQ,OACxBC,aAAc,EAAQ,OACtBC,qBAAsB,EAAQ,OAC9BC,aAAc,EAAQ,OACtBC,YAAa,EAAQ,OACrBC,aAAc,EAAQ,OACtBC,WAAY,EAAQ,OACpBC,mBAAoB,EAAQ,OAC5BC,cAAe,EAAQ,OACvBC,mBAAoB,EAAQ,OAC5BC,WAAY,EAAQ,OACpBC,SAAU,EAAQ,MAClBC,MAAO,EAAQ,OACfC,OAAQ,EAAQ,S,UCjDpB,IAAIC,EAAc,GAIdC,EAAgB,GAEhBC,EAAc,CAoBlB,SAAuB,SAAUC,EAAKC,EAAQC,EAASC,QAEpCC,IAAXD,IAAwBA,GAAS,GAErCN,EAAYG,GAAO,CAAEC,OAAQA,EAAQC,QAASA,EAASC,OAAQA,IAenE,eAA6B,SAAUH,EAAKC,EAAQC,EAASG,GAEzDP,EAAcE,GAAO,CAAEC,OAAQA,EAAQC,QAASA,EAASG,KAAMA,IAanE,QAAsB,SAAUL,GAE5B,OAAOH,EAAYS,eAAeN,IAatC,UAAwB,SAAUA,GAE9B,OAAOF,EAAcQ,eAAeN,IAaxC,QAAsB,SAAUA,GAE5B,OAAOH,EAAYG,IAavB,UAAwB,SAAUA,GAE9B,OAAOF,EAAcE,IAazB,eAA6B,SAAUA,GAEnC,OAAQF,EAAcQ,eAAeN,GAAQF,EAAcE,GAAKC,OAAS,MAW7E,OAAqB,SAAUD,GAEvBH,EAAYS,eAAeN,WAEpBH,EAAYG,IAY3B,aAA2B,SAAUA,GAE7BF,EAAcQ,eAAeN,WAEtBF,EAAcE,IAa7B,mBAAiC,WAE7B,IAAK,IAAIA,KAAOH,EAERA,EAAYS,eAAeN,WAEpBH,EAAYG,IAW/B,qBAAmC,WAE/B,IAAK,IAAIA,KAAOF,EAERA,EAAcQ,eAAeN,WAEtBF,EAAcE,KAKjCnD,EAAOC,QAAUiD,M","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/BOOT_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/DESTROY_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/DRAG_END_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/DRAG_ENTER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/DRAG_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/DRAG_LEAVE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/DRAG_OVER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/DRAG_START_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/DROP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_DOWN_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_DRAG_END_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_DRAG_ENTER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_DRAG_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_DRAG_LEAVE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_DRAG_OVER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_DRAG_START_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_DROP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_MOVE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_OUT_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_OVER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_POINTER_DOWN_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_POINTER_MOVE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_POINTER_OUT_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_POINTER_OVER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_POINTER_UP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_POINTER_WHEEL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_UP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAMEOBJECT_WHEEL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAME_OUT_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/GAME_OVER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/MANAGER_BOOT_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/MANAGER_PROCESS_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/MANAGER_UPDATE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/POINTERLOCK_CHANGE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/POINTER_DOWN_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/POINTER_DOWN_OUTSIDE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/POINTER_MOVE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/POINTER_OUT_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/POINTER_OVER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/POINTER_UP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/POINTER_UP_OUTSIDE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/POINTER_WHEEL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/PRE_UPDATE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/SHUTDOWN_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/START_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/UPDATE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/input/events/index.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/plugins/PluginCache.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Plugin Boot Event.\r\n * \r\n * This internal event is dispatched by the Input Plugin when it boots, signalling to all of its systems to create themselves.\r\n *\r\n * @event Phaser.Input.Events#BOOT\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'boot';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Plugin Destroy Event.\r\n * \r\n * This internal event is dispatched by the Input Plugin when it is destroyed, signalling to all of its systems to destroy themselves.\r\n *\r\n * @event Phaser.Input.Events#DESTROY\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'destroy';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Drag End Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer stops dragging a Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('dragend', listener)`.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_END]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_END} event instead.\r\n *\r\n * @event Phaser.Input.Events#DRAG_END\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The interactive Game Object that this pointer stopped dragging.\r\n */\r\nmodule.exports = 'dragend';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Drag Enter Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer drags a Game Object into a Drag Target.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('dragenter', listener)`.\r\n * \r\n * A Pointer can only drag a single Game Object at once.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_ENTER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_ENTER} event instead.\r\n *\r\n * @event Phaser.Input.Events#DRAG_ENTER\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The interactive Game Object that this pointer is dragging.\r\n * @param {Phaser.GameObjects.GameObject} target - The drag target that this pointer has moved into.\r\n */\r\nmodule.exports = 'dragenter';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Drag Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves while dragging a Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('drag', listener)`.\r\n * \r\n * A Pointer can only drag a single Game Object at once.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG} event instead.\r\n *\r\n * @event Phaser.Input.Events#DRAG\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The interactive Game Object that this pointer is dragging.\r\n * @param {number} dragX - The x coordinate where the Pointer is currently dragging the Game Object, in world space.\r\n * @param {number} dragY - The y coordinate where the Pointer is currently dragging the Game Object, in world space.\r\n */\r\nmodule.exports = 'drag';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Drag Leave Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer drags a Game Object out of a Drag Target.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('dragleave', listener)`.\r\n * \r\n * A Pointer can only drag a single Game Object at once.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_LEAVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_LEAVE} event instead.\r\n *\r\n * @event Phaser.Input.Events#DRAG_LEAVE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The interactive Game Object that this pointer is dragging.\r\n * @param {Phaser.GameObjects.GameObject} target - The drag target that this pointer has left.\r\n */\r\nmodule.exports = 'dragleave';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Drag Over Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer drags a Game Object over a Drag Target.\r\n * \r\n * When the Game Object first enters the drag target it will emit a `dragenter` event. If it then moves while within\r\n * the drag target, it will emit this event instead.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('dragover', listener)`.\r\n * \r\n * A Pointer can only drag a single Game Object at once.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_OVER} event instead.\r\n *\r\n * @event Phaser.Input.Events#DRAG_OVER\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The interactive Game Object that this pointer is dragging.\r\n * @param {Phaser.GameObjects.GameObject} target - The drag target that this pointer has moved over.\r\n */\r\nmodule.exports = 'dragover';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Drag Start Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer starts to drag any Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('dragstart', listener)`.\r\n * \r\n * A Pointer can only drag a single Game Object at once.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_START]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_START} event instead.\r\n *\r\n * @event Phaser.Input.Events#DRAG_START\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The interactive Game Object that this pointer is dragging.\r\n */\r\nmodule.exports = 'dragstart';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Drop Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer drops a Game Object on a Drag Target.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('drop', listener)`.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DROP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DROP} event instead.\r\n *\r\n * @event Phaser.Input.Events#DROP\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The interactive Game Object that this pointer was dragging.\r\n * @param {Phaser.GameObjects.GameObject} target - The Drag Target the `gameObject` has been dropped on.\r\n */\r\nmodule.exports = 'drop';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Down Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is pressed down on _any_ interactive Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('gameobjectdown', listener)`.\r\n * \r\n * To receive this event, the Game Objects must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN} event instead.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN}\r\n * 2. [GAMEOBJECT_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DOWN}\r\n * 3. [POINTER_DOWN]{@linkcode Phaser.Input.Events#event:POINTER_DOWN} or [POINTER_DOWN_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_DOWN_OUTSIDE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_DOWN\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object the pointer was pressed down on.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'gameobjectdown';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Drag End Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer stops dragging it.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('dragend', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive and enabled for drag.\r\n * See [GameObject.setInteractive](Phaser.GameObjects.GameObject#setInteractive) for more details.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_DRAG_END\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {number} dragX - The x coordinate where the Pointer stopped dragging the Game Object, in world space.\r\n * @param {number} dragY - The y coordinate where the Pointer stopped dragging the Game Object, in world space.\r\n */\r\nmodule.exports = 'dragend';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Drag Enter Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer drags it into a drag target.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('dragenter', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive and enabled for drag.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_DRAG_ENTER\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} target - The drag target that this pointer has moved into.\r\n */\r\nmodule.exports = 'dragenter';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Drag Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer moves while dragging it.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('drag', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive and enabled for drag.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_DRAG\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {number} dragX - The x coordinate where the Pointer is currently dragging the Game Object, in world space.\r\n * @param {number} dragY - The y coordinate where the Pointer is currently dragging the Game Object, in world space.\r\n */\r\nmodule.exports = 'drag';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Drag Leave Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer drags it out of a drag target.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('dragleave', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive and enabled for drag.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_DRAG_LEAVE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} target - The drag target that this pointer has left.\r\n */\r\nmodule.exports = 'dragleave';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Drag Over Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer drags it over a drag target.\r\n * \r\n * When the Game Object first enters the drag target it will emit a `dragenter` event. If it then moves while within\r\n * the drag target, it will emit this event instead.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('dragover', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive and enabled for drag.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_DRAG_OVER\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} target - The drag target that this pointer has moved over.\r\n */\r\nmodule.exports = 'dragover';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Drag Start Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer starts to drag it.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('dragstart', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive and enabled for drag.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * There are lots of useful drag related properties that are set within the Game Object when dragging occurs.\r\n * For example, `gameObject.input.dragStartX`, `dragStartY` and so on.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_DRAG_START\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {number} dragX - The x coordinate where the Pointer is currently dragging the Game Object, in world space.\r\n * @param {number} dragY - The y coordinate where the Pointer is currently dragging the Game Object, in world space.\r\n */\r\nmodule.exports = 'dragstart';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Drop Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer drops it on a Drag Target.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('drop', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive and enabled for drag.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_DROP\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} target - The Drag Target the `gameObject` has been dropped on.\r\n */\r\nmodule.exports = 'drop';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Move Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is moved across _any_ interactive Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('gameobjectmove', listener)`.\r\n * \r\n * To receive this event, the Game Objects must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_MOVE} event instead.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_MOVE}\r\n * 2. [GAMEOBJECT_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_MOVE}\r\n * 3. [POINTER_MOVE]{@linkcode Phaser.Input.Events#event:POINTER_MOVE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_MOVE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object the pointer was moved on.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'gameobjectmove';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Out Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves out of _any_ interactive Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('gameobjectout', listener)`.\r\n * \r\n * To receive this event, the Game Objects must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OUT} event instead.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OUT}\r\n * 2. [GAMEOBJECT_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OUT}\r\n * 3. [POINTER_OUT]{@linkcode Phaser.Input.Events#event:POINTER_OUT}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_OUT\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object the pointer moved out of.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'gameobjectout';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Over Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves over _any_ interactive Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('gameobjectover', listener)`.\r\n * \r\n * To receive this event, the Game Objects must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OVER} event instead.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OVER}\r\n * 2. [GAMEOBJECT_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OVER}\r\n * 3. [POINTER_OVER]{@linkcode Phaser.Input.Events#event:POINTER_OVER}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_OVER\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object the pointer moved over.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'gameobjectover';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Pointer Down Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer is pressed down on it.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('pointerdown', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN}\r\n * 2. [GAMEOBJECT_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DOWN}\r\n * 3. [POINTER_DOWN]{@linkcode Phaser.Input.Events#event:POINTER_DOWN} or [POINTER_DOWN_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_DOWN_OUTSIDE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_POINTER_DOWN\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {number} localX - The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @param {number} localY - The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'pointerdown';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Pointer Move Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer is moved while over it.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('pointermove', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_MOVE}\r\n * 2. [GAMEOBJECT_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_MOVE}\r\n * 3. [POINTER_MOVE]{@linkcode Phaser.Input.Events#event:POINTER_MOVE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_POINTER_MOVE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {number} localX - The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @param {number} localY - The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'pointermove';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Pointer Out Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer moves out of it.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('pointerout', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OUT}\r\n * 2. [GAMEOBJECT_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OUT}\r\n * 3. [POINTER_OUT]{@linkcode Phaser.Input.Events#event:POINTER_OUT}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_POINTER_OUT\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'pointerout';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Pointer Over Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer moves over it.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('pointerover', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OVER}\r\n * 2. [GAMEOBJECT_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OVER}\r\n * 3. [POINTER_OVER]{@linkcode Phaser.Input.Events#event:POINTER_OVER}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_POINTER_OVER\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {number} localX - The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @param {number} localY - The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'pointerover';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Pointer Up Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer is released while over it.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('pointerup', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP}\r\n * 2. [GAMEOBJECT_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_UP}\r\n * 3. [POINTER_UP]{@linkcode Phaser.Input.Events#event:POINTER_UP} or [POINTER_UP_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_UP_OUTSIDE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_POINTER_UP\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {number} localX - The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @param {number} localY - The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'pointerup';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Pointer Wheel Event.\r\n * \r\n * This event is dispatched by an interactive Game Object if a pointer has its wheel moved while over it.\r\n * \r\n * Listen to this event from a Game Object using: `gameObject.on('wheel', listener)`.\r\n * Note that the scope of the listener is automatically set to be the Game Object instance itself.\r\n * \r\n * To receive this event, the Game Object must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_WHEEL]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_WHEEL}\r\n * 2. [GAMEOBJECT_WHEEL]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_WHEEL}\r\n * 3. [POINTER_WHEEL]{@linkcode Phaser.Input.Events#event:POINTER_WHEEL}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_POINTER_WHEEL\r\n * @since 3.18.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {number} deltaX - The horizontal scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n * @param {number} deltaY - The vertical scroll amount that occurred due to the user moving a mouse wheel or similar input device. This value will typically be less than 0 if the user scrolls up and greater than zero if scrolling down.\r\n * @param {number} deltaZ - The z-axis scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'wheel';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Up Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is released while over _any_ interactive Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('gameobjectup', listener)`.\r\n * \r\n * To receive this event, the Game Objects must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP} event instead.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP}\r\n * 2. [GAMEOBJECT_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_UP}\r\n * 3. [POINTER_UP]{@linkcode Phaser.Input.Events#event:POINTER_UP} or [POINTER_UP_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_UP_OUTSIDE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_UP\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object the pointer was over when released.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'gameobjectup';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Object Wheel Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer has its wheel moved while over _any_ interactive Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('gameobjectwheel', listener)`.\r\n * \r\n * To receive this event, the Game Objects must have been set as interactive.\r\n * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\r\n * \r\n * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_WHEEL]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_WHEEL} event instead.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_WHEEL]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_WHEEL}\r\n * 2. [GAMEOBJECT_WHEEL]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_WHEEL}\r\n * 3. [POINTER_WHEEL]{@linkcode Phaser.Input.Events#event:POINTER_WHEEL}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#GAMEOBJECT_WHEEL\r\n * @since 3.18.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object the pointer was over when the wheel changed.\r\n * @param {number} deltaX - The horizontal scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n * @param {number} deltaY - The vertical scroll amount that occurred due to the user moving a mouse wheel or similar input device. This value will typically be less than 0 if the user scrolls up and greater than zero if scrolling down.\r\n * @param {number} deltaZ - The z-axis scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n * @param {Phaser.Types.Input.EventData} event - The Phaser input event. You can call `stopPropagation()` to halt it from going any further in the event flow.\r\n */\r\nmodule.exports = 'gameobjectwheel';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Plugin Game Out Event.\r\n * \r\n * This event is dispatched by the Input Plugin if the active pointer leaves the game canvas and is now\r\n * outside of it, elsewhere on the web page.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('gameout', listener)`.\r\n *\r\n * @event Phaser.Input.Events#GAME_OUT\r\n * @since 3.16.1\r\n * \r\n * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n * @param {(MouseEvent|TouchEvent)} event - The DOM Event that triggered the canvas out.\r\n */\r\nmodule.exports = 'gameout';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Plugin Game Over Event.\r\n * \r\n * This event is dispatched by the Input Plugin if the active pointer enters the game canvas and is now\r\n * over of it, having previously been elsewhere on the web page.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('gameover', listener)`.\r\n *\r\n * @event Phaser.Input.Events#GAME_OVER\r\n * @since 3.16.1\r\n * \r\n * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n * @param {(MouseEvent|TouchEvent)} event - The DOM Event that triggered the canvas over.\r\n */\r\nmodule.exports = 'gameover';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Manager Boot Event.\r\n * \r\n * This internal event is dispatched by the Input Manager when it boots.\r\n *\r\n * @event Phaser.Input.Events#MANAGER_BOOT\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'boot';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Manager Process Event.\r\n * \r\n * This internal event is dispatched by the Input Manager when not using the legacy queue system,\r\n * and it wants the Input Plugins to update themselves.\r\n *\r\n * @event Phaser.Input.Events#MANAGER_PROCESS\r\n * @since 3.0.0\r\n * \r\n * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n */\r\nmodule.exports = 'process';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Manager Update Event.\r\n * \r\n * This internal event is dispatched by the Input Manager as part of its update step.\r\n *\r\n * @event Phaser.Input.Events#MANAGER_UPDATE\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'update';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Manager Pointer Lock Change Event.\r\n * \r\n * This event is dispatched by the Input Manager when it is processing a native Pointer Lock Change DOM Event.\r\n *\r\n * @event Phaser.Input.Events#POINTERLOCK_CHANGE\r\n * @since 3.0.0\r\n * \r\n * @param {Event} event - The native DOM Event.\r\n * @param {boolean} locked - The locked state of the Mouse Pointer.\r\n */\r\nmodule.exports = 'pointerlockchange';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Down Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is pressed down anywhere.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('pointerdown', listener)`.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN}\r\n * 2. [GAMEOBJECT_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DOWN}\r\n * 3. [POINTER_DOWN]{@linkcode Phaser.Input.Events#event:POINTER_DOWN} or [POINTER_DOWN_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_DOWN_OUTSIDE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#POINTER_DOWN\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject[]} currentlyOver - An array containing all interactive Game Objects that the pointer was over when the event was created.\r\n */\r\nmodule.exports = 'pointerdown';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Down Outside Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is pressed down anywhere outside of the game canvas.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('pointerdownoutside', listener)`.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN}\r\n * 2. [GAMEOBJECT_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DOWN}\r\n * 3. [POINTER_DOWN]{@linkcode Phaser.Input.Events#event:POINTER_DOWN} or [POINTER_DOWN_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_DOWN_OUTSIDE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#POINTER_DOWN_OUTSIDE\r\n * @since 3.16.1\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n */\r\nmodule.exports = 'pointerdownoutside';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Move Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is moved anywhere.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('pointermove', listener)`.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_MOVE}\r\n * 2. [GAMEOBJECT_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_MOVE}\r\n * 3. [POINTER_MOVE]{@linkcode Phaser.Input.Events#event:POINTER_MOVE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#POINTER_MOVE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject[]} currentlyOver - An array containing all interactive Game Objects that the pointer was over when the event was created.\r\n */\r\nmodule.exports = 'pointermove';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Out Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves out of any interactive Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('pointerout', listener)`.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OUT}\r\n * 2. [GAMEOBJECT_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OUT}\r\n * 3. [POINTER_OUT]{@linkcode Phaser.Input.Events#event:POINTER_OUT}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#POINTER_OUT\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject[]} justOut - An array containing all interactive Game Objects that the pointer moved out of when the event was created.\r\n */\r\nmodule.exports = 'pointerout';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Over Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves over any interactive Game Object.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('pointerover', listener)`.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OVER}\r\n * 2. [GAMEOBJECT_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OVER}\r\n * 3. [POINTER_OVER]{@linkcode Phaser.Input.Events#event:POINTER_OVER}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#POINTER_OVER\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject[]} justOver - An array containing all interactive Game Objects that the pointer moved over when the event was created.\r\n */\r\nmodule.exports = 'pointerover';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Up Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is released anywhere.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('pointerup', listener)`.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP}\r\n * 2. [GAMEOBJECT_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_UP}\r\n * 3. [POINTER_UP]{@linkcode Phaser.Input.Events#event:POINTER_UP} or [POINTER_UP_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_UP_OUTSIDE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#POINTER_UP\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject[]} currentlyOver - An array containing all interactive Game Objects that the pointer was over when the event was created.\r\n */\r\nmodule.exports = 'pointerup';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Up Outside Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is released anywhere outside of the game canvas.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('pointerupoutside', listener)`.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP}\r\n * 2. [GAMEOBJECT_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_UP}\r\n * 3. [POINTER_UP]{@linkcode Phaser.Input.Events#event:POINTER_UP} or [POINTER_UP_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_UP_OUTSIDE}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#POINTER_UP_OUTSIDE\r\n * @since 3.16.1\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n */\r\nmodule.exports = 'pointerupoutside';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pointer Wheel Input Event.\r\n * \r\n * This event is dispatched by the Input Plugin belonging to a Scene if a pointer has its wheel updated.\r\n * \r\n * Listen to this event from within a Scene using: `this.input.on('wheel', listener)`.\r\n * \r\n * The event hierarchy is as follows:\r\n * \r\n * 1. [GAMEOBJECT_POINTER_WHEEL]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_WHEEL}\r\n * 2. [GAMEOBJECT_WHEEL]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_WHEEL}\r\n * 3. [POINTER_WHEEL]{@linkcode Phaser.Input.Events#event:POINTER_WHEEL}\r\n * \r\n * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\r\n * the propagation of this event.\r\n *\r\n * @event Phaser.Input.Events#POINTER_WHEEL\r\n * @since 3.18.0\r\n * \r\n * @param {Phaser.Input.Pointer} pointer - The Pointer responsible for triggering this event.\r\n * @param {Phaser.GameObjects.GameObject[]} currentlyOver - An array containing all interactive Game Objects that the pointer was over when the event was created.\r\n * @param {number} deltaX - The horizontal scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n * @param {number} deltaY - The vertical scroll amount that occurred due to the user moving a mouse wheel or similar input device. This value will typically be less than 0 if the user scrolls up and greater than zero if scrolling down.\r\n * @param {number} deltaZ - The z-axis scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n */\r\nmodule.exports = 'wheel';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Plugin Pre-Update Event.\r\n * \r\n * This internal event is dispatched by the Input Plugin at the start of its `preUpdate` method.\r\n * This hook is designed specifically for input plugins, but can also be listened to from user-land code.\r\n *\r\n * @event Phaser.Input.Events#PRE_UPDATE\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'preupdate';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Plugin Shutdown Event.\r\n * \r\n * This internal event is dispatched by the Input Plugin when it shuts down, signalling to all of its systems to shut themselves down.\r\n *\r\n * @event Phaser.Input.Events#SHUTDOWN\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'shutdown';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Plugin Start Event.\r\n * \r\n * This internal event is dispatched by the Input Plugin when it has finished setting-up,\r\n * signalling to all of its internal systems to start.\r\n *\r\n * @event Phaser.Input.Events#START\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'start';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Input Plugin Update Event.\r\n * \r\n * This internal event is dispatched by the Input Plugin at the start of its `update` method.\r\n * This hook is designed specifically for input plugins, but can also be listened to from user-land code.\r\n *\r\n * @event Phaser.Input.Events#UPDATE\r\n * @since 3.0.0\r\n * \r\n * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n */\r\nmodule.exports = 'update';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Input.Events\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    BOOT: require('./BOOT_EVENT'),\r\n    DESTROY: require('./DESTROY_EVENT'),\r\n    DRAG_END: require('./DRAG_END_EVENT'),\r\n    DRAG_ENTER: require('./DRAG_ENTER_EVENT'),\r\n    DRAG: require('./DRAG_EVENT'),\r\n    DRAG_LEAVE: require('./DRAG_LEAVE_EVENT'),\r\n    DRAG_OVER: require('./DRAG_OVER_EVENT'),\r\n    DRAG_START: require('./DRAG_START_EVENT'),\r\n    DROP: require('./DROP_EVENT'),\r\n    GAME_OUT: require('./GAME_OUT_EVENT'),\r\n    GAME_OVER: require('./GAME_OVER_EVENT'),\r\n    GAMEOBJECT_DOWN: require('./GAMEOBJECT_DOWN_EVENT'),\r\n    GAMEOBJECT_DRAG_END: require('./GAMEOBJECT_DRAG_END_EVENT'),\r\n    GAMEOBJECT_DRAG_ENTER: require('./GAMEOBJECT_DRAG_ENTER_EVENT'),\r\n    GAMEOBJECT_DRAG: require('./GAMEOBJECT_DRAG_EVENT'),\r\n    GAMEOBJECT_DRAG_LEAVE: require('./GAMEOBJECT_DRAG_LEAVE_EVENT'),\r\n    GAMEOBJECT_DRAG_OVER: require('./GAMEOBJECT_DRAG_OVER_EVENT'),\r\n    GAMEOBJECT_DRAG_START: require('./GAMEOBJECT_DRAG_START_EVENT'),\r\n    GAMEOBJECT_DROP: require('./GAMEOBJECT_DROP_EVENT'),\r\n    GAMEOBJECT_MOVE: require('./GAMEOBJECT_MOVE_EVENT'),\r\n    GAMEOBJECT_OUT: require('./GAMEOBJECT_OUT_EVENT'),\r\n    GAMEOBJECT_OVER: require('./GAMEOBJECT_OVER_EVENT'),\r\n    GAMEOBJECT_POINTER_DOWN: require('./GAMEOBJECT_POINTER_DOWN_EVENT'),\r\n    GAMEOBJECT_POINTER_MOVE: require('./GAMEOBJECT_POINTER_MOVE_EVENT'),\r\n    GAMEOBJECT_POINTER_OUT: require('./GAMEOBJECT_POINTER_OUT_EVENT'),\r\n    GAMEOBJECT_POINTER_OVER: require('./GAMEOBJECT_POINTER_OVER_EVENT'),\r\n    GAMEOBJECT_POINTER_UP: require('./GAMEOBJECT_POINTER_UP_EVENT'),\r\n    GAMEOBJECT_POINTER_WHEEL: require('./GAMEOBJECT_POINTER_WHEEL_EVENT'),\r\n    GAMEOBJECT_UP: require('./GAMEOBJECT_UP_EVENT'),\r\n    GAMEOBJECT_WHEEL: require('./GAMEOBJECT_WHEEL_EVENT'),\r\n    MANAGER_BOOT: require('./MANAGER_BOOT_EVENT'),\r\n    MANAGER_PROCESS: require('./MANAGER_PROCESS_EVENT'),\r\n    MANAGER_UPDATE: require('./MANAGER_UPDATE_EVENT'),\r\n    POINTER_DOWN: require('./POINTER_DOWN_EVENT'),\r\n    POINTER_DOWN_OUTSIDE: require('./POINTER_DOWN_OUTSIDE_EVENT'),\r\n    POINTER_MOVE: require('./POINTER_MOVE_EVENT'),\r\n    POINTER_OUT: require('./POINTER_OUT_EVENT'),\r\n    POINTER_OVER: require('./POINTER_OVER_EVENT'),\r\n    POINTER_UP: require('./POINTER_UP_EVENT'),\r\n    POINTER_UP_OUTSIDE: require('./POINTER_UP_OUTSIDE_EVENT'),\r\n    POINTER_WHEEL: require('./POINTER_WHEEL_EVENT'),\r\n    POINTERLOCK_CHANGE: require('./POINTERLOCK_CHANGE_EVENT'),\r\n    PRE_UPDATE: require('./PRE_UPDATE_EVENT'),\r\n    SHUTDOWN: require('./SHUTDOWN_EVENT'),\r\n    START: require('./START_EVENT'),\r\n    UPDATE: require('./UPDATE_EVENT')\r\n\r\n};\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Contains the plugins that Phaser uses globally and locally.\r\n//  These are the source objects, not instantiated.\r\nvar corePlugins = {};\r\n\r\n//  Contains the plugins that the dev has loaded into their game\r\n//  These are the source objects, not instantiated.\r\nvar customPlugins = {};\r\n\r\nvar PluginCache = {};\r\n\r\n/**\r\n * @namespace Phaser.Plugins.PluginCache\r\n */\r\n\r\n/**\r\n * Static method called directly by the Core internal Plugins.\r\n * Key is a reference used to get the plugin from the plugins object (i.e. InputPlugin)\r\n * Plugin is the object to instantiate to create the plugin\r\n * Mapping is what the plugin is injected into the Scene.Systems as (i.e. input)\r\n *\r\n * @method Phaser.Plugins.PluginCache.register\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Scene Systems, this is the property key map used.\r\n * @param {boolean} [custom=false] - Core Scene plugin or a Custom Scene plugin?\r\n */\r\nPluginCache.register = function (key, plugin, mapping, custom)\r\n{\r\n    if (custom === undefined) { custom = false; }\r\n\r\n    corePlugins[key] = { plugin: plugin, mapping: mapping, custom: custom };\r\n};\r\n\r\n/**\r\n * Stores a custom plugin in the global plugin cache.\r\n * The key must be unique, within the scope of the cache.\r\n *\r\n * @method Phaser.Plugins.PluginCache.registerCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Scene Systems, this is the property key map used.\r\n * @param {?any} data - A value to be passed to the plugin's `init` method.\r\n */\r\nPluginCache.registerCustom = function (key, plugin, mapping, data)\r\n{\r\n    customPlugins[key] = { plugin: plugin, mapping: mapping, data: data };\r\n};\r\n\r\n/**\r\n * Checks if the given key is already being used in the core plugin cache.\r\n *\r\n * @method Phaser.Plugins.PluginCache.hasCore\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key to check for.\r\n *\r\n * @return {boolean} `true` if the key is already in use in the core cache, otherwise `false`.\r\n */\r\nPluginCache.hasCore = function (key)\r\n{\r\n    return corePlugins.hasOwnProperty(key);\r\n};\r\n\r\n/**\r\n * Checks if the given key is already being used in the custom plugin cache.\r\n *\r\n * @method Phaser.Plugins.PluginCache.hasCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key to check for.\r\n *\r\n * @return {boolean} `true` if the key is already in use in the custom cache, otherwise `false`.\r\n */\r\nPluginCache.hasCustom = function (key)\r\n{\r\n    return customPlugins.hasOwnProperty(key);\r\n};\r\n\r\n/**\r\n * Returns the core plugin object from the cache based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.getCore\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the core plugin to get.\r\n *\r\n * @return {Phaser.Types.Plugins.CorePluginContainer} The core plugin object.\r\n */\r\nPluginCache.getCore = function (key)\r\n{\r\n    return corePlugins[key];\r\n};\r\n\r\n/**\r\n * Returns the custom plugin object from the cache based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.getCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the custom plugin to get.\r\n *\r\n * @return {Phaser.Types.Plugins.CustomPluginContainer} The custom plugin object.\r\n */\r\nPluginCache.getCustom = function (key)\r\n{\r\n    return customPlugins[key];\r\n};\r\n\r\n/**\r\n * Returns an object from the custom cache based on the given key that can be instantiated.\r\n *\r\n * @method Phaser.Plugins.PluginCache.getCustomClass\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the custom plugin to get.\r\n *\r\n * @return {function} The custom plugin object.\r\n */\r\nPluginCache.getCustomClass = function (key)\r\n{\r\n    return (customPlugins.hasOwnProperty(key)) ? customPlugins[key].plugin : null;\r\n};\r\n\r\n/**\r\n * Removes a core plugin based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.remove\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the core plugin to remove.\r\n */\r\nPluginCache.remove = function (key)\r\n{\r\n    if (corePlugins.hasOwnProperty(key))\r\n    {\r\n        delete corePlugins[key];\r\n    }\r\n};\r\n\r\n/**\r\n * Removes a custom plugin based on the given key.\r\n *\r\n * @method Phaser.Plugins.PluginCache.removeCustom\r\n * @since 3.8.0\r\n * \r\n * @param {string} key - The key of the custom plugin to remove.\r\n */\r\nPluginCache.removeCustom = function (key)\r\n{\r\n    if (customPlugins.hasOwnProperty(key))\r\n    {\r\n        delete customPlugins[key];\r\n    }\r\n};\r\n\r\n/**\r\n * Removes all Core Plugins.\r\n * \r\n * This includes all of the internal system plugins that Phaser needs, like the Input Plugin and Loader Plugin.\r\n * So be sure you only call this if you do not wish to run Phaser again.\r\n *\r\n * @method Phaser.Plugins.PluginCache.destroyCorePlugins\r\n * @since 3.12.0\r\n */\r\nPluginCache.destroyCorePlugins = function ()\r\n{\r\n    for (var key in corePlugins)\r\n    {\r\n        if (corePlugins.hasOwnProperty(key))\r\n        {\r\n            delete corePlugins[key];\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Removes all Custom Plugins.\r\n *\r\n * @method Phaser.Plugins.PluginCache.destroyCustomPlugins\r\n * @since 3.12.0\r\n */\r\nPluginCache.destroyCustomPlugins = function ()\r\n{\r\n    for (var key in customPlugins)\r\n    {\r\n        if (customPlugins.hasOwnProperty(key))\r\n        {\r\n            delete customPlugins[key];\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = PluginCache;\r\n"],"names":["module","exports","BOOT","DESTROY","DRAG_END","DRAG_ENTER","DRAG","DRAG_LEAVE","DRAG_OVER","DRAG_START","DROP","GAME_OUT","GAME_OVER","GAMEOBJECT_DOWN","GAMEOBJECT_DRAG_END","GAMEOBJECT_DRAG_ENTER","GAMEOBJECT_DRAG","GAMEOBJECT_DRAG_LEAVE","GAMEOBJECT_DRAG_OVER","GAMEOBJECT_DRAG_START","GAMEOBJECT_DROP","GAMEOBJECT_MOVE","GAMEOBJECT_OUT","GAMEOBJECT_OVER","GAMEOBJECT_POINTER_DOWN","GAMEOBJECT_POINTER_MOVE","GAMEOBJECT_POINTER_OUT","GAMEOBJECT_POINTER_OVER","GAMEOBJECT_POINTER_UP","GAMEOBJECT_POINTER_WHEEL","GAMEOBJECT_UP","GAMEOBJECT_WHEEL","MANAGER_BOOT","MANAGER_PROCESS","MANAGER_UPDATE","POINTER_DOWN","POINTER_DOWN_OUTSIDE","POINTER_MOVE","POINTER_OUT","POINTER_OVER","POINTER_UP","POINTER_UP_OUTSIDE","POINTER_WHEEL","POINTERLOCK_CHANGE","PRE_UPDATE","SHUTDOWN","START","UPDATE","corePlugins","customPlugins","PluginCache","key","plugin","mapping","custom","undefined","data","hasOwnProperty"],"sourceRoot":""}