{"version":3,"file":"js/7205.761b789343b3842c065d.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/Add.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/AddAt.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/BringToTop.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/CountAllMatching.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/Each.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/EachInRange.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/GetAll.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/GetFirst.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/GetRandom.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/MoveAbove.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/MoveBelow.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/MoveDown.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/MoveTo.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/MoveUp.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/NumberArray.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/NumberArrayStep.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/QuickSelect.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/Range.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/RemoveAt.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/RemoveBetween.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/RemoveRandomElement.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/Replace.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/SafeRange.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/SendToBack.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/SetAll.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/StableSort.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/Swap.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/index.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/CheckMatrix.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/MatrixToString.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/ReverseColumns.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/ReverseRows.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/Rotate180.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/RotateLeft.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/RotateMatrix.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/RotateRight.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/TranslateMatrix.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/TransposeMatrix.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/matrix/index.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/string/Pad.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Adds the given item, or array of items, to the array.\r\n *\r\n * Each item must be unique within the array.\r\n *\r\n * The array is modified in-place and returned.\r\n *\r\n * You can optionally specify a limit to the maximum size of the array. If the quantity of items being\r\n * added will take the array length over this limit, it will stop adding once the limit is reached.\r\n *\r\n * You can optionally specify a callback to be invoked for each item successfully added to the array.\r\n *\r\n * @function Phaser.Utils.Array.Add\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be added to.\r\n * @param {any|any[]} item - The item, or array of items, to add to the array. Each item must be unique within the array.\r\n * @param {number} [limit] - Optional limit which caps the size of the array.\r\n * @param {function} [callback] - A callback to be invoked for each item successfully added to the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar Add = function (array, item, limit, callback, context)\r\n{\r\n    if (context === undefined) { context = array; }\r\n\r\n    if (limit > 0)\r\n    {\r\n        var remaining = limit - array.length;\r\n\r\n        //  There's nothing more we can do here, the array is full\r\n        if (remaining <= 0)\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  Fast path to avoid array mutation and iteration\r\n    if (!Array.isArray(item))\r\n    {\r\n        if (array.indexOf(item) === -1)\r\n        {\r\n            array.push(item);\r\n\r\n            if (callback)\r\n            {\r\n                callback.call(context, item);\r\n            }\r\n\r\n            return item;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  If we got this far, we have an array of items to insert\r\n\r\n    //  Ensure all the items are unique\r\n    var itemLength = item.length - 1;\r\n\r\n    while (itemLength >= 0)\r\n    {\r\n        if (array.indexOf(item[itemLength]) !== -1)\r\n        {\r\n            //  Already exists in array, so remove it\r\n            item.splice(itemLength, 1);\r\n        }\r\n\r\n        itemLength--;\r\n    }\r\n\r\n    //  Anything left?\r\n    itemLength = item.length;\r\n\r\n    if (itemLength === 0)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    if (limit > 0 && itemLength > remaining)\r\n    {\r\n        item.splice(remaining);\r\n\r\n        itemLength = remaining;\r\n    }\r\n\r\n    for (var i = 0; i < itemLength; i++)\r\n    {\r\n        var entry = item[i];\r\n\r\n        array.push(entry);\r\n\r\n        if (callback)\r\n        {\r\n            callback.call(context, entry);\r\n        }\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = Add;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Adds the given item, or array of items, to the array starting at the index specified.\r\n * \r\n * Each item must be unique within the array.\r\n * \r\n * Existing elements in the array are shifted up.\r\n * \r\n * The array is modified in-place and returned.\r\n * \r\n * You can optionally specify a limit to the maximum size of the array. If the quantity of items being\r\n * added will take the array length over this limit, it will stop adding once the limit is reached.\r\n * \r\n * You can optionally specify a callback to be invoked for each item successfully added to the array.\r\n *\r\n * @function Phaser.Utils.Array.AddAt\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be added to.\r\n * @param {any|any[]} item - The item, or array of items, to add to the array.\r\n * @param {number} [index=0] - The index in the array where the item will be inserted.\r\n * @param {number} [limit] - Optional limit which caps the size of the array.\r\n * @param {function} [callback] - A callback to be invoked for each item successfully added to the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar AddAt = function (array, item, index, limit, callback, context)\r\n{\r\n    if (index === undefined) { index = 0; }\r\n    if (context === undefined) { context = array; }\r\n\r\n    if (limit > 0)\r\n    {\r\n        var remaining = limit - array.length;\r\n\r\n        //  There's nothing more we can do here, the array is full\r\n        if (remaining <= 0)\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  Fast path to avoid array mutation and iteration\r\n    if (!Array.isArray(item))\r\n    {\r\n        if (array.indexOf(item) === -1)\r\n        {\r\n            array.splice(index, 0, item);\r\n\r\n            if (callback)\r\n            {\r\n                callback.call(context, item);\r\n            }\r\n\r\n            return item;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  If we got this far, we have an array of items to insert\r\n\r\n    //  Ensure all the items are unique\r\n    var itemLength = item.length - 1;\r\n\r\n    while (itemLength >= 0)\r\n    {\r\n        if (array.indexOf(item[itemLength]) !== -1)\r\n        {\r\n            //  Already exists in array, so remove it\r\n            item.pop();\r\n        }\r\n\r\n        itemLength--;\r\n    }\r\n\r\n    //  Anything left?\r\n    itemLength = item.length;\r\n\r\n    if (itemLength === 0)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    //  Truncate to the limit\r\n    if (limit > 0 && itemLength > remaining)\r\n    {\r\n        item.splice(remaining);\r\n\r\n        itemLength = remaining;\r\n    }\r\n\r\n    for (var i = itemLength - 1; i >= 0; i--)\r\n    {\r\n        var entry = item[i];\r\n\r\n        array.splice(index, 0, entry);\r\n\r\n        if (callback)\r\n        {\r\n            callback.call(context, entry);\r\n        }\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = AddAt;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Moves the given element to the top of the array.\r\n * The array is modified in-place.\r\n *\r\n * @function Phaser.Utils.Array.BringToTop\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array.\r\n * @param {*} item - The element to move.\r\n *\r\n * @return {*} The element that was moved.\r\n */\r\nvar BringToTop = function (array, item)\r\n{\r\n    var currentIndex = array.indexOf(item);\r\n\r\n    if (currentIndex !== -1 && currentIndex < array.length)\r\n    {\r\n        array.splice(currentIndex, 1);\r\n        array.push(item);\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = BringToTop;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns the total number of elements in the array which have a property matching the given value.\r\n *\r\n * @function Phaser.Utils.Array.CountAllMatching\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} property - The property to test on each array element.\r\n * @param {*} value - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {number} [startIndex] - An optional start index to search from.\r\n * @param {number} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {number} The total number of elements with properties matching the given value.\r\n */\r\nvar CountAllMatching = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    var total = 0;\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (child[property] === value)\r\n            {\r\n                total++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return total;\r\n};\r\n\r\nmodule.exports = CountAllMatching;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Passes each element in the array to the given callback.\r\n *\r\n * @function Phaser.Utils.Array.Each\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {function} callback - A callback to be invoked for each item in the array.\r\n * @param {object} context - The context in which the callback is invoked.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the current array item.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar Each = function (array, callback, context)\r\n{\r\n    var i;\r\n    var args = [ null ];\r\n\r\n    for (i = 3; i < arguments.length; i++)\r\n    {\r\n        args.push(arguments[i]);\r\n    }\r\n\r\n    for (i = 0; i < array.length; i++)\r\n    {\r\n        args[0] = array[i];\r\n\r\n        callback.apply(context, args);\r\n    }\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = Each;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Passes each element in the array, between the start and end indexes, to the given callback.\r\n *\r\n * @function Phaser.Utils.Array.EachInRange\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {function} callback - A callback to be invoked for each item in the array.\r\n * @param {object} context - The context in which the callback is invoked.\r\n * @param {number} startIndex - The start index to search from.\r\n * @param {number} endIndex - The end index to search to.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar EachInRange = function (array, callback, context, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        var i;\r\n        var args = [ null ];\r\n\r\n        for (i = 5; i < arguments.length; i++)\r\n        {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        for (i = startIndex; i < endIndex; i++)\r\n        {\r\n            args[0] = array[i];\r\n\r\n            callback.apply(context, args);\r\n        }\r\n    }\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = EachInRange;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns all elements in the array.\r\n *\r\n * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n *\r\n * For example: `getAll('visible', true)` would return only elements that have their visible property set.\r\n *\r\n * Optionally you can specify a start and end index. For example if the array had 100 elements,\r\n * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\r\n * the first 50 elements.\r\n *\r\n * @function Phaser.Utils.Array.GetAll\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} [property] - The property to test on each array element.\r\n * @param {*} [value] - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {number} [startIndex] - An optional start index to search from.\r\n * @param {number} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {array} All matching elements from the array.\r\n */\r\nvar GetAll = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    var output = [];\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (!property ||\r\n                (property && value === undefined && child.hasOwnProperty(property)) ||\r\n                (property && value !== undefined && child[property] === value))\r\n            {\r\n                output.push(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = GetAll;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns the first element in the array.\r\n *\r\n * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n *\r\n * For example: `getAll('visible', true)` would return the first element that had its `visible` property set.\r\n *\r\n * Optionally you can specify a start and end index. For example if the array had 100 elements,\r\n * and you set `startIndex` to 0 and `endIndex` to 50, it would search only the first 50 elements.\r\n *\r\n * @function Phaser.Utils.Array.GetFirst\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} [property] - The property to test on each array element.\r\n * @param {*} [value] - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {number} [startIndex=0] - An optional start index to search from.\r\n * @param {number} [endIndex=array.length] - An optional end index to search up to (but not included)\r\n *\r\n * @return {object} The first matching element from the array, or `null` if no element could be found in the range given.\r\n */\r\nvar GetFirst = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (!property ||\r\n                (property && value === undefined && child.hasOwnProperty(property)) ||\r\n                (property && value !== undefined && child[property] === value))\r\n            {\r\n                return child;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nmodule.exports = GetFirst;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns a Random element from the array.\r\n *\r\n * @function Phaser.Utils.Array.GetRandom\r\n * @since 3.0.0\r\n *\r\n * @param {array} array - The array to select the random entry from.\r\n * @param {number} [startIndex=0] - An optional start index.\r\n * @param {number} [length=array.length] - An optional length, the total number of elements (from the startIndex) to choose from.\r\n *\r\n * @return {*} A random element from the array, or `null` if no element could be found in the range given.\r\n */\r\nvar GetRandom = function (array, startIndex, length)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (length === undefined) { length = array.length; }\r\n\r\n    var randomIndex = startIndex + Math.floor(Math.random() * length);\r\n\r\n    return (array[randomIndex] === undefined) ? null : array[randomIndex];\r\n};\r\n\r\nmodule.exports = GetRandom;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Moves the given array element above another one in the array.\r\n * The array is modified in-place.\r\n *\r\n * @function Phaser.Utils.Array.MoveAbove\r\n * @since 3.55.0\r\n *\r\n * @param {array} array - The input array.\r\n * @param {*} item1 - The element to move above base element.\r\n * @param {*} item2 - The base element.\r\n * \r\n *\r\n * @return {array} The input array.\r\n */\r\nvar MoveAbove = function (array, item1, item2)\r\n{\r\n    if (item1 === item2)\r\n    {\r\n        return array;\r\n    }\r\n\r\n    var currentIndex = array.indexOf(item1);\r\n    var baseIndex = array.indexOf(item2);\r\n\r\n    if (currentIndex < 0 || baseIndex < 0)\r\n    {\r\n        throw new Error('Supplied items must be elements of the same array');\r\n    }\r\n\r\n    if (currentIndex > baseIndex)\r\n    {\r\n        // item1 is already above item2\r\n        return array;\r\n    }\r\n\r\n    //  Remove\r\n    array.splice(currentIndex, 1);\r\n\r\n    //  Add in new location\r\n    if (baseIndex === array.length - 1)\r\n    {\r\n        array.push(item1);\r\n    }\r\n    else\r\n    {\r\n        array.splice(baseIndex, 0, item1);\r\n    }\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = MoveAbove;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Moves the given array element below another one in the array.\r\n * The array is modified in-place.\r\n *\r\n * @function Phaser.Utils.Array.MoveBelow\r\n * @since 3.55.0\r\n *\r\n * @param {array} array - The input array.\r\n * @param {*} item1 - The element to move below base element.\r\n * @param {*} item2 - The base element.\r\n * \r\n *\r\n * @return {array} The input array.\r\n */\r\nvar MoveBelow = function (array, item1, item2)\r\n{\r\n    if (item1 === item2)\r\n    {\r\n        return array;\r\n    }\r\n\r\n    var currentIndex = array.indexOf(item1);\r\n    var baseIndex = array.indexOf(item2);\r\n\r\n    if (currentIndex < 0 || baseIndex < 0)\r\n    {\r\n        throw new Error('Supplied items must be elements of the same array');\r\n    }\r\n\r\n    if (currentIndex < baseIndex)\r\n    {\r\n        // item1 is already below item2\r\n        return array;\r\n    }\r\n\r\n    //  Remove\r\n    array.splice(currentIndex, 1);\r\n\r\n    //  Add in new location\r\n    if (baseIndex === 0)\r\n    {\r\n        array.unshift(item1);\r\n    }\r\n    else\r\n    {\r\n        array.splice(baseIndex, 0, item1);\r\n    }\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = MoveBelow;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Moves the given array element down one place in the array.\r\n * The array is modified in-place.\r\n *\r\n * @function Phaser.Utils.Array.MoveDown\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The input array.\r\n * @param {*} item - The element to move down the array.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar MoveDown = function (array, item)\r\n{\r\n    var currentIndex = array.indexOf(item);\r\n\r\n    if (currentIndex > 0)\r\n    {\r\n        var item2 = array[currentIndex - 1];\r\n\r\n        var index2 = array.indexOf(item2);\r\n\r\n        array[currentIndex] = item2;\r\n        array[index2] = item;\r\n    }\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = MoveDown;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Moves an element in an array to a new position within the same array.\r\n * The array is modified in-place.\r\n *\r\n * @function Phaser.Utils.Array.MoveTo\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array.\r\n * @param {*} item - The element to move.\r\n * @param {number} index - The new index that the element will be moved to.\r\n *\r\n * @return {*} The element that was moved.\r\n */\r\nvar MoveTo = function (array, item, index)\r\n{\r\n    var currentIndex = array.indexOf(item);\r\n\r\n    if (currentIndex === -1 || index < 0 || index >= array.length)\r\n    {\r\n        throw new Error('Supplied index out of bounds');\r\n    }\r\n\r\n    if (currentIndex !== index)\r\n    {\r\n        //  Remove\r\n        array.splice(currentIndex, 1);\r\n\r\n        //  Add in new location\r\n        array.splice(index, 0, item);\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = MoveTo;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Moves the given array element up one place in the array.\r\n * The array is modified in-place.\r\n *\r\n * @function Phaser.Utils.Array.MoveUp\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The input array.\r\n * @param {*} item - The element to move up the array.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar MoveUp = function (array, item)\r\n{\r\n    var currentIndex = array.indexOf(item);\r\n\r\n    if (currentIndex !== -1 && currentIndex < array.length - 1)\r\n    {\r\n        //  The element one above `item` in the array\r\n        var item2 = array[currentIndex + 1];\r\n        var index2 = array.indexOf(item2);\r\n\r\n        array[currentIndex] = item2;\r\n        array[index2] = item;\r\n    }\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = MoveUp;\r\n","/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Create an array representing the range of numbers (usually integers), between, and inclusive of,\n * the given `start` and `end` arguments. For example:\n *\n * `var array = Phaser.Utils.Array.NumberArray(2, 4); // array = [2, 3, 4]`\n * `var array = Phaser.Utils.Array.NumberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n * `var array = Phaser.Utils.Array.NumberArray(8, 2); // array = [8, 7, 6, 5, 4, 3, 2]`\n *\n * This is equivalent to `Phaser.Utils.Array.NumberArrayStep(start, end, 1)`.\n *\n * You can optionally provide a prefix and / or suffix string. If given the array will contain\n * strings, not integers. For example:\n *\n * `var array = Phaser.Utils.Array.NumberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\n * `var array = Phaser.Utils.Array.NumberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\n *\n * @function Phaser.Utils.Array.NumberArray\n * @since 3.0.0\n *\n * @param {number} start - The minimum value the array starts with.\n * @param {number} end - The maximum value the array contains.\n * @param {string} [prefix] - Optional prefix to place before the number. If provided the array will contain strings, not integers.\n * @param {string} [suffix] - Optional suffix to place after the number. If provided the array will contain strings, not integers.\n *\n * @return {(number[]|string[])} The array of number values, or strings if a prefix or suffix was provided.\n */\nvar NumberArray = function (start, end, prefix, suffix)\n{\n    var result = [];\n\n    var i;\n    var asString = false;\n\n    if (prefix || suffix)\n    {\n        asString = true;\n\n        if (!prefix)\n        {\n            prefix = '';\n        }\n\n        if (!suffix)\n        {\n            suffix = '';\n        }\n    }\n\n    if (end < start)\n    {\n        for (i = start; i >= end; i--)\n        {\n            if (asString)\n            {\n                result.push(prefix + i.toString() + suffix);\n            }\n            else\n            {\n                result.push(i);\n            }\n        }\n    }\n    else\n    {\n        for (i = start; i <= end; i++)\n        {\n            if (asString)\n            {\n                result.push(prefix + i.toString() + suffix);\n            }\n            else\n            {\n                result.push(i);\n            }\n        }\n    }\n\n    return result;\n};\n\nmodule.exports = NumberArray;\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar RoundAwayFromZero = require('../../math/RoundAwayFromZero');\r\n\r\n/**\r\n * Create an array of numbers (positive and/or negative) progressing from `start`\r\n * up to but not including `end` by advancing by `step`.\r\n *\r\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\r\n *\r\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\r\n * for forward compatibility make sure to pass in actual numbers.\r\n * \r\n * @example\r\n * NumberArrayStep(4);\r\n * // => [0, 1, 2, 3]\r\n *\r\n * NumberArrayStep(1, 5);\r\n * // => [1, 2, 3, 4]\r\n *\r\n * NumberArrayStep(0, 20, 5);\r\n * // => [0, 5, 10, 15]\r\n *\r\n * NumberArrayStep(0, -4, -1);\r\n * // => [0, -1, -2, -3]\r\n *\r\n * NumberArrayStep(1, 4, 0);\r\n * // => [1, 1, 1]\r\n *\r\n * NumberArrayStep(0);\r\n * // => []\r\n *\r\n * @function Phaser.Utils.Array.NumberArrayStep\r\n * @since 3.0.0\r\n *\r\n * @param {number} [start=0] - The start of the range.\r\n * @param {number} [end=null] - The end of the range.\r\n * @param {number} [step=1] - The value to increment or decrement by.\r\n *\r\n * @return {number[]} The array of number values.\r\n */\r\nvar NumberArrayStep = function (start, end, step)\r\n{\r\n    if (start === undefined) { start = 0; }\r\n    if (end === undefined) { end = null; }\r\n    if (step === undefined) { step = 1; }\r\n\r\n    if (end === null)\r\n    {\r\n        end = start;\r\n        start = 0;\r\n    }\r\n\r\n    var result = [];\r\n\r\n    var total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\r\n\r\n    for (var i = 0; i < total; i++)\r\n    {\r\n        result.push(start);\r\n        start += step;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nmodule.exports = NumberArrayStep;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction swap (arr, i, j)\r\n{\r\n    var tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction defaultCompare (a, b)\r\n{\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n}\r\n\r\n/**\r\n * A [Floyd-Rivest](https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm) quick selection algorithm.\r\n *\r\n * Rearranges the array items so that all items in the [left, k] range are smaller than all items in [k, right];\r\n * The k-th element will have the (k - left + 1)th smallest value in [left, right].\r\n *\r\n * The array is modified in-place.\r\n *\r\n * Based on code by [Vladimir Agafonkin](https://www.npmjs.com/~mourner)\r\n *\r\n * @function Phaser.Utils.Array.QuickSelect\r\n * @since 3.0.0\r\n *\r\n * @param {array} arr - The array to sort.\r\n * @param {number} k - The k-th element index.\r\n * @param {number} [left=0] - The index of the left part of the range.\r\n * @param {number} [right] - The index of the right part of the range.\r\n * @param {function} [compare] - An optional comparison function. Is passed two elements and should return 0, 1 or -1.\r\n */\r\nvar QuickSelect = function (arr, k, left, right, compare)\r\n{\r\n    if (left === undefined) { left = 0; }\r\n    if (right === undefined) { right = arr.length - 1; }\r\n    if (compare === undefined) { compare = defaultCompare; }\r\n\r\n    while (right > left)\r\n    {\r\n        if (right - left > 600)\r\n        {\r\n            var n = right - left + 1;\r\n            var m = k - left + 1;\r\n            var z = Math.log(n);\r\n            var s = 0.5 * Math.exp(2 * z / 3);\r\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\r\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\r\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\r\n\r\n            QuickSelect(arr, k, newLeft, newRight, compare);\r\n        }\r\n\r\n        var t = arr[k];\r\n        var i = left;\r\n        var j = right;\r\n\r\n        swap(arr, left, k);\r\n\r\n        if (compare(arr[right], t) > 0)\r\n        {\r\n            swap(arr, left, right);\r\n        }\r\n\r\n        while (i < j)\r\n        {\r\n            swap(arr, i, j);\r\n\r\n            i++;\r\n            j--;\r\n\r\n            while (compare(arr[i], t) < 0)\r\n            {\r\n                i++;\r\n            }\r\n\r\n            while (compare(arr[j], t) > 0)\r\n            {\r\n                j--;\r\n            }\r\n        }\r\n\r\n        if (compare(arr[left], t) === 0)\r\n        {\r\n            swap(arr, left, j);\r\n        }\r\n        else\r\n        {\r\n            j++;\r\n            swap(arr, j, right);\r\n        }\r\n\r\n        if (j <= k)\r\n        {\r\n            left = j + 1;\r\n        }\r\n\r\n        if (k <= j)\r\n        {\r\n            right = j - 1;\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = QuickSelect;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetValue = require('../object/GetValue');\r\nvar Shuffle = require('./Shuffle');\r\n\r\nvar BuildChunk = function (a, b, qty)\r\n{\r\n    var out = [];\r\n\r\n    for (var aIndex = 0; aIndex < a.length; aIndex++)\r\n    {\r\n        for (var bIndex = 0; bIndex < b.length; bIndex++)\r\n        {\r\n            for (var i = 0; i < qty; i++)\r\n            {\r\n                out.push({ a: a[aIndex], b: b[bIndex] });\r\n            }\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\n/**\r\n * Creates an array populated with a range of values, based on the given arguments and configuration object.\r\n *\r\n * Range ([a,b,c], [1,2,3]) =\r\n * a1, a2, a3, b1, b2, b3, c1, c2, c3\r\n * \r\n * Range ([a,b], [1,2,3], qty = 3) =\r\n * a1, a1, a1, a2, a2, a2, a3, a3, a3, b1, b1, b1, b2, b2, b2, b3, b3, b3\r\n * \r\n * Range ([a,b,c], [1,2,3], repeat x1) =\r\n * a1, a2, a3, b1, b2, b3, c1, c2, c3, a1, a2, a3, b1, b2, b3, c1, c2, c3\r\n * \r\n * Range ([a,b], [1,2], repeat -1 = endless, max = 14) =\r\n * Maybe if max is set then repeat goes to -1 automatically?\r\n * a1, a2, b1, b2, a1, a2, b1, b2, a1, a2, b1, b2, a1, a2 (capped at 14 elements)\r\n * \r\n * Range ([a], [1,2,3,4,5], random = true) =\r\n * a4, a1, a5, a2, a3\r\n * \r\n * Range ([a, b], [1,2,3], random = true) =\r\n * b3, a2, a1, b1, a3, b2\r\n * \r\n * Range ([a, b, c], [1,2,3], randomB = true) =\r\n * a3, a1, a2, b2, b3, b1, c1, c3, c2\r\n * \r\n * Range ([a], [1,2,3,4,5], yoyo = true) =\r\n * a1, a2, a3, a4, a5, a5, a4, a3, a2, a1\r\n * \r\n * Range ([a, b], [1,2,3], yoyo = true) =\r\n * a1, a2, a3, b1, b2, b3, b3, b2, b1, a3, a2, a1\r\n *\r\n * @function Phaser.Utils.Array.Range\r\n * @since 3.0.0\r\n *\r\n * @param {array} a - The first array of range elements.\r\n * @param {array} b - The second array of range elements.\r\n * @param {object} [options] - A range configuration object. Can contain: repeat, random, randomB, yoyo, max, qty.\r\n *\r\n * @return {array} An array of arranged elements.\r\n */\r\nvar Range = function (a, b, options)\r\n{\r\n    var max = GetValue(options, 'max', 0);\r\n    var qty = GetValue(options, 'qty', 1);\r\n    var random = GetValue(options, 'random', false);\r\n    var randomB = GetValue(options, 'randomB', false);\r\n    var repeat = GetValue(options, 'repeat', 0);\r\n    var yoyo = GetValue(options, 'yoyo', false);\r\n\r\n    var out = [];\r\n\r\n    if (randomB)\r\n    {\r\n        Shuffle(b);\r\n    }\r\n\r\n    //  Endless repeat, so limit by max\r\n    if (repeat === -1)\r\n    {\r\n        if (max === 0)\r\n        {\r\n            repeat = 0;\r\n        }\r\n        else\r\n        {\r\n            //  Work out how many repeats we need\r\n            var total = (a.length * b.length) * qty;\r\n\r\n            if (yoyo)\r\n            {\r\n                total *= 2;\r\n            }\r\n\r\n            repeat = Math.ceil(max / total);\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i <= repeat; i++)\r\n    {\r\n        var chunk = BuildChunk(a, b, qty);\r\n\r\n        if (random)\r\n        {\r\n            Shuffle(chunk);\r\n        }\r\n\r\n        out = out.concat(chunk);\r\n\r\n        if (yoyo)\r\n        {\r\n            chunk.reverse();\r\n\r\n            out = out.concat(chunk);\r\n        }\r\n    }\r\n\r\n    if (max)\r\n    {\r\n        out.splice(max);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Range;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SpliceOne = require('./SpliceOne');\r\n\r\n/**\r\n * Removes the item from the given position in the array.\r\n * \r\n * The array is modified in-place.\r\n * \r\n * You can optionally specify a callback to be invoked for the item if it is successfully removed from the array.\r\n *\r\n * @function Phaser.Utils.Array.RemoveAt\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be modified.\r\n * @param {number} index - The array index to remove the item from. The index must be in bounds or it will throw an error.\r\n * @param {function} [callback] - A callback to be invoked for the item removed from the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {*} The item that was removed.\r\n */\r\nvar RemoveAt = function (array, index, callback, context)\r\n{\r\n    if (context === undefined) { context = array; }\r\n\r\n    if (index < 0 || index > array.length - 1)\r\n    {\r\n        throw new Error('Index out of bounds');\r\n    }\r\n\r\n    var item = SpliceOne(array, index);\r\n\r\n    if (callback)\r\n    {\r\n        callback.call(context, item);\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = RemoveAt;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Removes the item within the given range in the array.\r\n * \r\n * The array is modified in-place.\r\n * \r\n * You can optionally specify a callback to be invoked for the item/s successfully removed from the array.\r\n *\r\n * @function Phaser.Utils.Array.RemoveBetween\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be modified.\r\n * @param {number} startIndex - The start index to remove from.\r\n * @param {number} endIndex - The end index to remove to.\r\n * @param {function} [callback] - A callback to be invoked for the item removed from the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {Array.<*>} An array of items that were removed.\r\n */\r\nvar RemoveBetween = function (array, startIndex, endIndex, callback, context)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n    if (context === undefined) { context = array; }\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        var size = endIndex - startIndex;\r\n\r\n        var removed = array.splice(startIndex, size);\r\n\r\n        if (callback)\r\n        {\r\n            for (var i = 0; i < removed.length; i++)\r\n            {\r\n                var entry = removed[i];\r\n\r\n                callback.call(context, entry);\r\n            }\r\n        }\r\n\r\n        return removed;\r\n    }\r\n    else\r\n    {\r\n        return [];\r\n    }\r\n};\r\n\r\nmodule.exports = RemoveBetween;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SpliceOne = require('./SpliceOne');\r\n\r\n/**\r\n * Removes a random object from the given array and returns it.\r\n * Will return null if there are no array items that fall within the specified range or if there is no item for the randomly chosen index.\r\n *\r\n * @function Phaser.Utils.Array.RemoveRandomElement\r\n * @since 3.0.0\r\n *\r\n * @param {array} array - The array to removed a random element from.\r\n * @param {number} [start=0] - The array index to start the search from.\r\n * @param {number} [length=array.length] - Optional restriction on the number of elements to randomly select from.\r\n *\r\n * @return {object} The random element that was removed, or `null` if there were no array elements that fell within the given range.\r\n */\r\nvar RemoveRandomElement = function (array, start, length)\r\n{\r\n    if (start === undefined) { start = 0; }\r\n    if (length === undefined) { length = array.length; }\r\n\r\n    var randomIndex = start + Math.floor(Math.random() * length);\r\n\r\n    return SpliceOne(array, randomIndex);\r\n};\r\n\r\nmodule.exports = RemoveRandomElement;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Replaces an element of the array with the new element.\r\n * The new element cannot already be a member of the array.\r\n * The array is modified in-place.\r\n *\r\n * @function Phaser.Utils.Array.Replace\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search within.\r\n * @param {*} oldChild - The element in the array that will be replaced.\r\n * @param {*} newChild - The element to be inserted into the array at the position of `oldChild`.\r\n *\r\n * @return {boolean} Returns true if the oldChild was successfully replaced, otherwise returns false.\r\n */\r\nvar Replace = function (array, oldChild, newChild)\r\n{\r\n    var index1 = array.indexOf(oldChild);\r\n    var index2 = array.indexOf(newChild);\r\n\r\n    if (index1 !== -1 && index2 === -1)\r\n    {\r\n        array[index1] = newChild;\r\n\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n};\r\n\r\nmodule.exports = Replace;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Tests if the start and end indexes are a safe range for the given array.\r\n * \r\n * @function Phaser.Utils.Array.SafeRange\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to check.\r\n * @param {number} startIndex - The start index.\r\n * @param {number} endIndex - The end index.\r\n * @param {boolean} [throwError=true] - Throw an error if the range is out of bounds.\r\n *\r\n * @return {boolean} True if the range is safe, otherwise false.\r\n */\r\nvar SafeRange = function (array, startIndex, endIndex, throwError)\r\n{\r\n    var len = array.length;\r\n\r\n    if (startIndex < 0 ||\r\n        startIndex > len ||\r\n        startIndex >= endIndex ||\r\n        endIndex > len ||\r\n        startIndex + endIndex > len)\r\n    {\r\n        if (throwError)\r\n        {\r\n            throw new Error('Range Error: Values outside acceptable range');\r\n        }\r\n\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        return true;\r\n    }\r\n};\r\n\r\nmodule.exports = SafeRange;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Moves the given element to the bottom of the array.\r\n * The array is modified in-place.\r\n *\r\n * @function Phaser.Utils.Array.SendToBack\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array.\r\n * @param {*} item - The element to move.\r\n *\r\n * @return {*} The element that was moved.\r\n */\r\nvar SendToBack = function (array, item)\r\n{\r\n    var currentIndex = array.indexOf(item);\r\n\r\n    if (currentIndex !== -1 && currentIndex > 0)\r\n    {\r\n        array.splice(currentIndex, 1);\r\n        array.unshift(item);\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = SendToBack;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Scans the array for elements with the given property. If found, the property is set to the `value`.\r\n *\r\n * For example: `SetAll('visible', true)` would set all elements that have a `visible` property to `false`.\r\n *\r\n * Optionally you can specify a start and end index. For example if the array had 100 elements,\r\n * and you set `startIndex` to 0 and `endIndex` to 50, it would update only the first 50 elements.\r\n *\r\n * @function Phaser.Utils.Array.SetAll\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} property - The property to test for on each array element.\r\n * @param {*} value - The value to set the property to.\r\n * @param {number} [startIndex] - An optional start index to search from.\r\n * @param {number} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar SetAll = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var entry = array[i];\r\n\r\n            if (entry.hasOwnProperty(property))\r\n            {\r\n                entry[property] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = SetAll;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Angry Bytes (and contributors)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The comparator function.\r\n *\r\n * @ignore\r\n *\r\n * @param {*} a - The first item to test.\r\n * @param {*} b - The second itemt to test.\r\n *\r\n * @return {boolean} True if they localCompare, otherwise false.\r\n */\r\nfunction Compare (a, b)\r\n{\r\n    return String(a).localeCompare(b);\r\n}\r\n\r\n/**\r\n * Process the array contents.\r\n *\r\n * @ignore\r\n *\r\n * @param {array} array - The array to process.\r\n * @param {function} compare - The comparison function.\r\n *\r\n * @return {array} - The processed array.\r\n */\r\nfunction Process (array, compare)\r\n{\r\n    // Short-circuit when there's nothing to sort.\r\n    var len = array.length;\r\n\r\n    if (len <= 1)\r\n    {\r\n        return array;\r\n    }\r\n\r\n    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\r\n    // Chunks are the size of the left or right hand in merge sort.\r\n    // Stop when the left-hand covers all of the array.\r\n    var buffer = new Array(len);\r\n\r\n    for (var chk = 1; chk < len; chk *= 2)\r\n    {\r\n        RunPass(array, compare, chk, buffer);\r\n\r\n        var tmp = array;\r\n\r\n        array = buffer;\r\n\r\n        buffer = tmp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\n/**\r\n * Run a single pass with the given chunk size.\r\n *\r\n * @ignore\r\n *\r\n * @param {array} arr - The array to run the pass on.\r\n * @param {function} comp - The comparison function.\r\n * @param {number} chk - The number of iterations.\r\n * @param {array} result - The array to store the result in.\r\n */\r\nfunction RunPass (arr, comp, chk, result)\r\n{\r\n    var len = arr.length;\r\n    var i = 0;\r\n\r\n    // Step size / double chunk size.\r\n    var dbl = chk * 2;\r\n\r\n    // Bounds of the left and right chunks.\r\n    var l, r, e;\r\n\r\n    // Iterators over the left and right chunk.\r\n    var li, ri;\r\n\r\n    // Iterate over pairs of chunks.\r\n    for (l = 0; l < len; l += dbl)\r\n    {\r\n        r = l + chk;\r\n        e = r + chk;\r\n\r\n        if (r > len)\r\n        {\r\n            r = len;\r\n        }\r\n\r\n        if (e > len)\r\n        {\r\n            e = len;\r\n        }\r\n\r\n        // Iterate both chunks in parallel.\r\n        li = l;\r\n        ri = r;\r\n\r\n        while (true)\r\n        {\r\n            // Compare the chunks.\r\n            if (li < r && ri < e)\r\n            {\r\n                // This works for a regular `sort()` compatible comparator,\r\n                // but also for a simple comparator like: `a > b`\r\n                if (comp(arr[li], arr[ri]) <= 0)\r\n                {\r\n                    result[i++] = arr[li++];\r\n                }\r\n                else\r\n                {\r\n                    result[i++] = arr[ri++];\r\n                }\r\n            }\r\n            else if (li < r)\r\n            {\r\n                // Nothing to compare, just flush what's left.\r\n                result[i++] = arr[li++];\r\n            }\r\n            else if (ri < e)\r\n            {\r\n                result[i++] = arr[ri++];\r\n            }\r\n            else\r\n            {\r\n                // Both iterators are at the chunk ends.\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * An in-place stable array sort, because `Array#sort()` is not guaranteed stable.\r\n *\r\n * This is an implementation of merge sort, without recursion.\r\n *\r\n * Function based on the Two-Screen/stable sort 0.1.8 from https://github.com/Two-Screen/stable\r\n *\r\n * @function Phaser.Utils.Array.StableSort\r\n * @since 3.0.0\r\n *\r\n * @param {array} array - The input array to be sorted.\r\n * @param {function} [compare] - The comparison function.\r\n *\r\n * @return {array} The sorted result.\r\n */\r\nvar StableSort = function (array, compare)\r\n{\r\n    if (compare === undefined) { compare = Compare; }\r\n\r\n    var result = Process(array, compare);\r\n\r\n    // This simply copies back if the result isn't in the original array, which happens on an odd number of passes.\r\n    if (result !== array)\r\n    {\r\n        RunPass(result, null, array.length, array);\r\n    }\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = StableSort;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Swaps the position of two elements in the given array.\r\n * The elements must exist in the same array.\r\n * The array is modified in-place.\r\n *\r\n * @function Phaser.Utils.Array.Swap\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The input array.\r\n * @param {*} item1 - The first element to swap.\r\n * @param {*} item2 - The second element to swap.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar Swap = function (array, item1, item2)\r\n{\r\n    if (item1 === item2)\r\n    {\r\n        return array;\r\n    }\r\n\r\n    var index1 = array.indexOf(item1);\r\n    var index2 = array.indexOf(item2);\r\n\r\n    if (index1 < 0 || index2 < 0)\r\n    {\r\n        throw new Error('Supplied items must be elements of the same array');\r\n    }\r\n\r\n    array[index1] = item2;\r\n    array[index2] = item1;\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = Swap;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Utils.Array\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    Matrix: require('./matrix'),\r\n\r\n    Add: require('./Add'),\r\n    AddAt: require('./AddAt'),\r\n    BringToTop: require('./BringToTop'),\r\n    CountAllMatching: require('./CountAllMatching'),\r\n    Each: require('./Each'),\r\n    EachInRange: require('./EachInRange'),\r\n    FindClosestInSorted: require('./FindClosestInSorted'),\r\n    GetAll: require('./GetAll'),\r\n    GetFirst: require('./GetFirst'),\r\n    GetRandom: require('./GetRandom'),\r\n    MoveDown: require('./MoveDown'),\r\n    MoveTo: require('./MoveTo'),\r\n    MoveUp: require('./MoveUp'),\r\n    MoveAbove: require('./MoveAbove'),\r\n    MoveBelow: require('./MoveBelow'),\r\n    NumberArray: require('./NumberArray'),\r\n    NumberArrayStep: require('./NumberArrayStep'),\r\n    QuickSelect: require('./QuickSelect'),\r\n    Range: require('./Range'),\r\n    Remove: require('./Remove'),\r\n    RemoveAt: require('./RemoveAt'),\r\n    RemoveBetween: require('./RemoveBetween'),\r\n    RemoveRandomElement: require('./RemoveRandomElement'),\r\n    Replace: require('./Replace'),\r\n    RotateLeft: require('./RotateLeft'),\r\n    RotateRight: require('./RotateRight'),\r\n    SafeRange: require('./SafeRange'),\r\n    SendToBack: require('./SendToBack'),\r\n    SetAll: require('./SetAll'),\r\n    Shuffle: require('./Shuffle'),\r\n    SortByDigits: require('./SortByDigits'),\r\n    SpliceOne: require('./SpliceOne'),\r\n    StableSort: require('./StableSort'),\r\n    Swap: require('./Swap')\r\n\r\n};\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if an array can be used as a matrix.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.CheckMatrix\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix]\r\n *\r\n * @param {T[][]} [matrix] - The array to check.\r\n *\r\n * @return {boolean} `true` if the given `matrix` array is a valid matrix.\r\n */\r\nvar CheckMatrix = function (matrix)\r\n{\r\n    if (!Array.isArray(matrix) || matrix.length < 2 || !Array.isArray(matrix[0]))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    //  How long is the first row?\r\n    var size = matrix[0].length;\r\n\r\n    //  Validate the rest of the rows are the same length\r\n    for (var i = 1; i < matrix.length; i++)\r\n    {\r\n        if (matrix[i].length !== size)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nmodule.exports = CheckMatrix;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Pad = require('../../string/Pad');\r\nvar CheckMatrix = require('./CheckMatrix');\r\n\r\n/**\r\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.MatrixToString\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix]\r\n *\r\n * @param {T[][]} [matrix] - A 2-dimensional array.\r\n *\r\n * @return {string} A string representing the matrix.\r\n */\r\nvar MatrixToString = function (matrix)\r\n{\r\n    var str = '';\r\n\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return str;\r\n    }\r\n\r\n    for (var r = 0; r < matrix.length; r++)\r\n    {\r\n        for (var c = 0; c < matrix[r].length; c++)\r\n        {\r\n            var cell = matrix[r][c].toString();\r\n\r\n            if (cell !== 'undefined')\r\n            {\r\n                str += Pad(cell, 2);\r\n            }\r\n            else\r\n            {\r\n                str += '?';\r\n            }\r\n\r\n            if (c < matrix[r].length - 1)\r\n            {\r\n                str += ' |';\r\n            }\r\n        }\r\n\r\n        if (r < matrix.length - 1)\r\n        {\r\n            str += '\\n';\r\n\r\n            for (var i = 0; i < matrix[r].length; i++)\r\n            {\r\n                str += '---';\r\n\r\n                if (i < matrix[r].length - 1)\r\n                {\r\n                    str += '+';\r\n                }\r\n            }\r\n\r\n            str += '\\n';\r\n        }\r\n\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\nmodule.exports = MatrixToString;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Reverses the columns in the given Array Matrix.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.ReverseColumns\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array matrix to reverse the columns for.\r\n *\r\n * @return {T[][]} The column reversed matrix.\r\n */\r\nvar ReverseColumns = function (matrix)\r\n{\r\n    return matrix.reverse();\r\n};\r\n\r\nmodule.exports = ReverseColumns;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Reverses the rows in the given Array Matrix.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.ReverseRows\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array matrix to reverse the rows for.\r\n *\r\n * @return {T[][]} The column reversed matrix.\r\n */\r\nvar ReverseRows = function (matrix)\r\n{\r\n    for (var i = 0; i < matrix.length; i++)\r\n    {\r\n        matrix[i].reverse();\r\n    }\r\n\r\n    return matrix;\r\n};\r\n\r\nmodule.exports = ReverseRows;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar RotateMatrix = require('./RotateMatrix');\r\n\r\n/**\r\n * Rotates the array matrix 180 degrees.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.Rotate180\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nvar Rotate180 = function (matrix)\r\n{\r\n    return RotateMatrix(matrix, 180);\r\n};\r\n\r\nmodule.exports = Rotate180;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar RotateMatrix = require('./RotateMatrix');\r\n\r\n/**\r\n * Rotates the array matrix to the left (or 90 degrees)\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateLeft\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nvar RotateLeft = function (matrix)\r\n{\r\n    return RotateMatrix(matrix, 90);\r\n};\r\n\r\nmodule.exports = RotateLeft;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CheckMatrix = require('./CheckMatrix');\r\nvar TransposeMatrix = require('./TransposeMatrix');\r\n\r\n/**\r\n * Rotates the array matrix based on the given rotation value.\r\n *\r\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\r\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\r\n *\r\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateMatrix\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n * @param {(number|string)} [direction=90] - The amount to rotate the matrix by.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nvar RotateMatrix = function (matrix, direction)\r\n{\r\n    if (direction === undefined) { direction = 90; }\r\n\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return null;\r\n    }\r\n\r\n    if (typeof direction !== 'string')\r\n    {\r\n        direction = ((direction % 360) + 360) % 360;\r\n    }\r\n\r\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\r\n    {\r\n        matrix = TransposeMatrix(matrix);\r\n        matrix.reverse();\r\n    }\r\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\r\n    {\r\n        matrix.reverse();\r\n        matrix = TransposeMatrix(matrix);\r\n    }\r\n    else if (Math.abs(direction) === 180 || direction === 'rotate180')\r\n    {\r\n        for (var i = 0; i < matrix.length; i++)\r\n        {\r\n            matrix[i].reverse();\r\n        }\r\n\r\n        matrix.reverse();\r\n    }\r\n\r\n    return matrix;\r\n};\r\n\r\nmodule.exports = RotateMatrix;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar RotateMatrix = require('./RotateMatrix');\r\n\r\n/**\r\n * Rotates the array matrix to the left (or -90 degrees)\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateRight\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nvar RotateRight = function (matrix)\r\n{\r\n    return RotateMatrix(matrix, -90);\r\n};\r\n\r\nmodule.exports = RotateRight;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar RotateLeft = require('../RotateLeft');\r\nvar RotateRight = require('../RotateRight');\r\n\r\n/**\r\n * Translates the given Array Matrix by shifting each column and row the\r\n * amount specified.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.Translate\r\n * @since 3.50.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array matrix to translate.\r\n * @param {number} [x=0] - The amount to horizontally translate the matrix by.\r\n * @param {number} [y=0] - The amount to vertically translate the matrix by.\r\n *\r\n * @return {T[][]} The translated matrix.\r\n */\r\nvar TranslateMatrix = function (matrix, x, y)\r\n{\r\n    if (x === undefined) { x = 0; }\r\n    if (y === undefined) { y = 0; }\r\n\r\n    //  Vertical translation\r\n\r\n    if (y !== 0)\r\n    {\r\n        if (y < 0)\r\n        {\r\n            //  Shift Up\r\n            RotateLeft(matrix, Math.abs(y));\r\n        }\r\n        else\r\n        {\r\n            //  Shift Down\r\n            RotateRight(matrix, y);\r\n        }\r\n    }\r\n\r\n    //  Horizontal translation\r\n\r\n    if (x !== 0)\r\n    {\r\n        for (var i = 0; i < matrix.length; i++)\r\n        {\r\n            var row = matrix[i];\r\n\r\n            if (x < 0)\r\n            {\r\n                RotateLeft(row, Math.abs(x));\r\n            }\r\n            else\r\n            {\r\n                RotateRight(row, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    return matrix;\r\n};\r\n\r\nmodule.exports = TranslateMatrix;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Transposes the elements of the given matrix (array of arrays).\r\n *\r\n * The transpose of a matrix is a new matrix whose rows are the columns of the original.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows)\r\n * have the same length. There must be at least two rows. This is an example matrix:\r\n *\r\n * ```\r\n * [\r\n *    [ 1, 1, 1, 1, 1, 1 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 2, 0, 1, 2, 0, 4 ],\r\n *    [ 2, 0, 3, 4, 0, 4 ],\r\n *    [ 2, 0, 0, 0, 0, 4 ],\r\n *    [ 3, 3, 3, 3, 3, 3 ]\r\n * ]\r\n * ```\r\n *\r\n * @function Phaser.Utils.Array.Matrix.TransposeMatrix\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [array,$return]\r\n *\r\n * @param {T[][]} [array] - The array matrix to transpose.\r\n *\r\n * @return {T[][]} A new array matrix which is a transposed version of the given array.\r\n */\r\nvar TransposeMatrix = function (array)\r\n{\r\n    var sourceRowCount = array.length;\r\n    var sourceColCount = array[0].length;\r\n\r\n    var result = new Array(sourceColCount);\r\n\r\n    for (var i = 0; i < sourceColCount; i++)\r\n    {\r\n        result[i] = new Array(sourceRowCount);\r\n\r\n        for (var j = sourceRowCount - 1; j > -1; j--)\r\n        {\r\n            result[i][j] = array[j][i];\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nmodule.exports = TransposeMatrix;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Utils.Array.Matrix\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    CheckMatrix: require('./CheckMatrix'),\r\n    MatrixToString: require('./MatrixToString'),\r\n    ReverseColumns: require('./ReverseColumns'),\r\n    ReverseRows: require('./ReverseRows'),\r\n    Rotate180: require('./Rotate180'),\r\n    RotateLeft: require('./RotateLeft'),\r\n    RotateMatrix: require('./RotateMatrix'),\r\n    RotateRight: require('./RotateRight'),\r\n    Translate: require('./TranslateMatrix'),\r\n    TransposeMatrix: require('./TransposeMatrix')\r\n\r\n};\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes the given string and pads it out, to the length required, using the character\r\n * specified. For example if you need a string to be 6 characters long, you can call:\r\n *\r\n * `pad('bob', 6, '-', 2)`\r\n *\r\n * This would return: `bob---` as it has padded it out to 6 characters, using the `-` on the right.\r\n *\r\n * You can also use it to pad numbers (they are always returned as strings):\r\n * \r\n * `pad(512, 6, '0', 1)`\r\n *\r\n * Would return: `000512` with the string padded to the left.\r\n *\r\n * If you don't specify a direction it'll pad to both sides:\r\n * \r\n * `pad('c64', 7, '*')`\r\n *\r\n * Would return: `**c64**`\r\n *\r\n * @function Phaser.Utils.String.Pad\r\n * @since 3.0.0\r\n *\r\n * @param {string|number|object} str - The target string. `toString()` will be called on the string, which means you can also pass in common data types like numbers.\r\n * @param {number} [len=0] - The number of characters to be added.\r\n * @param {string} [pad=\" \"] - The string to pad it out with (defaults to a space).\r\n * @param {number} [dir=3] - The direction dir = 1 (left), 2 (right), 3 (both).\r\n * \r\n * @return {string} The padded string.\r\n */\r\nvar Pad = function (str, len, pad, dir)\r\n{\r\n    if (len === undefined) { len = 0; }\r\n    if (pad === undefined) { pad = ' '; }\r\n    if (dir === undefined) { dir = 3; }\r\n\r\n    str = str.toString();\r\n\r\n    var padlen = 0;\r\n\r\n    if (len + 1 >= str.length)\r\n    {\r\n        switch (dir)\r\n        {\r\n            case 1:\r\n                str = new Array(len + 1 - str.length).join(pad) + str;\r\n                break;\r\n\r\n            case 3:\r\n                var right = Math.ceil((padlen = len - str.length) / 2);\r\n                var left = padlen - right;\r\n                str = new Array(left + 1).join(pad) + str + new Array(right + 1).join(pad);\r\n                break;\r\n\r\n            default:\r\n                str = str + new Array(len + 1 - str.length).join(pad);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\nmodule.exports = Pad;\r\n"],"names":["module","exports","array","item","limit","callback","context","undefined","remaining","length","Array","isArray","indexOf","push","call","itemLength","splice","i","entry","index","pop","currentIndex","SafeRange","property","value","startIndex","endIndex","total","args","arguments","apply","output","child","hasOwnProperty","randomIndex","Math","floor","random","item1","item2","baseIndex","Error","unshift","index2","start","end","prefix","suffix","result","asString","toString","RoundAwayFromZero","step","max","swap","arr","j","tmp","defaultCompare","a","b","QuickSelect","k","left","right","compare","n","m","z","log","s","exp","sd","sqrt","newLeft","newRight","min","t","GetValue","Shuffle","BuildChunk","qty","out","aIndex","bIndex","options","randomB","repeat","yoyo","ceil","chunk","concat","reverse","SpliceOne","size","removed","oldChild","newChild","index1","throwError","len","Compare","String","localeCompare","RunPass","comp","chk","l","r","e","li","ri","dbl","buffer","Process","Matrix","Add","AddAt","BringToTop","CountAllMatching","Each","EachInRange","FindClosestInSorted","GetAll","GetFirst","GetRandom","MoveDown","MoveTo","MoveUp","MoveAbove","MoveBelow","NumberArray","NumberArrayStep","Range","Remove","RemoveAt","RemoveBetween","RemoveRandomElement","Replace","RotateLeft","RotateRight","SendToBack","SetAll","SortByDigits","StableSort","Swap","matrix","Pad","CheckMatrix","str","c","cell","RotateMatrix","TransposeMatrix","direction","abs","x","y","row","sourceRowCount","sourceColCount","MatrixToString","ReverseColumns","ReverseRows","Rotate180","Translate","pad","dir","padlen","join"],"sourceRoot":""}