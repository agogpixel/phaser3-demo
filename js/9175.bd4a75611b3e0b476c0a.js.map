{"version":3,"file":"js/9175.bd4a75611b3e0b476c0a.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/textures/Frame.js"],"sourcesContent":["/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar Class = require('../utils/Class');\nvar Clamp = require('../math/Clamp');\nvar Extend = require('../utils/object/Extend');\n\n/**\n * @classdesc\n * A Frame is a section of a Texture.\n *\n * @class Frame\n * @memberof Phaser.Textures\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Textures.Texture} texture - The Texture this Frame is a part of.\n * @param {(number|string)} name - The name of this Frame. The name is unique within the Texture.\n * @param {number} sourceIndex - The index of the TextureSource that this Frame is a part of.\n * @param {number} x - The x coordinate of the top-left of this Frame.\n * @param {number} y - The y coordinate of the top-left of this Frame.\n * @param {number} width - The width of this Frame.\n * @param {number} height - The height of this Frame.\n */\nvar Frame = new Class({\n\n    initialize:\n\n    function Frame (texture, name, sourceIndex, x, y, width, height)\n    {\n        /**\n         * The Texture this Frame is a part of.\n         *\n         * @name Phaser.Textures.Frame#texture\n         * @type {Phaser.Textures.Texture}\n         * @since 3.0.0\n         */\n        this.texture = texture;\n\n        /**\n         * The name of this Frame.\n         * The name is unique within the Texture.\n         *\n         * @name Phaser.Textures.Frame#name\n         * @type {string}\n         * @since 3.0.0\n         */\n        this.name = name;\n\n        /**\n         * The TextureSource this Frame is part of.\n         *\n         * @name Phaser.Textures.Frame#source\n         * @type {Phaser.Textures.TextureSource}\n         * @since 3.0.0\n         */\n        this.source = texture.source[sourceIndex];\n\n        /**\n         * The index of the TextureSource in the Texture sources array.\n         *\n         * @name Phaser.Textures.Frame#sourceIndex\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.sourceIndex = sourceIndex;\n\n        /**\n         * A reference to the Texture Source WebGL Texture that this Frame is using.\n         *\n         * @name Phaser.Textures.Frame#glTexture\n         * @type {?WebGLTexture}\n         * @default null\n         * @since 3.11.0\n         */\n        this.glTexture = this.source.glTexture;\n\n        /**\n         * X position within the source image to cut from.\n         *\n         * @name Phaser.Textures.Frame#cutX\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.cutX;\n\n        /**\n         * Y position within the source image to cut from.\n         *\n         * @name Phaser.Textures.Frame#cutY\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.cutY;\n\n        /**\n         * The width of the area in the source image to cut.\n         *\n         * @name Phaser.Textures.Frame#cutWidth\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.cutWidth;\n\n        /**\n         * The height of the area in the source image to cut.\n         *\n         * @name Phaser.Textures.Frame#cutHeight\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.cutHeight;\n\n        /**\n         * The X rendering offset of this Frame, taking trim into account.\n         *\n         * @name Phaser.Textures.Frame#x\n         * @type {number}\n         * @default 0\n         * @since 3.0.0\n         */\n        this.x = 0;\n\n        /**\n         * The Y rendering offset of this Frame, taking trim into account.\n         *\n         * @name Phaser.Textures.Frame#y\n         * @type {number}\n         * @default 0\n         * @since 3.0.0\n         */\n        this.y = 0;\n\n        /**\n         * The rendering width of this Frame, taking trim into account.\n         *\n         * @name Phaser.Textures.Frame#width\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.width;\n\n        /**\n         * The rendering height of this Frame, taking trim into account.\n         *\n         * @name Phaser.Textures.Frame#height\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.height;\n\n        /**\n         * Half the width, floored.\n         * Precalculated for the renderer.\n         *\n         * @name Phaser.Textures.Frame#halfWidth\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.halfWidth;\n\n        /**\n         * Half the height, floored.\n         * Precalculated for the renderer.\n         *\n         * @name Phaser.Textures.Frame#halfHeight\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.halfHeight;\n\n        /**\n         * The x center of this frame, floored.\n         *\n         * @name Phaser.Textures.Frame#centerX\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.centerX;\n\n        /**\n         * The y center of this frame, floored.\n         *\n         * @name Phaser.Textures.Frame#centerY\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.centerY;\n\n        /**\n         * The horizontal pivot point of this Frame.\n         *\n         * @name Phaser.Textures.Frame#pivotX\n         * @type {number}\n         * @default 0\n         * @since 3.0.0\n         */\n        this.pivotX = 0;\n\n        /**\n         * The vertical pivot point of this Frame.\n         *\n         * @name Phaser.Textures.Frame#pivotY\n         * @type {number}\n         * @default 0\n         * @since 3.0.0\n         */\n        this.pivotY = 0;\n\n        /**\n         * Does this Frame have a custom pivot point?\n         *\n         * @name Phaser.Textures.Frame#customPivot\n         * @type {boolean}\n         * @default false\n         * @since 3.0.0\n         */\n        this.customPivot = false;\n\n        /**\n         * **CURRENTLY UNSUPPORTED**\n         *\n         * Is this frame is rotated or not in the Texture?\n         * Rotation allows you to use rotated frames in texture atlas packing.\n         * It has nothing to do with Sprite rotation.\n         *\n         * @name Phaser.Textures.Frame#rotated\n         * @type {boolean}\n         * @default false\n         * @since 3.0.0\n         */\n        this.rotated = false;\n\n        /**\n         * Over-rides the Renderer setting.\n         * -1 = use Renderer Setting\n         * 0 = No rounding\n         * 1 = Round\n         *\n         * @name Phaser.Textures.Frame#autoRound\n         * @type {number}\n         * @default -1\n         * @since 3.0.0\n         */\n        this.autoRound = -1;\n\n        /**\n         * Any Frame specific custom data can be stored here.\n         *\n         * @name Phaser.Textures.Frame#customData\n         * @type {object}\n         * @since 3.0.0\n         */\n        this.customData = {};\n\n        /**\n         * WebGL UV u0 value.\n         *\n         * @name Phaser.Textures.Frame#u0\n         * @type {number}\n         * @default 0\n         * @since 3.11.0\n         */\n        this.u0 = 0;\n\n        /**\n         * WebGL UV v0 value.\n         *\n         * @name Phaser.Textures.Frame#v0\n         * @type {number}\n         * @default 0\n         * @since 3.11.0\n         */\n        this.v0 = 0;\n\n        /**\n         * WebGL UV u1 value.\n         *\n         * @name Phaser.Textures.Frame#u1\n         * @type {number}\n         * @default 0\n         * @since 3.11.0\n         */\n        this.u1 = 0;\n\n        /**\n         * WebGL UV v1 value.\n         *\n         * @name Phaser.Textures.Frame#v1\n         * @type {number}\n         * @default 0\n         * @since 3.11.0\n         */\n        this.v1 = 0;\n\n        /**\n         * The un-modified source frame, trim and UV data.\n         *\n         * @name Phaser.Textures.Frame#data\n         * @type {object}\n         * @private\n         * @since 3.0.0\n         */\n        this.data = {\n            cut: {\n                x: 0,\n                y: 0,\n                w: 0,\n                h: 0,\n                r: 0,\n                b: 0\n            },\n            trim: false,\n            sourceSize: {\n                w: 0,\n                h: 0\n            },\n            spriteSourceSize: {\n                x: 0,\n                y: 0,\n                w: 0,\n                h: 0,\n                r: 0,\n                b: 0\n            },\n            radius: 0,\n            drawImage: {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0\n            }\n        };\n\n        this.setSize(width, height, x, y);\n    },\n\n    /**\n     * Sets the width, height, x and y of this Frame.\n     *\n     * This is called automatically by the constructor\n     * and should rarely be changed on-the-fly.\n     *\n     * @method Phaser.Textures.Frame#setSize\n     * @since 3.7.0\n     *\n     * @param {number} width - The width of the frame before being trimmed.\n     * @param {number} height - The height of the frame before being trimmed.\n     * @param {number} [x=0] - The x coordinate of the top-left of this Frame.\n     * @param {number} [y=0] - The y coordinate of the top-left of this Frame.\n     *\n     * @return {Phaser.Textures.Frame} This Frame object.\n     */\n    setSize: function (width, height, x, y)\n    {\n        if (x === undefined) { x = 0; }\n        if (y === undefined) { y = 0; }\n\n        this.cutX = x;\n        this.cutY = y;\n        this.cutWidth = width;\n        this.cutHeight = height;\n\n        this.width = width;\n        this.height = height;\n\n        this.halfWidth = Math.floor(width * 0.5);\n        this.halfHeight = Math.floor(height * 0.5);\n\n        this.centerX = Math.floor(width / 2);\n        this.centerY = Math.floor(height / 2);\n\n        var data = this.data;\n        var cut = data.cut;\n\n        cut.x = x;\n        cut.y = y;\n        cut.w = width;\n        cut.h = height;\n        cut.r = x + width;\n        cut.b = y + height;\n\n        data.sourceSize.w = width;\n        data.sourceSize.h = height;\n\n        data.spriteSourceSize.w = width;\n        data.spriteSourceSize.h = height;\n\n        data.radius = 0.5 * Math.sqrt(width * width + height * height);\n\n        var drawImage = data.drawImage;\n\n        drawImage.x = x;\n        drawImage.y = y;\n        drawImage.width = width;\n        drawImage.height = height;\n\n        return this.updateUVs();\n    },\n\n    /**\n     * If the frame was trimmed when added to the Texture Atlas, this records the trim and source data.\n     *\n     * @method Phaser.Textures.Frame#setTrim\n     * @since 3.0.0\n     *\n     * @param {number} actualWidth - The width of the frame before being trimmed.\n     * @param {number} actualHeight - The height of the frame before being trimmed.\n     * @param {number} destX - The destination X position of the trimmed frame for display.\n     * @param {number} destY - The destination Y position of the trimmed frame for display.\n     * @param {number} destWidth - The destination width of the trimmed frame for display.\n     * @param {number} destHeight - The destination height of the trimmed frame for display.\n     *\n     * @return {Phaser.Textures.Frame} This Frame object.\n     */\n    setTrim: function (actualWidth, actualHeight, destX, destY, destWidth, destHeight)\n    {\n        var data = this.data;\n        var ss = data.spriteSourceSize;\n\n        //  Store actual values\n\n        data.trim = true;\n\n        data.sourceSize.w = actualWidth;\n        data.sourceSize.h = actualHeight;\n\n        ss.x = destX;\n        ss.y = destY;\n        ss.w = destWidth;\n        ss.h = destHeight;\n        ss.r = destX + destWidth;\n        ss.b = destY + destHeight;\n\n        //  Adjust properties\n        this.x = destX;\n        this.y = destY;\n\n        this.width = destWidth;\n        this.height = destHeight;\n\n        this.halfWidth = destWidth * 0.5;\n        this.halfHeight = destHeight * 0.5;\n\n        this.centerX = Math.floor(destWidth / 2);\n        this.centerY = Math.floor(destHeight / 2);\n\n        return this.updateUVs();\n    },\n\n    /**\n     * Takes a crop data object and, based on the rectangular region given, calculates the\n     * required UV coordinates in order to crop this Frame for WebGL and Canvas rendering.\n     *\n     * This is called directly by the Game Object Texture Components `setCrop` method.\n     * Please use that method to crop a Game Object.\n     *\n     * @method Phaser.Textures.Frame#setCropUVs\n     * @since 3.11.0\n     *\n     * @param {object} crop - The crop data object. This is the `GameObject._crop` property.\n     * @param {number} x - The x coordinate to start the crop from. Cannot be negative or exceed the Frame width.\n     * @param {number} y - The y coordinate to start the crop from. Cannot be negative or exceed the Frame height.\n     * @param {number} width - The width of the crop rectangle. Cannot exceed the Frame width.\n     * @param {number} height - The height of the crop rectangle. Cannot exceed the Frame height.\n     * @param {boolean} flipX - Does the parent Game Object have flipX set?\n     * @param {boolean} flipY - Does the parent Game Object have flipY set?\n     *\n     * @return {object} The updated crop data object.\n     */\n    setCropUVs: function (crop, x, y, width, height, flipX, flipY)\n    {\n        //  Clamp the input values\n\n        var cx = this.cutX;\n        var cy = this.cutY;\n        var cw = this.cutWidth;\n        var ch = this.cutHeight;\n        var rw = this.realWidth;\n        var rh = this.realHeight;\n\n        x = Clamp(x, 0, rw);\n        y = Clamp(y, 0, rh);\n\n        width = Clamp(width, 0, rw - x);\n        height = Clamp(height, 0, rh - y);\n\n        var ox = cx + x;\n        var oy = cy + y;\n        var ow = width;\n        var oh = height;\n\n        var data = this.data;\n\n        if (data.trim)\n        {\n            var ss = data.spriteSourceSize;\n\n            //  Need to check for intersection between the cut area and the crop area\n            //  If there is none, we set UV to be empty, otherwise set it to be the intersection area\n\n            width = Clamp(width, 0, cw - x);\n            height = Clamp(height, 0, ch - y);\n\n            var cropRight = x + width;\n            var cropBottom = y + height;\n\n            var intersects = !(ss.r < x || ss.b < y || ss.x > cropRight || ss.y > cropBottom);\n\n            if (intersects)\n            {\n                var ix = Math.max(ss.x, x);\n                var iy = Math.max(ss.y, y);\n                var iw = Math.min(ss.r, cropRight) - ix;\n                var ih = Math.min(ss.b, cropBottom) - iy;\n\n                ow = iw;\n                oh = ih;\n\n                if (flipX)\n                {\n                    ox = cx + (cw - (ix - ss.x) - iw);\n                }\n                else\n                {\n                    ox = cx + (ix - ss.x);\n                }\n\n                if (flipY)\n                {\n                    oy = cy + (ch - (iy - ss.y) - ih);\n                }\n                else\n                {\n                    oy = cy + (iy - ss.y);\n                }\n\n                x = ix;\n                y = iy;\n\n                width = iw;\n                height = ih;\n            }\n            else\n            {\n                ox = 0;\n                oy = 0;\n                ow = 0;\n                oh = 0;\n            }\n        }\n        else\n        {\n            if (flipX)\n            {\n                ox = cx + (cw - x - width);\n            }\n\n            if (flipY)\n            {\n                oy = cy + (ch - y - height);\n            }\n        }\n\n        var tw = this.source.width;\n        var th = this.source.height;\n\n        //  Map the given coordinates into UV space, clamping to the 0-1 range.\n\n        crop.u0 = Math.max(0, ox / tw);\n        crop.v0 = Math.max(0, oy / th);\n        crop.u1 = Math.min(1, (ox + ow) / tw);\n        crop.v1 = Math.min(1, (oy + oh) / th);\n\n        crop.x = x;\n        crop.y = y;\n\n        crop.cx = ox;\n        crop.cy = oy;\n        crop.cw = ow;\n        crop.ch = oh;\n\n        crop.width = width;\n        crop.height = height;\n\n        crop.flipX = flipX;\n        crop.flipY = flipY;\n\n        return crop;\n    },\n\n    /**\n     * Takes a crop data object and recalculates the UVs based on the dimensions inside the crop object.\n     * Called automatically by `setFrame`.\n     *\n     * @method Phaser.Textures.Frame#updateCropUVs\n     * @since 3.11.0\n     *\n     * @param {object} crop - The crop data object. This is the `GameObject._crop` property.\n     * @param {boolean} flipX - Does the parent Game Object have flipX set?\n     * @param {boolean} flipY - Does the parent Game Object have flipY set?\n     *\n     * @return {object} The updated crop data object.\n     */\n    updateCropUVs: function (crop, flipX, flipY)\n    {\n        return this.setCropUVs(crop, crop.x, crop.y, crop.width, crop.height, flipX, flipY);\n    },\n\n    /**\n     * Directly sets the canvas and WebGL UV data for this frame.\n     *\n     * Use this if you need to override the values that are generated automatically\n     * when the Frame is created.\n     *\n     * @method Phaser.Textures.Frame#setUVs\n     * @since 3.50.0\n     *\n     * @param {number} width - Width of this frame for the Canvas data.\n     * @param {number} height - Height of this frame for the Canvas data.\n     * @param {number} u0 - UV u0 value.\n     * @param {number} v0 - UV v0 value.\n     * @param {number} u1 - UV u1 value.\n     * @param {number} v1 - UV v1 value.\n     *\n     * @return {Phaser.Textures.Frame} This Frame object.\n     */\n    setUVs: function (width, height, u0, v0, u1, v1)\n    {\n        //  Canvas data\n\n        var cd = this.data.drawImage;\n\n        cd.width = width;\n        cd.height = height;\n\n        //  WebGL data\n\n        this.u0 = u0;\n        this.v0 = v0;\n\n        this.u1 = u1;\n        this.v1 = v1;\n\n        return this;\n    },\n\n    /**\n     * Updates the internal WebGL UV cache and the drawImage cache.\n     *\n     * @method Phaser.Textures.Frame#updateUVs\n     * @since 3.0.0\n     *\n     * @return {Phaser.Textures.Frame} This Frame object.\n     */\n    updateUVs: function ()\n    {\n        var cx = this.cutX;\n        var cy = this.cutY;\n        var cw = this.cutWidth;\n        var ch = this.cutHeight;\n\n        //  Canvas data\n\n        var cd = this.data.drawImage;\n\n        cd.width = cw;\n        cd.height = ch;\n\n        //  WebGL data\n\n        var tw = this.source.width;\n        var th = this.source.height;\n\n        this.u0 = cx / tw;\n        this.v0 = cy / th;\n\n        this.u1 = (cx + cw) / tw;\n        this.v1 = (cy + ch) / th;\n\n        return this;\n    },\n\n    /**\n     * Updates the internal WebGL UV cache.\n     *\n     * @method Phaser.Textures.Frame#updateUVsInverted\n     * @since 3.0.0\n     *\n     * @return {Phaser.Textures.Frame} This Frame object.\n     */\n    updateUVsInverted: function ()\n    {\n        var tw = this.source.width;\n        var th = this.source.height;\n\n        this.u0 = (this.cutX + this.cutHeight) / tw;\n        this.v0 = this.cutY / th;\n\n        this.u1 = this.cutX / tw;\n        this.v1 = (this.cutY + this.cutWidth) / th;\n\n        return this;\n    },\n\n    /**\n     * Clones this Frame into a new Frame object.\n     *\n     * @method Phaser.Textures.Frame#clone\n     * @since 3.0.0\n     *\n     * @return {Phaser.Textures.Frame} A clone of this Frame.\n     */\n    clone: function ()\n    {\n        var clone = new Frame(this.texture, this.name, this.sourceIndex);\n\n        clone.cutX = this.cutX;\n        clone.cutY = this.cutY;\n        clone.cutWidth = this.cutWidth;\n        clone.cutHeight = this.cutHeight;\n\n        clone.x = this.x;\n        clone.y = this.y;\n\n        clone.width = this.width;\n        clone.height = this.height;\n\n        clone.halfWidth = this.halfWidth;\n        clone.halfHeight = this.halfHeight;\n\n        clone.centerX = this.centerX;\n        clone.centerY = this.centerY;\n\n        clone.rotated = this.rotated;\n\n        clone.data = Extend(true, clone.data, this.data);\n\n        clone.updateUVs();\n\n        return clone;\n    },\n\n    /**\n     * Destroys this Frame by nulling its reference to the parent Texture and and data objects.\n     *\n     * @method Phaser.Textures.Frame#destroy\n     * @since 3.0.0\n     */\n    destroy: function ()\n    {\n        this.source = null;\n        this.texture = null;\n        this.glTexture = null;\n        this.customData = null;\n        this.data = null;\n    },\n\n    /**\n     * The width of the Frame in its un-trimmed, un-padded state, as prepared in the art package,\n     * before being packed.\n     *\n     * @name Phaser.Textures.Frame#realWidth\n     * @type {number}\n     * @readonly\n     * @since 3.0.0\n     */\n    realWidth: {\n\n        get: function ()\n        {\n            return this.data.sourceSize.w;\n        }\n\n    },\n\n    /**\n     * The height of the Frame in its un-trimmed, un-padded state, as prepared in the art package,\n     * before being packed.\n     *\n     * @name Phaser.Textures.Frame#realHeight\n     * @type {number}\n     * @readonly\n     * @since 3.0.0\n     */\n    realHeight: {\n\n        get: function ()\n        {\n            return this.data.sourceSize.h;\n        }\n\n    },\n\n    /**\n     * The radius of the Frame (derived from sqrt(w * w + h * h) / 2)\n     *\n     * @name Phaser.Textures.Frame#radius\n     * @type {number}\n     * @readonly\n     * @since 3.0.0\n     */\n    radius: {\n\n        get: function ()\n        {\n            return this.data.radius;\n        }\n\n    },\n\n    /**\n     * Is the Frame trimmed or not?\n     *\n     * @name Phaser.Textures.Frame#trimmed\n     * @type {boolean}\n     * @readonly\n     * @since 3.0.0\n     */\n    trimmed: {\n\n        get: function ()\n        {\n            return this.data.trim;\n        }\n\n    },\n\n    /**\n     * The Canvas drawImage data object.\n     *\n     * @name Phaser.Textures.Frame#canvasData\n     * @type {object}\n     * @readonly\n     * @since 3.0.0\n     */\n    canvasData: {\n\n        get: function ()\n        {\n            return this.data.drawImage;\n        }\n\n    }\n\n});\n\nmodule.exports = Frame;\n"],"names":["Class","Clamp","Extend","Frame","initialize","texture","name","sourceIndex","x","y","width","height","this","source","glTexture","cutX","cutY","cutWidth","cutHeight","halfWidth","halfHeight","centerX","centerY","pivotX","pivotY","customPivot","rotated","autoRound","customData","u0","v0","u1","v1","data","cut","w","h","r","b","trim","sourceSize","spriteSourceSize","radius","drawImage","setSize","undefined","Math","floor","sqrt","updateUVs","setTrim","actualWidth","actualHeight","destX","destY","destWidth","destHeight","ss","setCropUVs","crop","flipX","flipY","cx","cy","cw","ch","rw","realWidth","rh","realHeight","ox","oy","ow","oh","cropRight","cropBottom","ix","max","iy","iw","min","ih","tw","th","updateCropUVs","setUVs","cd","updateUVsInverted","clone","destroy","get","trimmed","canvasData","module","exports"],"sourceRoot":""}