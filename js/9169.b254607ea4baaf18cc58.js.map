{"version":3,"file":"js/9169.b254607ea4baaf18cc58.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Matrix3.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Quaternion.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/RandomXYZ.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/RandomXYZW.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/RotateVec3.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Vector4.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/NOOP.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A three-dimensional matrix.\r\n *\r\n * Defaults to the identity matrix when instantiated.\r\n *\r\n * @class Matrix3\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Matrix3} [m] - Optional Matrix3 to copy values from.\r\n */\r\nvar Matrix3 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Matrix3 (m)\r\n    {\r\n        /**\r\n         * The matrix values.\r\n         *\r\n         * @name Phaser.Math.Matrix3#val\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.val = new Float32Array(9);\r\n\r\n        if (m)\r\n        {\r\n            //  Assume Matrix3 with val:\r\n            this.copy(m);\r\n        }\r\n        else\r\n        {\r\n            //  Default to identity\r\n            this.identity();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Matrix3.\r\n     *\r\n     * @method Phaser.Math.Matrix3#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} A clone of this Matrix3.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Matrix3(this);\r\n    },\r\n\r\n    /**\r\n     * This method is an alias for `Matrix3.copy`.\r\n     *\r\n     * @method Phaser.Math.Matrix3#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} src - The Matrix to set the values of this Matrix's from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    set: function (src)\r\n    {\r\n        return this.copy(src);\r\n    },\r\n\r\n    /**\r\n     * Copy the values of a given Matrix into this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} src - The Matrix to copy the values from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        var out = this.val;\r\n        var a = src.val;\r\n\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        out[4] = a[4];\r\n        out[5] = a[5];\r\n        out[6] = a[6];\r\n        out[7] = a[7];\r\n        out[8] = a[8];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Copy the values of a given Matrix4 into this Matrix3.\r\n     *\r\n     * @method Phaser.Math.Matrix3#fromMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} m - The Matrix4 to copy the values from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    fromMat4: function (m)\r\n    {\r\n        var a = m.val;\r\n        var out = this.val;\r\n\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[4];\r\n        out[4] = a[5];\r\n        out[5] = a[6];\r\n        out[6] = a[8];\r\n        out[7] = a[9];\r\n        out[8] = a[10];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix from the given array.\r\n     *\r\n     * @method Phaser.Math.Matrix3#fromArray\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} a - The array to copy the values from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    fromArray: function (a)\r\n    {\r\n        var out = this.val;\r\n\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        out[4] = a[4];\r\n        out[5] = a[5];\r\n        out[6] = a[6];\r\n        out[7] = a[7];\r\n        out[8] = a[8];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Reset this Matrix to an identity (default) matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#identity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    identity: function ()\r\n    {\r\n        var out = this.val;\r\n\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 1;\r\n        out[5] = 0;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transpose this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#transpose\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    transpose: function ()\r\n    {\r\n        var a = this.val;\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a12 = a[5];\r\n\r\n        a[1] = a[3];\r\n        a[2] = a[6];\r\n        a[3] = a01;\r\n        a[5] = a[7];\r\n        a[6] = a02;\r\n        a[7] = a12;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Invert this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#invert\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    invert: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n        var a20 = a[6];\r\n        var a21 = a[7];\r\n        var a22 = a[8];\r\n\r\n        var b01 = a22 * a11 - a12 * a21;\r\n        var b11 = -a22 * a10 + a12 * a20;\r\n        var b21 = a21 * a10 - a11 * a20;\r\n\r\n        // Calculate the determinant\r\n        var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n        if (!det)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        det = 1 / det;\r\n\r\n        a[0] = b01 * det;\r\n        a[1] = (-a22 * a01 + a02 * a21) * det;\r\n        a[2] = (a12 * a01 - a02 * a11) * det;\r\n        a[3] = b11 * det;\r\n        a[4] = (a22 * a00 - a02 * a20) * det;\r\n        a[5] = (-a12 * a00 + a02 * a10) * det;\r\n        a[6] = b21 * det;\r\n        a[7] = (-a21 * a00 + a01 * a20) * det;\r\n        a[8] = (a11 * a00 - a01 * a10) * det;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the adjoint, or adjugate, of this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#adjoint\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    adjoint: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n        var a20 = a[6];\r\n        var a21 = a[7];\r\n        var a22 = a[8];\r\n\r\n        a[0] = (a11 * a22 - a12 * a21);\r\n        a[1] = (a02 * a21 - a01 * a22);\r\n        a[2] = (a01 * a12 - a02 * a11);\r\n        a[3] = (a12 * a20 - a10 * a22);\r\n        a[4] = (a00 * a22 - a02 * a20);\r\n        a[5] = (a02 * a10 - a00 * a12);\r\n        a[6] = (a10 * a21 - a11 * a20);\r\n        a[7] = (a01 * a20 - a00 * a21);\r\n        a[8] = (a00 * a11 - a01 * a10);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the determinant of this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#determinant\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The determinant of this Matrix.\r\n     */\r\n    determinant: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n        var a20 = a[6];\r\n        var a21 = a[7];\r\n        var a22 = a[8];\r\n\r\n        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n    },\r\n\r\n    /**\r\n     * Multiply this Matrix by the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} src - The Matrix to multiply this Matrix by.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    multiply: function (src)\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n        var a20 = a[6];\r\n        var a21 = a[7];\r\n        var a22 = a[8];\r\n\r\n        var b = src.val;\r\n\r\n        var b00 = b[0];\r\n        var b01 = b[1];\r\n        var b02 = b[2];\r\n        var b10 = b[3];\r\n        var b11 = b[4];\r\n        var b12 = b[5];\r\n        var b20 = b[6];\r\n        var b21 = b[7];\r\n        var b22 = b[8];\r\n\r\n        a[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n        a[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n        a[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n        a[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n        a[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n        a[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n        a[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n        a[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n        a[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Translate this Matrix using the given Vector.\r\n     *\r\n     * @method Phaser.Math.Matrix3#translate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to translate this Matrix with.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    translate: function (v)\r\n    {\r\n        var a = this.val;\r\n        var x = v.x;\r\n        var y = v.y;\r\n\r\n        a[6] = x * a[0] + y * a[3] + a[6];\r\n        a[7] = x * a[1] + y * a[4] + a[7];\r\n        a[8] = x * a[2] + y * a[5] + a[8];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply a rotation transformation to this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#rotate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The angle in radians to rotate by.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    rotate: function (rad)\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n\r\n        var s = Math.sin(rad);\r\n        var c = Math.cos(rad);\r\n\r\n        a[0] = c * a00 + s * a10;\r\n        a[1] = c * a01 + s * a11;\r\n        a[2] = c * a02 + s * a12;\r\n\r\n        a[3] = c * a10 - s * a00;\r\n        a[4] = c * a11 - s * a01;\r\n        a[5] = c * a12 - s * a02;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply a scale transformation to this Matrix.\r\n     *\r\n     * Uses the `x` and `y` components of the given Vector to scale the Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to scale this Matrix with.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    scale: function (v)\r\n    {\r\n        var a = this.val;\r\n        var x = v.x;\r\n        var y = v.y;\r\n\r\n        a[0] = x * a[0];\r\n        a[1] = x * a[1];\r\n        a[2] = x * a[2];\r\n\r\n        a[3] = y * a[3];\r\n        a[4] = y * a[4];\r\n        a[5] = y * a[5];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix from the given Quaternion.\r\n     *\r\n     * @method Phaser.Math.Matrix3#fromQuat\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to set the values of this Matrix from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    fromQuat: function (q)\r\n    {\r\n        var x = q.x;\r\n        var y = q.y;\r\n        var z = q.z;\r\n        var w = q.w;\r\n\r\n        var x2 = x + x;\r\n        var y2 = y + y;\r\n        var z2 = z + z;\r\n\r\n        var xx = x * x2;\r\n        var xy = x * y2;\r\n        var xz = x * z2;\r\n\r\n        var yy = y * y2;\r\n        var yz = y * z2;\r\n        var zz = z * z2;\r\n\r\n        var wx = w * x2;\r\n        var wy = w * y2;\r\n        var wz = w * z2;\r\n\r\n        var out = this.val;\r\n\r\n        out[0] = 1 - (yy + zz);\r\n        out[3] = xy + wz;\r\n        out[6] = xz - wy;\r\n\r\n        out[1] = xy - wz;\r\n        out[4] = 1 - (xx + zz);\r\n        out[7] = yz + wx;\r\n\r\n        out[2] = xz + wy;\r\n        out[5] = yz - wx;\r\n        out[8] = 1 - (xx + yy);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix3 to be normalized from the given Matrix4.\r\n     *\r\n     * @method Phaser.Math.Matrix3#normalFromMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} m - The Matrix4 to normalize the values from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    normalFromMat4: function (m)\r\n    {\r\n        var a = m.val;\r\n        var out = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n\r\n        var a30 = a[12];\r\n        var a31 = a[13];\r\n        var a32 = a[14];\r\n        var a33 = a[15];\r\n\r\n        var b00 = a00 * a11 - a01 * a10;\r\n        var b01 = a00 * a12 - a02 * a10;\r\n        var b02 = a00 * a13 - a03 * a10;\r\n        var b03 = a01 * a12 - a02 * a11;\r\n\r\n        var b04 = a01 * a13 - a03 * a11;\r\n        var b05 = a02 * a13 - a03 * a12;\r\n        var b06 = a20 * a31 - a21 * a30;\r\n        var b07 = a20 * a32 - a22 * a30;\r\n\r\n        var b08 = a20 * a33 - a23 * a30;\r\n        var b09 = a21 * a32 - a22 * a31;\r\n        var b10 = a21 * a33 - a23 * a31;\r\n        var b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        det = 1 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Matrix3;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\nvar Matrix3 = require('./Matrix3');\r\nvar NOOP = require('../utils/NOOP');\r\nvar Vector3 = require('./Vector3');\r\n\r\nvar EPSILON = 0.000001;\r\n\r\n//  Some shared 'private' arrays\r\nvar siNext = new Int8Array([ 1, 2, 0 ]);\r\nvar tmp = new Float32Array([ 0, 0, 0 ]);\r\n\r\nvar xUnitVec3 = new Vector3(1, 0, 0);\r\nvar yUnitVec3 = new Vector3(0, 1, 0);\r\n\r\nvar tmpvec = new Vector3();\r\nvar tmpMat3 = new Matrix3();\r\n\r\n/**\r\n * @classdesc\r\n * A quaternion.\r\n *\r\n * @class Quaternion\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x component.\r\n * @param {number} [y=0] - The y component.\r\n * @param {number} [z=0] - The z component.\r\n * @param {number} [w=1] - The w component.\r\n */\r\nvar Quaternion = new Class({\r\n\r\n    initialize:\r\n\r\n    function Quaternion (x, y, z, w)\r\n    {\r\n        /**\r\n         * The x component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#_x\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.50.0\r\n         */\r\n\r\n        /**\r\n         * The y component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#_y\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.50.0\r\n         */\r\n\r\n        /**\r\n         * The z component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#_z\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.50.0\r\n         */\r\n\r\n        /**\r\n         * The w component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#_w\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.50.0\r\n         */\r\n\r\n        /**\r\n         * This callback is invoked, if set, each time a value in this quaternion is changed.\r\n         * The callback is passed one argument, a reference to this quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#onChangeCallback\r\n         * @type {function}\r\n         * @since 3.50.0\r\n         */\r\n        this.onChangeCallback = NOOP;\r\n\r\n        this.set(x, y, z, w);\r\n    },\r\n\r\n    /**\r\n     * The x component of this Quaternion.\r\n     *\r\n     * @name Phaser.Math.Quaternion#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n        get: function ()\r\n        {\r\n            return this._x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._x = value;\r\n\r\n            this.onChangeCallback(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The y component of this Quaternion.\r\n     *\r\n     * @name Phaser.Math.Quaternion#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n        get: function ()\r\n        {\r\n            return this._y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._y = value;\r\n\r\n            this.onChangeCallback(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The z component of this Quaternion.\r\n     *\r\n     * @name Phaser.Math.Quaternion#z\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    z: {\r\n        get: function ()\r\n        {\r\n            return this._z;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._z = value;\r\n\r\n            this.onChangeCallback(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The w component of this Quaternion.\r\n     *\r\n     * @name Phaser.Math.Quaternion#w\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    w: {\r\n        get: function ()\r\n        {\r\n            return this._w;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._w = value;\r\n\r\n            this.onChangeCallback(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Quaternion or Vector into this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} src - The Quaternion or Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        return this.set(src);\r\n    },\r\n\r\n    /**\r\n     * Set the components of this Quaternion and optionally call the `onChangeCallback`.\r\n     *\r\n     * @method Phaser.Math.Quaternion#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} [x=0] - The x component, or an object containing x, y, z, and w components.\r\n     * @param {number} [y=0] - The y component.\r\n     * @param {number} [z=0] - The z component.\r\n     * @param {number} [w=0] - The w component.\r\n     * @param {boolean} [update=true] - Call the `onChangeCallback`?\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    set: function (x, y, z, w, update)\r\n    {\r\n        if (update === undefined) { update = true; }\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this._x = x.x || 0;\r\n            this._y = x.y || 0;\r\n            this._z = x.z || 0;\r\n            this._w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this._x = x || 0;\r\n            this._y = y || 0;\r\n            this._z = z || 0;\r\n            this._w = w || 0;\r\n        }\r\n\r\n        if (update)\r\n        {\r\n            this.onChangeCallback(this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a given Quaternion or Vector to this Quaternion. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Quaternion#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to add to this Quaternion.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    add: function (v)\r\n    {\r\n        this._x += v.x;\r\n        this._y += v.y;\r\n        this._z += v.z;\r\n        this._w += v.w;\r\n\r\n        this.onChangeCallback(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract a given Quaternion or Vector from this Quaternion. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Quaternion#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to subtract from this Quaternion.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    subtract: function (v)\r\n    {\r\n        this._x -= v.x;\r\n        this._y -= v.y;\r\n        this._z -= v.z;\r\n        this._w -= v.w;\r\n\r\n        this.onChangeCallback(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Quaternion by the given value.\r\n     *\r\n     * @method Phaser.Math.Quaternion#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} scale - The value to scale this Quaternion by.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    scale: function (scale)\r\n    {\r\n        this._x *= scale;\r\n        this._y *= scale;\r\n        this._z *= scale;\r\n        this._w *= scale;\r\n\r\n        this.onChangeCallback(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Quaternion.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Quaternion squared.\r\n     *\r\n     * @method Phaser.Math.Quaternion#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Quaternion, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return x * x + y * y + z * z + w * w;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n        var len = x * x + y * y + z * z + w * w;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this._x = x * len;\r\n            this._y = y * len;\r\n            this._z = z * len;\r\n            this._w = w * len;\r\n        }\r\n\r\n        this.onChangeCallback(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Quaternion and the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to dot product with this Quaternion.\r\n     *\r\n     * @return {number} The dot product of this Quaternion and the given Quaternion or Vector.\r\n     */\r\n    dot: function (v)\r\n    {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate this Quaternion towards the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to interpolate towards.\r\n     * @param {number} [t=0] - The percentage of interpolation.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    lerp: function (v, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        return this.set(\r\n            ax + t * (v.x - ax),\r\n            ay + t * (v.y - ay),\r\n            az + t * (v.z - az),\r\n            aw + t * (v.w - aw)\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Rotates this Quaternion based on the two given vectors.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotationTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} a - The transform rotation vector.\r\n     * @param {Phaser.Math.Vector3} b - The target rotation vector.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotationTo: function (a, b)\r\n    {\r\n        var dot = a.x * b.x + a.y * b.y + a.z * b.z;\r\n\r\n        if (dot < -0.999999)\r\n        {\r\n            if (tmpvec.copy(xUnitVec3).cross(a).length() < EPSILON)\r\n            {\r\n                tmpvec.copy(yUnitVec3).cross(a);\r\n            }\r\n\r\n            tmpvec.normalize();\r\n\r\n            return this.setAxisAngle(tmpvec, Math.PI);\r\n\r\n        }\r\n        else if (dot > 0.999999)\r\n        {\r\n            return this.set(0, 0, 0, 1);\r\n        }\r\n        else\r\n        {\r\n            tmpvec.copy(a).cross(b);\r\n\r\n            this._x = tmpvec.x;\r\n            this._y = tmpvec.y;\r\n            this._z = tmpvec.z;\r\n            this._w = 1 + dot;\r\n\r\n            return this.normalize();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set the axes of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#setAxes\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} view - The view axis.\r\n     * @param {Phaser.Math.Vector3} right - The right axis.\r\n     * @param {Phaser.Math.Vector3} up - The upwards axis.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    setAxes: function (view, right, up)\r\n    {\r\n        var m = tmpMat3.val;\r\n\r\n        m[0] = right.x;\r\n        m[3] = right.y;\r\n        m[6] = right.z;\r\n\r\n        m[1] = up.x;\r\n        m[4] = up.y;\r\n        m[7] = up.z;\r\n\r\n        m[2] = -view.x;\r\n        m[5] = -view.y;\r\n        m[8] = -view.z;\r\n\r\n        return this.fromMat3(tmpMat3).normalize();\r\n    },\r\n\r\n    /**\r\n     * Reset this Matrix to an identity (default) Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#identity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    identity: function ()\r\n    {\r\n        return this.set(0, 0, 0, 1);\r\n    },\r\n\r\n    /**\r\n     * Set the axis angle of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#setAxisAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} axis - The axis.\r\n     * @param {number} rad - The angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    setAxisAngle: function (axis, rad)\r\n    {\r\n        rad = rad * 0.5;\r\n\r\n        var s = Math.sin(rad);\r\n\r\n        return this.set(\r\n            s * axis.x,\r\n            s * axis.y,\r\n            s * axis.z,\r\n            Math.cos(rad)\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Multiply this Quaternion by the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} b - The Quaternion or Vector to multiply this Quaternion by.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    multiply: function (b)\r\n    {\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bx = b.x;\r\n        var by = b.y;\r\n        var bz = b.z;\r\n        var bw = b.w;\r\n\r\n        return this.set(\r\n            ax * bw + aw * bx + ay * bz - az * by,\r\n            ay * bw + aw * by + az * bx - ax * bz,\r\n            az * bw + aw * bz + ax * by - ay * bx,\r\n            aw * bw - ax * bx - ay * by - az * bz\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Smoothly linearly interpolate this Quaternion towards the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#slerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} b - The Quaternion or Vector to interpolate towards.\r\n     * @param {number} t - The percentage of interpolation.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    slerp: function (b, t)\r\n    {\r\n        // benchmarks: http://jsperf.com/quaternion-slerp-implementations\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bx = b.x;\r\n        var by = b.y;\r\n        var bz = b.z;\r\n        var bw = b.w;\r\n\r\n        // calc cosine\r\n        var cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n\r\n        // adjust signs (if necessary)\r\n        if (cosom < 0)\r\n        {\r\n            cosom = -cosom;\r\n            bx = - bx;\r\n            by = - by;\r\n            bz = - bz;\r\n            bw = - bw;\r\n        }\r\n\r\n        // \"from\" and \"to\" quaternions are very close\r\n        //  ... so we can do a linear interpolation\r\n        var scale0 = 1 - t;\r\n        var scale1 = t;\r\n\r\n        // calculate coefficients\r\n        if ((1 - cosom) > EPSILON)\r\n        {\r\n            // standard case (slerp)\r\n            var omega = Math.acos(cosom);\r\n            var sinom = Math.sin(omega);\r\n\r\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n            scale1 = Math.sin(t * omega) / sinom;\r\n        }\r\n\r\n        // calculate final values\r\n        return this.set(\r\n            scale0 * ax + scale1 * bx,\r\n            scale0 * ay + scale1 * by,\r\n            scale0 * az + scale1 * bz,\r\n            scale0 * aw + scale1 * bw\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Invert this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#invert\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    invert: function ()\r\n    {\r\n        var a0 = this.x;\r\n        var a1 = this.y;\r\n        var a2 = this.z;\r\n        var a3 = this.w;\r\n\r\n        var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n        var invDot = (dot) ? 1 / dot : 0;\r\n\r\n        return this.set(\r\n            -a0 * invDot,\r\n            -a1 * invDot,\r\n            -a2 * invDot,\r\n            a3 * invDot\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Convert this Quaternion into its conjugate.\r\n     *\r\n     * Sets the x, y and z components.\r\n     *\r\n     * @method Phaser.Math.Quaternion#conjugate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    conjugate: function ()\r\n    {\r\n        this._x = -this.x;\r\n        this._y = -this.y;\r\n        this._z = -this.z;\r\n\r\n        this.onChangeCallback(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate this Quaternion on the X axis.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotateX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The rotation angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotateX: function (rad)\r\n    {\r\n        rad *= 0.5;\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bx = Math.sin(rad);\r\n        var bw = Math.cos(rad);\r\n\r\n        return this.set(\r\n            ax * bw + aw * bx,\r\n            ay * bw + az * bx,\r\n            az * bw - ay * bx,\r\n            aw * bw - ax * bx\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Rotate this Quaternion on the Y axis.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotateY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The rotation angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotateY: function (rad)\r\n    {\r\n        rad *= 0.5;\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var by = Math.sin(rad);\r\n        var bw = Math.cos(rad);\r\n\r\n        return this.set(\r\n            ax * bw - az * by,\r\n            ay * bw + aw * by,\r\n            az * bw + ax * by,\r\n            aw * bw - ay * by\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Rotate this Quaternion on the Z axis.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotateZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The rotation angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotateZ: function (rad)\r\n    {\r\n        rad *= 0.5;\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bz = Math.sin(rad);\r\n        var bw = Math.cos(rad);\r\n\r\n        return this.set(\r\n            ax * bw + ay * bz,\r\n            ay * bw - ax * bz,\r\n            az * bw + aw * bz,\r\n            aw * bw - az * bz\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Create a unit (or rotation) Quaternion from its x, y, and z components.\r\n     *\r\n     * Sets the w component.\r\n     *\r\n     * @method Phaser.Math.Quaternion#calculateW\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    calculateW: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n\r\n        this.w = -Math.sqrt(1.0 - x * x - y * y - z * z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set this Quaternion from the given Euler, based on Euler order.\r\n     *\r\n     * @method Phaser.Math.Quaternion#setFromEuler\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Euler} euler - The Euler to convert from.\r\n     * @param {boolean} [update=true] - Run the `onChangeCallback`?\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    setFromEuler: function (euler, update)\r\n    {\r\n        var x = euler.x / 2;\r\n        var y = euler.y / 2;\r\n        var z = euler.z / 2;\r\n\r\n        var c1 = Math.cos(x);\r\n        var c2 = Math.cos(y);\r\n        var c3 = Math.cos(z);\r\n\r\n        var s1 = Math.sin(x);\r\n        var s2 = Math.sin(y);\r\n        var s3 = Math.sin(z);\r\n\r\n        switch (euler.order)\r\n        {\r\n            case 'XYZ':\r\n            {\r\n                this.set(\r\n                    s1 * c2 * c3 + c1 * s2 * s3,\r\n                    c1 * s2 * c3 - s1 * c2 * s3,\r\n                    c1 * c2 * s3 + s1 * s2 * c3,\r\n                    c1 * c2 * c3 - s1 * s2 * s3,\r\n                    update\r\n                );\r\n\r\n                break;\r\n            }\r\n\r\n            case 'YXZ':\r\n            {\r\n                this.set(\r\n                    s1 * c2 * c3 + c1 * s2 * s3,\r\n                    c1 * s2 * c3 - s1 * c2 * s3,\r\n                    c1 * c2 * s3 - s1 * s2 * c3,\r\n                    c1 * c2 * c3 + s1 * s2 * s3,\r\n                    update\r\n                );\r\n\r\n                break;\r\n            }\r\n\r\n            case 'ZXY':\r\n            {\r\n                this.set(\r\n                    s1 * c2 * c3 - c1 * s2 * s3,\r\n                    c1 * s2 * c3 + s1 * c2 * s3,\r\n                    c1 * c2 * s3 + s1 * s2 * c3,\r\n                    c1 * c2 * c3 - s1 * s2 * s3,\r\n                    update\r\n                );\r\n\r\n                break;\r\n            }\r\n\r\n            case 'ZYX':\r\n            {\r\n                this.set(\r\n                    s1 * c2 * c3 - c1 * s2 * s3,\r\n                    c1 * s2 * c3 + s1 * c2 * s3,\r\n                    c1 * c2 * s3 - s1 * s2 * c3,\r\n                    c1 * c2 * c3 + s1 * s2 * s3,\r\n                    update\r\n                );\r\n\r\n                break;\r\n            }\r\n\r\n            case 'YZX':\r\n            {\r\n                this.set(\r\n                    s1 * c2 * c3 + c1 * s2 * s3,\r\n                    c1 * s2 * c3 + s1 * c2 * s3,\r\n                    c1 * c2 * s3 - s1 * s2 * c3,\r\n                    c1 * c2 * c3 - s1 * s2 * s3,\r\n                    update\r\n                );\r\n\r\n                break;\r\n            }\r\n\r\n            case 'XZY':\r\n            {\r\n                this.set(\r\n                    s1 * c2 * c3 - c1 * s2 * s3,\r\n                    c1 * s2 * c3 - s1 * c2 * s3,\r\n                    c1 * c2 * s3 + s1 * s2 * c3,\r\n                    c1 * c2 * c3 + s1 * s2 * s3,\r\n                    update\r\n                );\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the rotation of this Quaternion from the given Matrix4.\r\n     *\r\n     * @method Phaser.Math.Quaternion#setFromRotationMatrix\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat4 - The Matrix4 to set the rotation from.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    setFromRotationMatrix: function (mat4)\r\n    {\r\n        var m = mat4.val;\r\n\r\n        var m11 = m[0];\r\n        var m12 = m[4];\r\n        var m13 = m[8];\r\n        var m21 = m[1];\r\n        var m22 = m[5];\r\n        var m23 = m[9];\r\n        var m31 = m[2];\r\n        var m32 = m[6];\r\n        var m33 = m[10];\r\n\r\n        var trace = m11 + m22 + m33;\r\n        var s;\r\n\r\n        if (trace > 0)\r\n        {\r\n            s = 0.5 / Math.sqrt(trace + 1.0);\r\n\r\n            this.set(\r\n                (m32 - m23) * s,\r\n                (m13 - m31) * s,\r\n                (m21 - m12) * s,\r\n                0.25 / s\r\n            );\r\n        }\r\n        else if (m11 > m22 && m11 > m33)\r\n        {\r\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\r\n\r\n            this.set(\r\n                0.25 * s,\r\n                (m12 + m21) / s,\r\n                (m13 + m31) / s,\r\n                (m32 - m23) / s\r\n            );\r\n        }\r\n        else if (m22 > m33)\r\n        {\r\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\r\n\r\n            this.set(\r\n                (m12 + m21) / s,\r\n                0.25 * s,\r\n                (m23 + m32) / s,\r\n                (m13 - m31) / s\r\n            );\r\n        }\r\n        else\r\n        {\r\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\r\n\r\n            this.set(\r\n                (m13 + m31) / s,\r\n                (m23 + m32) / s,\r\n                0.25 * s,\r\n                (m21 - m12) / s\r\n            );\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Convert the given Matrix into this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#fromMat3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} mat - The Matrix to convert from.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    fromMat3: function (mat)\r\n    {\r\n        // benchmarks:\r\n        //    http://jsperf.com/typed-array-access-speed\r\n        //    http://jsperf.com/conversion-of-3x3-matrix-to-quaternion\r\n\r\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n        // article \"Quaternion Calculus and Fast Animation\".\r\n        var m = mat.val;\r\n        var fTrace = m[0] + m[4] + m[8];\r\n        var fRoot;\r\n\r\n        if (fTrace > 0)\r\n        {\r\n            // |w| > 1/2, may as well choose w > 1/2\r\n            fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n\r\n            this.w = 0.5 * fRoot;\r\n\r\n            fRoot = 0.5 / fRoot; // 1/(4w)\r\n\r\n            this._x = (m[7] - m[5]) * fRoot;\r\n            this._y = (m[2] - m[6]) * fRoot;\r\n            this._z = (m[3] - m[1]) * fRoot;\r\n        }\r\n        else\r\n        {\r\n            // |w| <= 1/2\r\n            var i = 0;\r\n\r\n            if (m[4] > m[0])\r\n            {\r\n                i = 1;\r\n            }\r\n\r\n            if (m[8] > m[i * 3 + i])\r\n            {\r\n                i = 2;\r\n            }\r\n\r\n            var j = siNext[i];\r\n            var k = siNext[j];\r\n\r\n            //  This isn't quite as clean without array access\r\n            fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);\r\n            tmp[i] = 0.5 * fRoot;\r\n\r\n            fRoot = 0.5 / fRoot;\r\n\r\n            tmp[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n            tmp[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n\r\n            this._x = tmp[0];\r\n            this._y = tmp[1];\r\n            this._z = tmp[2];\r\n            this._w = (m[k * 3 + j] - m[j * 3 + k]) * fRoot;\r\n        }\r\n\r\n        this.onChangeCallback(this);\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Quaternion;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Compute a random position vector in a spherical area, optionally defined by the given radius.\r\n *\r\n * @function Phaser.Math.RandomXYZ\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector3} vec3 - The Vector to compute random values for.\r\n * @param {number} [radius=1] - The radius.\r\n *\r\n * @return {Phaser.Math.Vector3} The given Vector.\r\n */\r\nvar RandomXYZ = function (vec3, radius)\r\n{\r\n    if (radius === undefined) { radius = 1; }\r\n\r\n    var r = Math.random() * 2 * Math.PI;\r\n    var z = (Math.random() * 2) - 1;\r\n    var zScale = Math.sqrt(1 - z * z) * radius;\r\n\r\n    vec3.x = Math.cos(r) * zScale;\r\n    vec3.y = Math.sin(r) * zScale;\r\n    vec3.z = z * radius;\r\n\r\n    return vec3;\r\n};\r\n\r\nmodule.exports = RandomXYZ;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Compute a random four-dimensional vector.\r\n *\r\n * @function Phaser.Math.RandomXYZW\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector4} vec4 - The Vector to compute random values for.\r\n * @param {number} [scale=1] - The scale of the random values.\r\n *\r\n * @return {Phaser.Math.Vector4} The given Vector.\r\n */\r\nvar RandomXYZW = function (vec4, scale)\r\n{\r\n    if (scale === undefined) { scale = 1; }\r\n\r\n    vec4.x = (Math.random() * 2 - 1) * scale;\r\n    vec4.y = (Math.random() * 2 - 1) * scale;\r\n    vec4.z = (Math.random() * 2 - 1) * scale;\r\n    vec4.w = (Math.random() * 2 - 1) * scale;\r\n\r\n    return vec4;\r\n};\r\n\r\nmodule.exports = RandomXYZW;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Vector3 = require('../math/Vector3');\r\nvar Matrix4 = require('../math/Matrix4');\r\nvar Quaternion = require('../math/Quaternion');\r\n\r\nvar tmpMat4 = new Matrix4();\r\nvar tmpQuat = new Quaternion();\r\nvar tmpVec3 = new Vector3();\r\n\r\n/**\r\n * Rotates a vector in place by axis angle.\r\n *\r\n * This is the same as transforming a point by an\r\n * axis-angle quaternion, but it has higher precision.\r\n *\r\n * @function Phaser.Math.RotateVec3\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector3} vec - The vector to be rotated.\r\n * @param {Phaser.Math.Vector3} axis - The axis to rotate around.\r\n * @param {number} radians - The angle of rotation in radians.\r\n *\r\n * @return {Phaser.Math.Vector3} The given vector.\r\n */\r\nvar RotateVec3 = function (vec, axis, radians)\r\n{\r\n    //  Set the quaternion to our axis angle\r\n    tmpQuat.setAxisAngle(axis, radians);\r\n\r\n    //  Create a rotation matrix from the axis angle\r\n    tmpMat4.fromRotationTranslation(tmpQuat, tmpVec3.set(0, 0, 0));\r\n\r\n    //  Multiply our vector by the rotation matrix\r\n    return vec.transformMat4(tmpMat4);\r\n};\r\n\r\nmodule.exports = RotateVec3;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A representation of a vector in 4D space.\r\n *\r\n * A four-component vector.\r\n *\r\n * @class Vector4\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n * @param {number} [w] - The w component.\r\n */\r\nvar Vector4 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Vector4 (x, y, z, w)\r\n    {\r\n        /**\r\n         * The x component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = 0;\r\n\r\n        /**\r\n         * The y component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = 0;\r\n\r\n        /**\r\n         * The z component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#z\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.z = 0;\r\n\r\n        /**\r\n         * The w component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#w\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.w = 0;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Vector4.\r\n     *\r\n     * @method Phaser.Math.Vector4#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} A clone of this Vector4.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Vector4(this.x, this.y, this.z, this.w);\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Vector into this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} src - The Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        this.x = src.x;\r\n        this.y = src.y;\r\n        this.z = src.z || 0;\r\n        this.w = src.w || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check whether this Vector is equal to a given Vector.\r\n     *\r\n     * Performs a strict quality check against each Vector's components.\r\n     *\r\n     * @method Phaser.Math.Vector4#equals\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} v - The vector to check equality with.\r\n     *\r\n     * @return {boolean} A boolean indicating whether the two Vectors are equal or not.\r\n     */\r\n    equals: function (v)\r\n    {\r\n        return ((this.x === v.x) && (this.y === v.y) && (this.z === v.z) && (this.w === v.w));\r\n    },\r\n\r\n    /**\r\n     * Set the `x`, `y`, `z` and `w` components of the this Vector to the given `x`, `y`, `z` and `w` values.\r\n     *\r\n     * @method Phaser.Math.Vector4#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y, z and w components.\r\n     * @param {number} y - The y value to set for this Vector.\r\n     * @param {number} z - The z value to set for this Vector.\r\n     * @param {number} w - The z value to set for this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    set: function (x, y, z, w)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a given Vector to this Vector. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector4#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to add to this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    add: function (v)\r\n    {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z || 0;\r\n        this.w += v.w || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector4#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to subtract from this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    subtract: function (v)\r\n    {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z || 0;\r\n        this.w -= v.w || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Vector by the given value.\r\n     *\r\n     * @method Phaser.Math.Vector4#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} scale - The value to scale this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    scale: function (scale)\r\n    {\r\n        this.x *= scale;\r\n        this.y *= scale;\r\n        this.z *= scale;\r\n        this.w *= scale;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length (or magnitude) of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Vector squared.\r\n     *\r\n     * @method Phaser.Math.Vector4#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return x * x + y * y + z * z + w * w;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Vector.\r\n     *\r\n     * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n     *\r\n     * @method Phaser.Math.Vector4#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n        var len = x * x + y * y + z * z + w * w;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this.x = x * len;\r\n            this.y = y * len;\r\n            this.z = z * len;\r\n            this.w = w * len;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} v - The Vector4 to dot product with this Vector4.\r\n     *\r\n     * @return {number} The dot product of this Vector and the given Vector.\r\n     */\r\n    dot: function (v)\r\n    {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate between this Vector and the given Vector.\r\n     *\r\n     * Interpolates this Vector towards the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} v - The Vector4 to interpolate towards.\r\n     * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    lerp: function (v, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        this.x = ax + t * (v.x - ax);\r\n        this.y = ay + t * (v.y - ay);\r\n        this.z = az + t * (v.z - az);\r\n        this.w = aw + t * (v.w - aw);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise multiplication between this Vector and the given Vector.\r\n     *\r\n     * Multiplies this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to multiply this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    multiply: function (v)\r\n    {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z || 1;\r\n        this.w *= v.w || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise division between this Vector and the given Vector.\r\n     *\r\n     * Divides this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#divide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to divide this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    divide: function (v)\r\n    {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        this.z /= v.z || 1;\r\n        this.w /= v.w || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#distance\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector.\r\n     */\r\n    distance: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n        var dw = v.w - this.w || 0;\r\n\r\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector, squared.\r\n     *\r\n     * @method Phaser.Math.Vector4#distanceSq\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector, squared.\r\n     */\r\n    distanceSq: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n        var dw = v.w - this.w || 0;\r\n\r\n        return dx * dx + dy * dy + dz * dz + dw * dw;\r\n    },\r\n\r\n    /**\r\n     * Negate the `x`, `y`, `z` and `w` components of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#negate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    negate: function ()\r\n    {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        this.w = -this.w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector4#transformMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector4 with.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    transformMat4: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n        var m = mat.val;\r\n\r\n        this.x = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n        this.y = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n        this.z = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n        this.w = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Quaternion.\r\n     *\r\n     * @method Phaser.Math.Vector4#transformQuat\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    transformQuat: function (q)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var qx = q.x;\r\n        var qy = q.y;\r\n        var qz = q.z;\r\n        var qw = q.w;\r\n\r\n        // calculate quat * vec\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse quat\r\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Make this Vector the zero vector (0, 0, 0, 0).\r\n     *\r\n     * @method Phaser.Math.Vector4#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        this.w = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nVector4.prototype.sub = Vector4.prototype.subtract;\r\nVector4.prototype.mul = Vector4.prototype.multiply;\r\nVector4.prototype.div = Vector4.prototype.divide;\r\nVector4.prototype.dist = Vector4.prototype.distance;\r\nVector4.prototype.distSq = Vector4.prototype.distanceSq;\r\nVector4.prototype.len = Vector4.prototype.length;\r\nVector4.prototype.lenSq = Vector4.prototype.lengthSq;\r\n\r\nmodule.exports = Vector4;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A NOOP (No Operation) callback function.\r\n *\r\n * Used internally by Phaser when it's more expensive to determine if a callback exists\r\n * than it is to just invoke an empty function.\r\n *\r\n * @function Phaser.Utils.NOOP\r\n * @since 3.0.0\r\n */\r\nvar NOOP = function ()\r\n{\r\n    //  NOOP\r\n};\r\n\r\nmodule.exports = NOOP;\r\n"],"names":["Matrix3","initialize","m","this","val","Float32Array","copy","identity","clone","set","src","out","a","fromMat4","fromArray","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","adjoint","determinant","multiply","b","b00","b02","b10","b12","b20","b22","translate","v","x","y","rotate","rad","s","Math","sin","c","cos","scale","fromQuat","q","z","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","module","exports","Class","NOOP","Vector3","EPSILON","siNext","Int8Array","tmp","xUnitVec3","yUnitVec3","tmpvec","tmpMat3","Quaternion","onChangeCallback","get","_x","value","_y","_z","_w","update","undefined","add","subtract","length","sqrt","lengthSq","normalize","len","dot","lerp","t","ax","ay","az","aw","rotationTo","cross","setAxisAngle","PI","setAxes","view","right","up","fromMat3","axis","bx","by","bz","bw","slerp","cosom","scale0","scale1","omega","acos","sinom","a0","a1","a2","a3","invDot","conjugate","rotateX","rotateY","rotateZ","calculateW","setFromEuler","euler","c1","c2","c3","s1","s2","s3","order","setFromRotationMatrix","mat4","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","mat","fRoot","fTrace","i","j","k","vec3","radius","r","random","zScale","vec4","Matrix4","tmpMat4","tmpQuat","tmpVec3","vec","radians","fromRotationTranslation","transformMat4","Vector4","equals","divide","distance","dx","dy","dz","dw","distanceSq","negate","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","reset","prototype","sub","mul","div","dist","distSq","lenSq"],"sourceRoot":""}