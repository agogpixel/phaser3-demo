{"version":3,"file":"js/13.9517d9f891623e2e8c26.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/ColorMatrix.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * The ColorMatrix class creates a 5x4 matrix that can be used in shaders and graphics\r\n * operations. It provides methods required to modify the color values, such as adjusting\r\n * the brightness, setting a sepia tone, hue rotation and more.\r\n *\r\n * Use the method `getData` to return a Float32Array containing the current color values.\r\n *\r\n * @class ColorMatrix\r\n * @memberof Phaser.Display\r\n * @constructor\r\n * @since 3.50.0\r\n */\r\nvar ColorMatrix = new Class({\r\n\r\n    initialize:\r\n\r\n    function ColorMatrix ()\r\n    {\r\n        /**\r\n         * Internal ColorMatrix array.\r\n         *\r\n         * @name Phaser.Display.ColorMatrix#_matrix\r\n         * @type {number[]}\r\n         * @private\r\n         * @since 3.50.0\r\n         */\r\n        this._matrix = [\r\n            1, 0, 0, 0, 0,\r\n            0, 1, 0, 0, 0,\r\n            0, 0, 1, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ];\r\n\r\n        /**\r\n         * The value that determines how much of the original color is used\r\n         * when mixing the colors. A value between 0 (all original) and 1 (all final)\r\n         *\r\n         * @name Phaser.Display.ColorMatrix#alpha\r\n         * @type {number}\r\n         * @since 3.50.0\r\n         */\r\n        this.alpha = 1;\r\n\r\n        /**\r\n         * Is the ColorMatrix array dirty?\r\n         *\r\n         * @name Phaser.Display.ColorMatrix#_dirty\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.50.0\r\n         */\r\n        this._dirty = true;\r\n\r\n        /**\r\n         * The matrix data as a Float32Array.\r\n         *\r\n         * Returned by the `getData` method.\r\n         *\r\n         * @name Phaser.Display.ColorMatrix#data\r\n         * @type {Float32Array}\r\n         * @private\r\n         * @since 3.50.0\r\n         */\r\n        this._data;\r\n    },\r\n\r\n    /**\r\n     * Sets this ColorMatrix from the given array of color values.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#set\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number[]} value - The ColorMatrix values to set.\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    set: function (value)\r\n    {\r\n        this._matrix = value;\r\n\r\n        this._dirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets the ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#reset\r\n     * @since 3.50.0\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    reset: function ()\r\n    {\r\n        //  Long-winded, but saves on gc, which happens a lot in Post FX Shaders\r\n        //  that reset the ColorMatrix every frame.\r\n\r\n        var m = this._matrix;\r\n\r\n        m[0] = 1;\r\n        m[1] = 0;\r\n        m[2] = 0;\r\n        m[3] = 0;\r\n        m[4] = 0;\r\n\r\n        m[5] = 0;\r\n        m[6] = 1;\r\n        m[7] = 0;\r\n        m[8] = 0;\r\n        m[9] = 0;\r\n\r\n        m[10] = 0;\r\n        m[11] = 0;\r\n        m[12] = 1;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n\r\n        m[15] = 0;\r\n        m[16] = 0;\r\n        m[17] = 0;\r\n        m[18] = 1;\r\n        m[19] = 0;\r\n\r\n        this._dirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the ColorMatrix as a Float32Array.\r\n     *\r\n     * Can be used directly as a 1fv shader uniform value.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#getData\r\n     * @since 3.50.0\r\n     *\r\n     * @return {Float32Array} The ColorMatrix as a Float32Array.\r\n     */\r\n    getData: function ()\r\n    {\r\n        if (this._dirty)\r\n        {\r\n            var f32 = new Float32Array(this._matrix);\r\n\r\n            f32[4] /= 255;\r\n            f32[9] /= 255;\r\n            f32[14] /= 255;\r\n            f32[19] /= 255;\r\n\r\n            this._data = f32;\r\n\r\n            this._dirty = false;\r\n        }\r\n\r\n        return this._data;\r\n    },\r\n\r\n    /**\r\n     * Changes the brightness of this ColorMatrix by the given amount.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#brightness\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} [value=0] - The amount of brightness to apply to this ColorMatrix. Between 0 (black) and 1.\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    brightness: function (value, multiply)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        var b = value;\r\n\r\n        return this.multiply([\r\n            b, 0, 0, 0, 0,\r\n            0, b, 0, 0, 0,\r\n            0, 0, b, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Changes the saturation of this ColorMatrix by the given amount.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#saturate\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} [value=0] - The amount of saturation to apply to this ColorMatrix.\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    saturate: function (value, multiply)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        var x = (value * 2 / 3) + 1;\r\n        var y = ((x - 1) * -0.5);\r\n\r\n        return this.multiply([\r\n            x, y, y, 0, 0,\r\n            y, x, y, 0, 0,\r\n            y, y, x, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Desaturates this ColorMatrix (removes color from it).\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#saturation\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    desaturate: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.saturate(-1, multiply);\r\n    },\r\n\r\n    /**\r\n     * Rotates the hues of this ColorMatrix by the value given.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#hue\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} [rotation=0] - The amount of hue rotation to apply to this ColorMatrix, in degrees.\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    hue: function (rotation, multiply)\r\n    {\r\n        if (rotation === undefined) { rotation = 0; }\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        rotation = rotation / 180 * Math.PI;\r\n\r\n        var cos = Math.cos(rotation);\r\n        var sin = Math.sin(rotation);\r\n        var lumR = 0.213;\r\n        var lumG = 0.715;\r\n        var lumB = 0.072;\r\n\r\n        return this.multiply([\r\n            lumR + cos * (1 - lumR) + sin * (-lumR),lumG + cos * (-lumG) + sin * (-lumG),lumB + cos * (-lumB) + sin * (1 - lumB), 0, 0,\r\n            lumR + cos * (-lumR) + sin * (0.143),lumG + cos * (1 - lumG) + sin * (0.140),lumB + cos * (-lumB) + sin * (-0.283), 0, 0,\r\n            lumR + cos * (-lumR) + sin * (-(1 - lumR)),lumG + cos * (-lumG) + sin * (lumG),lumB + cos * (1 - lumB) + sin * (lumB), 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Sets this ColorMatrix to be grayscale.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#grayscale\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} [value=1] - The grayscale scale (0 is black).\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    grayscale: function (value, multiply)\r\n    {\r\n        if (value === undefined) { value = 1; }\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.saturate(-value, multiply);\r\n    },\r\n\r\n    /**\r\n     * Sets this ColorMatrix to be black and white.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#blackWhite\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    blackWhite: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            0.3, 0.6, 0.1, 0, 0,\r\n            0.3, 0.6, 0.1, 0, 0,\r\n            0.3, 0.6, 0.1, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Change the contrast of this ColorMatrix by the amount given.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#contrast\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} [value=0] - The amount of contrast to apply to this ColorMatrix.\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    contrast: function (value, multiply)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        var v = value + 1;\r\n        var o = -0.5 * (v - 1);\r\n\r\n        return this.multiply([\r\n            v, 0, 0, 0, o,\r\n            0, v, 0, 0, o,\r\n            0, 0, v, 0, o,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Converts this ColorMatrix to have negative values.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#negative\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    negative: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            -1, 0, 0, 1, 0,\r\n            0, -1, 0, 1, 0,\r\n            0, 0, -1, 1, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Apply a desaturated luminance to this ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#desaturateLuminance\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    desaturateLuminance: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            0.2764723, 0.9297080, 0.0938197, 0, -37.1,\r\n            0.2764723, 0.9297080, 0.0938197, 0, -37.1,\r\n            0.2764723, 0.9297080, 0.0938197, 0, -37.1,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Applies a sepia tone to this ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#sepia\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    sepia: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            0.393, 0.7689999, 0.18899999, 0, 0,\r\n            0.349, 0.6859999, 0.16799999, 0, 0,\r\n            0.272, 0.5339999, 0.13099999, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Applies a night vision tone to this ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#night\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} [intensity=0.1] - The intensity of this effect.\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    night: function (intensity, multiply)\r\n    {\r\n        if (intensity === undefined) { intensity = 0.1; }\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            intensity * (-2.0), -intensity, 0, 0, 0,\r\n            -intensity, 0, intensity, 0, 0,\r\n            0, intensity, intensity * 2.0, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Applies a trippy color tone to this ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#lsd\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    lsd: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            2, -0.4, 0.5, 0, 0,\r\n            -0.5, 2, -0.4, 0, 0,\r\n            -0.4, -0.5, 3, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Applies a brown tone to this ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#brown\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    brown: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873,\r\n            -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127,\r\n            0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Applies a vintage pinhole color effect to this ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#vintagePinhole\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    vintagePinhole: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123,\r\n            0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591,\r\n            0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Applies a kodachrome color effect to this ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#kodachrome\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    kodachrome: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\r\n            -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\r\n            -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Applies a technicolor color effect to this ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#technicolor\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    technicolor: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337,\r\n            -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398,\r\n            -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Applies a polaroid color effect to this ColorMatrix.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#polaroid\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    polaroid: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            1.438, -0.062, -0.062, 0, 0,\r\n            -0.122, 1.378, -0.122, 0, 0,\r\n            -0.016, -0.016, 1.483, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Shifts the values of this ColorMatrix into BGR order.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#shiftToBGR\r\n     * @since 3.50.0\r\n     *\r\n     * @param {boolean} [multiply=false] - Multiply the resulting ColorMatrix (`true`), or set it (`false`) ?\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    shiftToBGR: function (multiply)\r\n    {\r\n        if (multiply === undefined) { multiply = false; }\r\n\r\n        return this.multiply([\r\n            0, 0, 1, 0, 0,\r\n            0, 1, 0, 0, 0,\r\n            1, 0, 0, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ], multiply);\r\n    },\r\n\r\n    /**\r\n     * Multiplies the two given matrices.\r\n     *\r\n     * @method Phaser.Display.ColorMatrix#multiply\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number[]} a - The 5x4 array to multiply with ColorMatrix._matrix.\r\n     *\r\n     * @return {this} This ColorMatrix instance.\r\n     */\r\n    multiply: function (a, multiply)\r\n    {\r\n        //  Duplicate _matrix into c\r\n\r\n        if (!multiply)\r\n        {\r\n            this.reset();\r\n        }\r\n\r\n        var m = this._matrix;\r\n        var c = [];\r\n\r\n        for (var i = 0; i < 20; i++)\r\n        {\r\n            c[i] = m[i];\r\n        }\r\n\r\n        //  R\r\n        m[0] = (c[0] * a[0]) + (c[1] * a[5]) + (c[2] * a[10]) + (c[3] * a[15]);\r\n        m[1] = (c[0] * a[1]) + (c[1] * a[6]) + (c[2] * a[11]) + (c[3] * a[16]);\r\n        m[2] = (c[0] * a[2]) + (c[1] * a[7]) + (c[2] * a[12]) + (c[3] * a[17]);\r\n        m[3] = (c[0] * a[3]) + (c[1] * a[8]) + (c[2] * a[13]) + (c[3] * a[18]);\r\n        m[4] = (c[0] * a[4]) + (c[1] * a[9]) + (c[2] * a[14]) + (c[3] * a[19]) + c[4];\r\n\r\n        //  G\r\n        m[5] = (c[5] * a[0]) + (c[6] * a[5]) + (c[7] * a[10]) + (c[8] * a[15]);\r\n        m[6] = (c[5] * a[1]) + (c[6] * a[6]) + (c[7] * a[11]) + (c[8] * a[16]);\r\n        m[7] = (c[5] * a[2]) + (c[6] * a[7]) + (c[7] * a[12]) + (c[8] * a[17]);\r\n        m[8] = (c[5] * a[3]) + (c[6] * a[8]) + (c[7] * a[13]) + (c[8] * a[18]);\r\n        m[9] = (c[5] * a[4]) + (c[6] * a[9]) + (c[7] * a[14]) + (c[8] * a[19]) + c[9];\r\n\r\n        //  B\r\n        m[10] = (c[10] * a[0]) + (c[11] * a[5]) + (c[12] * a[10]) + (c[13] * a[15]);\r\n        m[11] = (c[10] * a[1]) + (c[11] * a[6]) + (c[12] * a[11]) + (c[13] * a[16]);\r\n        m[12] = (c[10] * a[2]) + (c[11] * a[7]) + (c[12] * a[12]) + (c[13] * a[17]);\r\n        m[13] = (c[10] * a[3]) + (c[11] * a[8]) + (c[12] * a[13]) + (c[13] * a[18]);\r\n        m[14] = (c[10] * a[4]) + (c[11] * a[9]) + (c[12] * a[14]) + (c[13] * a[19]) + c[14];\r\n\r\n        //  A\r\n        m[15] = (c[15] * a[0]) + (c[16] * a[5]) + (c[17] * a[10]) + (c[18] * a[15]);\r\n        m[16] = (c[15] * a[1]) + (c[16] * a[6]) + (c[17] * a[11]) + (c[18] * a[16]);\r\n        m[17] = (c[15] * a[2]) + (c[16] * a[7]) + (c[17] * a[12]) + (c[18] * a[17]);\r\n        m[18] = (c[15] * a[3]) + (c[16] * a[8]) + (c[17] * a[13]) + (c[18] * a[18]);\r\n        m[19] = (c[15] * a[4]) + (c[16] * a[9]) + (c[17] * a[14]) + (c[18] * a[19]) + c[19];\r\n\r\n        this._dirty = true;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ColorMatrix;\r\n"],"names":["ColorMatrix","initialize","this","_matrix","alpha","_dirty","_data","set","value","reset","m","getData","f32","Float32Array","brightness","multiply","undefined","b","saturate","x","y","desaturate","hue","rotation","Math","PI","cos","sin","lumR","lumG","lumB","grayscale","blackWhite","contrast","v","o","negative","desaturateLuminance","sepia","night","intensity","lsd","brown","vintagePinhole","kodachrome","technicolor","polaroid","shiftToBGR","a","c","i","module","exports"],"sourceRoot":""}