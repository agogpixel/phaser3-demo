{"version":3,"file":"js/1116.928eb8d62a28bdfcc220.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/plugins/DefaultPlugins.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/scene/GetPhysicsPlugins.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/scene/GetScenePlugins.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/scene/InjectionMap.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/scene/Scene.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/scene/Settings.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/scene/Systems.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/scene/const.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/object/Clone.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/object/GetValue.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/object/Merge.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/string/UppercaseFirst.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Default Plugins.\r\n * \r\n * @namespace Phaser.Plugins.DefaultPlugins\r\n * @memberof Phaser.Plugins\r\n * @since 3.0.0\r\n */\r\n\r\nvar DefaultPlugins = {\r\n\r\n    /**\r\n     * These are the Global Managers that are created by the Phaser.Game instance.\r\n     * They are referenced from Scene.Systems so that plugins can use them.\r\n     *\r\n     * @name Phaser.Plugins.DefaultPlugins.Global\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\r\n    Global: [\r\n\r\n        'game',\r\n        'anims',\r\n        'cache',\r\n        'plugins',\r\n        'registry',\r\n        'scale',\r\n        'sound',\r\n        'textures',\r\n        'renderer'\r\n\r\n    ],\r\n\r\n    /**\r\n     * These are the core plugins that are installed into every Scene.Systems instance, no matter what.\r\n     * They are optionally exposed in the Scene as well (see the InjectionMap for details)\r\n     *\r\n     * They are created in the order in which they appear in this array and EventEmitter is always first.\r\n     *\r\n     * @name Phaser.Plugins.DefaultPlugins.CoreScene\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\r\n    CoreScene: [\r\n\r\n        'EventEmitter',\r\n\r\n        'CameraManager',\r\n        'GameObjectCreator',\r\n        'GameObjectFactory',\r\n        'ScenePlugin',\r\n        'DisplayList',\r\n        'UpdateList'\r\n\r\n    ],\r\n\r\n    /**\r\n     * These plugins are created in Scene.Systems in addition to the CoreScenePlugins.\r\n     *\r\n     * You can elect not to have these plugins by either creating a DefaultPlugins object as part\r\n     * of the Game Config, by creating a Plugins object as part of a Scene Config, or by modifying this array\r\n     * and building your own bundle.\r\n     *\r\n     * They are optionally exposed in the Scene as well (see the InjectionMap for details)\r\n     *\r\n     * They are always created in the order in which they appear in the array.\r\n     *\r\n     * @name Phaser.Plugins.DefaultPlugins.DefaultScene\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\r\n    DefaultScene: [\r\n\r\n        'Clock',\r\n        'DataManagerPlugin',\r\n        'InputPlugin',\r\n        'Loader',\r\n        'TweenManager',\r\n        'LightsPlugin'\r\n\r\n    ]\r\n\r\n};\r\n\r\nif (typeof PLUGIN_CAMERA3D)\r\n{\r\n    DefaultPlugins.DefaultScene.push('CameraManager3D');\r\n}\r\n\r\nif (typeof PLUGIN_FBINSTANT)\r\n{\r\n    DefaultPlugins.Global.push('facebook');\r\n}\r\n\r\nmodule.exports = DefaultPlugins;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar UppercaseFirst = require('../utils/string/UppercaseFirst');\r\n\r\n/**\r\n * Builds an array of which physics plugins should be activated for the given Scene.\r\n *\r\n * @function Phaser.Scenes.GetPhysicsPlugins\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scenes.Systems} sys - The scene system to get the physics systems of.\r\n *\r\n * @return {array} An array of Physics systems to start for this Scene.\r\n */\r\nvar GetPhysicsPlugins = function (sys)\r\n{\r\n    var defaultSystem = sys.game.config.defaultPhysicsSystem;\r\n    var sceneSystems = GetFastValue(sys.settings, 'physics', false);\r\n\r\n    if (!defaultSystem && !sceneSystems)\r\n    {\r\n        //  No default physics system or systems in this scene\r\n        return;\r\n    }\r\n\r\n    //  Let's build the systems array\r\n    var output = [];\r\n\r\n    if (defaultSystem)\r\n    {\r\n        output.push(UppercaseFirst(defaultSystem + 'Physics'));\r\n    }\r\n\r\n    if (sceneSystems)\r\n    {\r\n        for (var key in sceneSystems)\r\n        {\r\n            key = UppercaseFirst(key.concat('Physics'));\r\n\r\n            if (output.indexOf(key) === -1)\r\n            {\r\n                output.push(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  An array of Physics systems to start for this Scene\r\n    return output;\r\n};\r\n\r\nmodule.exports = GetPhysicsPlugins;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\n\r\n/**\r\n * Builds an array of which plugins (not including physics plugins) should be activated for the given Scene.\r\n *\r\n * @function Phaser.Scenes.GetScenePlugins\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scenes.Systems} sys - The Scene Systems object to check for plugins.\r\n *\r\n * @return {array} An array of all plugins which should be activated, either the default ones or the ones configured in the Scene Systems object.\r\n */\r\nvar GetScenePlugins = function (sys)\r\n{\r\n    var defaultPlugins = sys.plugins.getDefaultScenePlugins();\r\n\r\n    var scenePlugins = GetFastValue(sys.settings, 'plugins', false);\r\n\r\n    //  Scene Plugins always override Default Plugins\r\n    if (Array.isArray(scenePlugins))\r\n    {\r\n        return scenePlugins;\r\n    }\r\n    else if (defaultPlugins)\r\n    {\r\n        return defaultPlugins;\r\n    }\r\n    else\r\n    {\r\n        //  No default plugins or plugins in this scene\r\n        return [];\r\n    }\r\n};\r\n\r\nmodule.exports = GetScenePlugins;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  These properties get injected into the Scene and map to local systems\r\n//  The map value is the property that is injected into the Scene, the key is the Scene.Systems reference.\r\n//  These defaults can be modified via the Scene config object\r\n//          var config = {\r\n//            map: {\r\n//                add: 'makeStuff',\r\n//                load: 'loader'\r\n//            }\r\n//        };\r\n\r\nvar InjectionMap = {\r\n\r\n    game: 'game',\r\n    renderer: 'renderer',\r\n\r\n    anims: 'anims',\r\n    cache: 'cache',\r\n    plugins: 'plugins',\r\n    registry: 'registry',\r\n    scale: 'scale',\r\n    sound: 'sound',\r\n    textures: 'textures',\r\n\r\n    events: 'events',\r\n    cameras: 'cameras',\r\n    add: 'add',\r\n    make: 'make',\r\n    scenePlugin: 'scene',\r\n    displayList: 'children',\r\n    lights: 'lights',\r\n\r\n    data: 'data',\r\n    input: 'input',\r\n    load: 'load',\r\n    time: 'time',\r\n    tweens: 'tweens',\r\n\r\n    arcadePhysics: 'physics',\r\n    impactPhysics: 'impact',\r\n    matterPhysics: 'matter'\r\n\r\n};\r\n\r\nif (typeof PLUGIN_CAMERA3D)\r\n{\r\n    InjectionMap.cameras3d = 'cameras3d';\r\n}\r\n\r\nif (typeof PLUGIN_FBINSTANT)\r\n{\r\n    InjectionMap.facebook = 'facebook';\r\n}\r\n\r\nmodule.exports = InjectionMap;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Systems = require('./Systems');\r\n\r\n/**\r\n * @classdesc\r\n * A base Phaser.Scene class which can be extended for your own use.\r\n *\r\n * You can also define the optional methods {@link Phaser.Types.Scenes.SceneInitCallback init()}, {@link Phaser.Types.Scenes.ScenePreloadCallback preload()}, and {@link Phaser.Types.Scenes.SceneCreateCallback create()}.\r\n *\r\n * @class Scene\r\n * @memberof Phaser\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Scenes.SettingsConfig)} config - Scene specific configuration settings.\r\n */\r\nvar Scene = new Class({\r\n\r\n    initialize:\r\n\r\n    function Scene (config)\r\n    {\r\n        /**\r\n         * The Scene Systems. You must never overwrite this property, or all hell will break lose.\r\n         *\r\n         * @name Phaser.Scene#sys\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.sys = new Systems(this, config);\r\n\r\n        /**\r\n         * A reference to the Phaser.Game instance.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#game\r\n         * @type {Phaser.Game}\r\n         * @since 3.0.0\r\n         */\r\n        this.game;\r\n\r\n        /**\r\n         * A reference to the global Animation Manager.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#anims\r\n         * @type {Phaser.Animations.AnimationManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.anims;\r\n\r\n        /**\r\n         * A reference to the global Cache.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#cache\r\n         * @type {Phaser.Cache.CacheManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.cache;\r\n\r\n        /**\r\n         * A reference to the global Data Manager.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#registry\r\n         * @type {Phaser.Data.DataManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.registry;\r\n\r\n        /**\r\n         * A reference to the Sound Manager.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.\r\n         *\r\n         * @name Phaser.Scene#sound\r\n         * @type {(Phaser.Sound.NoAudioSoundManager|Phaser.Sound.HTML5AudioSoundManager|Phaser.Sound.WebAudioSoundManager)}\r\n         * @since 3.0.0\r\n         */\r\n        this.sound;\r\n\r\n        /**\r\n         * A reference to the Texture Manager.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#textures\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.textures;\r\n\r\n        /**\r\n         * A Scene specific Event Emitter.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events;\r\n\r\n        /**\r\n         * The Scene Camera Manager.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#cameras\r\n         * @type {Phaser.Cameras.Scene2D.CameraManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.cameras;\r\n\r\n        /**\r\n         * The Scene Game Object Factory.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#add\r\n         * @type {Phaser.GameObjects.GameObjectFactory}\r\n         * @since 3.0.0\r\n         */\r\n        this.add;\r\n\r\n        /**\r\n         * The Scene Game Object Creator.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#make\r\n         * @type {Phaser.GameObjects.GameObjectCreator}\r\n         * @since 3.0.0\r\n         */\r\n        this.make;\r\n\r\n        /**\r\n         * A reference to the Scene Manager Plugin.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#scene\r\n         * @type {Phaser.Scenes.ScenePlugin}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene;\r\n\r\n        /**\r\n         * The Game Object Display List belonging to this Scene.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#children\r\n         * @type {Phaser.GameObjects.DisplayList}\r\n         * @since 3.0.0\r\n         */\r\n        this.children;\r\n\r\n        /**\r\n         * The Scene Lights Manager Plugin.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.\r\n         *\r\n         * @name Phaser.Scene#lights\r\n         * @type {Phaser.GameObjects.LightsManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.lights;\r\n\r\n        /**\r\n         * A Scene specific Data Manager Plugin.\r\n         *\r\n         * See the `registry` property for the global Data Manager.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.\r\n         *\r\n         * @name Phaser.Scene#data\r\n         * @type {Phaser.Data.DataManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.data;\r\n\r\n        /**\r\n         * The Scene Input Manager Plugin.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.\r\n         *\r\n         * @name Phaser.Scene#input\r\n         * @type {Phaser.Input.InputPlugin}\r\n         * @since 3.0.0\r\n         */\r\n        this.input;\r\n\r\n        /**\r\n         * The Scene Loader Plugin.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.\r\n         *\r\n         * @name Phaser.Scene#load\r\n         * @type {Phaser.Loader.LoaderPlugin}\r\n         * @since 3.0.0\r\n         */\r\n        this.load;\r\n\r\n        /**\r\n         * The Scene Time and Clock Plugin.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.\r\n         *\r\n         * @name Phaser.Scene#time\r\n         * @type {Phaser.Time.Clock}\r\n         * @since 3.0.0\r\n         */\r\n        this.time;\r\n\r\n        /**\r\n         * The Scene Tween Manager Plugin.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.\r\n         *\r\n         * @name Phaser.Scene#tweens\r\n         * @type {Phaser.Tweens.TweenManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.tweens;\r\n\r\n        /**\r\n         * The Scene Arcade Physics Plugin.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.\r\n         *\r\n         * @name Phaser.Scene#physics\r\n         * @type {Phaser.Physics.Arcade.ArcadePhysics}\r\n         * @since 3.0.0\r\n         */\r\n        this.physics;\r\n\r\n        /**\r\n         * The Scene Matter Physics Plugin.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.\r\n         *\r\n         * @name Phaser.Scene#matter\r\n         * @type {Phaser.Physics.Matter.MatterPhysics}\r\n         * @since 3.0.0\r\n         */\r\n        this.matter;\r\n\r\n        if (typeof PLUGIN_FBINSTANT)\r\n        {\r\n            /**\r\n             * The Facebook Instant Games Plugin.\r\n             *\r\n             * This property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.\r\n             *\r\n             * @name Phaser.Scene#facebook\r\n             * @type {Phaser.FacebookInstantGamesPlugin}\r\n             * @since 3.12.0\r\n             */\r\n            this.facebook;\r\n        }\r\n\r\n        /**\r\n         * A reference to the global Scale Manager.\r\n         *\r\n         * This property will only be available if defined in the Scene Injection Map.\r\n         *\r\n         * @name Phaser.Scene#scale\r\n         * @type {Phaser.Scale.ScaleManager}\r\n         * @since 3.16.2\r\n         */\r\n        this.scale;\r\n\r\n        /**\r\n         * A reference to the global Plugin Manager.\r\n         *\r\n         * The Plugin Manager is a global system that allows plugins to register themselves with it, and can then install\r\n         * those plugins into Scenes as required.\r\n         *\r\n         * @name Phaser.Scene#plugins\r\n         * @type {Phaser.Plugins.PluginManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.plugins;\r\n\r\n        /**\r\n         * A reference to the renderer instance Phaser is using, either Canvas Renderer or WebGL Renderer.\r\n         *\r\n         * @name Phaser.Scene#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.50.0\r\n         */\r\n        this.renderer;\r\n    },\r\n\r\n    /**\r\n     * This method should be overridden by your own Scenes.\r\n     *\r\n     * This method is called once per game step while the scene is running.\r\n     *\r\n     * @method Phaser.Scene#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function ()\r\n    {\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Scene;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CONST = require('./const');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar Merge = require('../utils/object/Merge');\r\nvar InjectionMap = require('./InjectionMap');\r\n\r\n/**\r\n * @namespace Phaser.Scenes.Settings\r\n */\r\n\r\nvar Settings = {\r\n\r\n    /**\r\n     * Takes a Scene configuration object and returns a fully formed System Settings object.\r\n     *\r\n     * @function Phaser.Scenes.Settings.create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Scenes.SettingsConfig)} config - The Scene configuration object used to create this Scene Settings.\r\n     *\r\n     * @return {Phaser.Types.Scenes.SettingsObject} The Scene Settings object created as a result of the config and default settings.\r\n     */\r\n    create: function (config)\r\n    {\r\n        if (typeof config === 'string')\r\n        {\r\n            config = { key: config };\r\n        }\r\n        else if (config === undefined)\r\n        {\r\n            //  Pass the 'hasOwnProperty' checks\r\n            config = {};\r\n        }\r\n\r\n        return {\r\n\r\n            status: CONST.PENDING,\r\n\r\n            key: GetValue(config, 'key', ''),\r\n            active: GetValue(config, 'active', false),\r\n            visible: GetValue(config, 'visible', true),\r\n\r\n            isBooted: false,\r\n\r\n            isTransition: false,\r\n            transitionFrom: null,\r\n            transitionDuration: 0,\r\n            transitionAllowInput: true,\r\n\r\n            //  Loader payload array\r\n\r\n            data: {},\r\n\r\n            pack: GetValue(config, 'pack', false),\r\n\r\n            //  Cameras\r\n\r\n            cameras: GetValue(config, 'cameras', null),\r\n\r\n            //  Scene Property Injection Map\r\n\r\n            map: GetValue(config, 'map', Merge(InjectionMap, GetValue(config, 'mapAdd', {}))),\r\n\r\n            //  Physics\r\n\r\n            physics: GetValue(config, 'physics', {}),\r\n\r\n            //  Loader\r\n\r\n            loader: GetValue(config, 'loader', {}),\r\n\r\n            //  Plugins\r\n\r\n            plugins: GetValue(config, 'plugins', false),\r\n\r\n            //  Input\r\n\r\n            input: GetValue(config, 'input', {})\r\n\r\n        };\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Settings;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CONST = require('./const');\r\nvar DefaultPlugins = require('../plugins/DefaultPlugins');\r\nvar Events = require('./events');\r\nvar GetPhysicsPlugins = require('./GetPhysicsPlugins');\r\nvar GetScenePlugins = require('./GetScenePlugins');\r\nvar GLOBAL_CONST = require('../const');\r\nvar NOOP = require('../utils/NOOP');\r\nvar Settings = require('./Settings');\r\n\r\n/**\r\n * @classdesc\r\n * The Scene Systems class.\r\n *\r\n * This class is available from within a Scene under the property `sys`.\r\n * It is responsible for managing all of the plugins a Scene has running, including the display list, and\r\n * handling the update step and renderer. It also contains references to global systems belonging to Game.\r\n *\r\n * @class Systems\r\n * @memberof Phaser.Scenes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that owns this Systems instance.\r\n * @param {(string|Phaser.Types.Scenes.SettingsConfig)} config - Scene specific configuration settings.\r\n */\r\nvar Systems = new Class({\r\n\r\n    initialize:\r\n\r\n    function Systems (scene, config)\r\n    {\r\n        /**\r\n         * A reference to the Scene that these Systems belong to.\r\n         *\r\n         * @name Phaser.Scenes.Systems#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Phaser Game instance.\r\n         *\r\n         * @name Phaser.Scenes.Systems#game\r\n         * @type {Phaser.Game}\r\n         * @since 3.0.0\r\n         */\r\n        this.game;\r\n\r\n        /**\r\n         * A reference to either the Canvas or WebGL Renderer that this Game is using.\r\n         *\r\n         * @name Phaser.Scenes.Systems#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.17.0\r\n         */\r\n        this.renderer;\r\n\r\n        if (typeof PLUGIN_FBINSTANT)\r\n        {\r\n            /**\r\n             * The Facebook Instant Games Plugin.\r\n             *\r\n             * @name Phaser.Scenes.Systems#facebook\r\n             * @type {Phaser.FacebookInstantGamesPlugin}\r\n             * @since 3.12.0\r\n             */\r\n            this.facebook;\r\n        }\r\n\r\n        /**\r\n         * The Scene Configuration object, as passed in when creating the Scene.\r\n         *\r\n         * @name Phaser.Scenes.Systems#config\r\n         * @type {(string|Phaser.Types.Scenes.SettingsConfig)}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = config;\r\n\r\n        /**\r\n         * The Scene Settings. This is the parsed output based on the Scene configuration.\r\n         *\r\n         * @name Phaser.Scenes.Systems#settings\r\n         * @type {Phaser.Types.Scenes.SettingsObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.settings = Settings.create(config);\r\n\r\n        /**\r\n         * A handy reference to the Scene canvas / context.\r\n         *\r\n         * @name Phaser.Scenes.Systems#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.canvas;\r\n\r\n        /**\r\n         * A reference to the Canvas Rendering Context being used by the renderer.\r\n         *\r\n         * @name Phaser.Scenes.Systems#context\r\n         * @type {CanvasRenderingContext2D}\r\n         * @since 3.0.0\r\n         */\r\n        this.context;\r\n\r\n        //  Global Systems - these are single-instance global managers that belong to Game\r\n\r\n        /**\r\n         * A reference to the global Animations Manager.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.anims` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#anims\r\n         * @type {Phaser.Animations.AnimationManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.anims;\r\n\r\n        /**\r\n         * A reference to the global Cache. The Cache stores all files bought in to Phaser via\r\n         * the Loader, with the exception of images. Images are stored in the Texture Manager.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.cache` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#cache\r\n         * @type {Phaser.Cache.CacheManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.cache;\r\n\r\n        /**\r\n         * A reference to the global Plugins Manager.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.plugins` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#plugins\r\n         * @type {Phaser.Plugins.PluginManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.plugins;\r\n\r\n        /**\r\n         * A reference to the global registry. This is a game-wide instance of the Data Manager, allowing\r\n         * you to exchange data between Scenes via a universal and shared point.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.registry` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#registry\r\n         * @type {Phaser.Data.DataManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.registry;\r\n\r\n        /**\r\n         * A reference to the global Scale Manager.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.scale` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#scale\r\n         * @type {Phaser.Scale.ScaleManager}\r\n         * @since 3.15.0\r\n         */\r\n        this.scale;\r\n\r\n        /**\r\n         * A reference to the global Sound Manager.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.sound` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#sound\r\n         * @type {(Phaser.Sound.NoAudioSoundManager|Phaser.Sound.HTML5AudioSoundManager|Phaser.Sound.WebAudioSoundManager)}\r\n         * @since 3.0.0\r\n         */\r\n        this.sound;\r\n\r\n        /**\r\n         * A reference to the global Texture Manager.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.textures` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#textures\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.textures;\r\n\r\n        //  Core Plugins - these are non-optional Scene plugins, needed by lots of the other systems\r\n\r\n        /**\r\n         * A reference to the Scene's Game Object Factory.\r\n         *\r\n         * Use this to quickly and easily create new Game Object's.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.add` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#add\r\n         * @type {Phaser.GameObjects.GameObjectFactory}\r\n         * @since 3.0.0\r\n         */\r\n        this.add;\r\n\r\n        /**\r\n         * A reference to the Scene's Camera Manager.\r\n         *\r\n         * Use this to manipulate and create Cameras for this specific Scene.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.cameras` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#cameras\r\n         * @type {Phaser.Cameras.Scene2D.CameraManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.cameras;\r\n\r\n        /**\r\n         * A reference to the Scene's Display List.\r\n         *\r\n         * Use this to organize the children contained in the display list.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.children` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#displayList\r\n         * @type {Phaser.GameObjects.DisplayList}\r\n         * @since 3.0.0\r\n         */\r\n        this.displayList;\r\n\r\n        /**\r\n         * A reference to the Scene's Event Manager.\r\n         *\r\n         * Use this to listen for Scene specific events, such as `pause` and `shutdown`.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.events` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events;\r\n\r\n        /**\r\n         * A reference to the Scene's Game Object Creator.\r\n         *\r\n         * Use this to quickly and easily create new Game Object's. The difference between this and the\r\n         * Game Object Factory, is that the Creator just creates and returns Game Object instances, it\r\n         * doesn't then add them to the Display List or Update List.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.make` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#make\r\n         * @type {Phaser.GameObjects.GameObjectCreator}\r\n         * @since 3.0.0\r\n         */\r\n        this.make;\r\n\r\n        /**\r\n         * A reference to the Scene Manager Plugin.\r\n         *\r\n         * Use this to manipulate both this and other Scene's in your game, for example to launch a parallel Scene,\r\n         * or pause or resume a Scene, or switch from this Scene to another.\r\n         *\r\n         * In the default set-up you can access this from within a Scene via the `this.scene` property.\r\n         *\r\n         * @name Phaser.Scenes.Systems#scenePlugin\r\n         * @type {Phaser.Scenes.ScenePlugin}\r\n         * @since 3.0.0\r\n         */\r\n        this.scenePlugin;\r\n\r\n        /**\r\n         * A reference to the Scene's Update List.\r\n         *\r\n         * Use this to organize the children contained in the update list.\r\n         *\r\n         * The Update List is responsible for managing children that need their `preUpdate` methods called,\r\n         * in order to process so internal components, such as Sprites with Animations.\r\n         *\r\n         * In the default set-up there is no reference to this from within the Scene itself.\r\n         *\r\n         * @name Phaser.Scenes.Systems#updateList\r\n         * @type {Phaser.GameObjects.UpdateList}\r\n         * @since 3.0.0\r\n         */\r\n        this.updateList;\r\n\r\n        /**\r\n         * The Scene Update function.\r\n         *\r\n         * This starts out as NOOP during init, preload and create, and at the end of create\r\n         * it swaps to be whatever the Scene.update function is.\r\n         *\r\n         * @name Phaser.Scenes.Systems#sceneUpdate\r\n         * @type {function}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this.sceneUpdate = NOOP;\r\n    },\r\n\r\n    /**\r\n     * This method is called only once by the Scene Manager when the Scene is instantiated.\r\n     * It is responsible for setting up all of the Scene plugins and references.\r\n     * It should never be called directly.\r\n     *\r\n     * @method Phaser.Scenes.Systems#init\r\n     * @protected\r\n     * @fires Phaser.Scenes.Events#BOOT\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Game} game - A reference to the Phaser Game instance.\r\n     */\r\n    init: function (game)\r\n    {\r\n        this.settings.status = CONST.INIT;\r\n\r\n        //  This will get replaced by the SceneManager with the actual update function, if it exists, once create is over.\r\n        this.sceneUpdate = NOOP;\r\n\r\n        this.game = game;\r\n        this.renderer = game.renderer;\r\n\r\n        this.canvas = game.canvas;\r\n        this.context = game.context;\r\n\r\n        var pluginManager = game.plugins;\r\n\r\n        this.plugins = pluginManager;\r\n\r\n        pluginManager.addToScene(this, DefaultPlugins.Global, [ DefaultPlugins.CoreScene, GetScenePlugins(this), GetPhysicsPlugins(this) ]);\r\n\r\n        this.events.emit(Events.BOOT, this);\r\n\r\n        this.settings.isBooted = true;\r\n    },\r\n\r\n    /**\r\n     * A single game step. Called automatically by the Scene Manager as a result of a Request Animation\r\n     * Frame or Set Timeout call to the main Game instance.\r\n     *\r\n     * @method Phaser.Scenes.Systems#step\r\n     * @fires Phaser.Scenes.Events#PRE_UPDATE\r\n     * @fires Phaser.Scenes.Events#UPDATE\r\n     * @fires Phaser.Scenes.Events#POST_UPDATE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The time value from the most recent Game step. Typically a high-resolution timer value, or Date.now().\r\n     * @param {number} delta - The delta value since the last frame. This is smoothed to avoid delta spikes by the TimeStep class.\r\n     */\r\n    step: function (time, delta)\r\n    {\r\n        var events = this.events;\r\n\r\n        events.emit(Events.PRE_UPDATE, time, delta);\r\n\r\n        events.emit(Events.UPDATE, time, delta);\r\n\r\n        this.sceneUpdate.call(this.scene, time, delta);\r\n\r\n        events.emit(Events.POST_UPDATE, time, delta);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Scene Manager.\r\n     * Instructs the Scene to render itself via its Camera Manager to the renderer given.\r\n     *\r\n     * @method Phaser.Scenes.Systems#render\r\n     * @fires Phaser.Scenes.Events#PRE_RENDER\r\n     * @fires Phaser.Scenes.Events#RENDER\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)} renderer - The renderer that invoked the render call.\r\n     */\r\n    render: function (renderer)\r\n    {\r\n        var displayList = this.displayList;\r\n\r\n        displayList.depthSort();\r\n\r\n        this.events.emit(Events.PRE_RENDER, renderer);\r\n\r\n        this.cameras.render(renderer, displayList);\r\n\r\n        this.events.emit(Events.RENDER, renderer);\r\n    },\r\n\r\n    /**\r\n     * Force a sort of the display list on the next render.\r\n     *\r\n     * @method Phaser.Scenes.Systems#queueDepthSort\r\n     * @since 3.0.0\r\n     */\r\n    queueDepthSort: function ()\r\n    {\r\n        this.displayList.queueDepthSort();\r\n    },\r\n\r\n    /**\r\n     * Immediately sorts the display list if the flag is set.\r\n     *\r\n     * @method Phaser.Scenes.Systems#depthSort\r\n     * @since 3.0.0\r\n     */\r\n    depthSort: function ()\r\n    {\r\n        this.displayList.depthSort();\r\n    },\r\n\r\n    /**\r\n     * Pause this Scene.\r\n     * A paused Scene still renders, it just doesn't run ANY of its update handlers or systems.\r\n     *\r\n     * @method Phaser.Scenes.Systems#pause\r\n     * @fires Phaser.Scenes.Events#PAUSE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} [data] - A data object that will be passed in the 'pause' event.\r\n     *\r\n     * @return {Phaser.Scenes.Systems} This Systems object.\r\n     */\r\n    pause: function (data)\r\n    {\r\n        var events = this.events;\r\n        var settings = this.settings;\r\n\r\n        if (this.settings.active)\r\n        {\r\n            settings.status = CONST.PAUSED;\r\n\r\n            settings.active = false;\r\n\r\n            events.emit(Events.PAUSE, this, data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resume this Scene from a paused state.\r\n     *\r\n     * @method Phaser.Scenes.Systems#resume\r\n     * @fires Phaser.Scenes.Events#RESUME\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} [data] - A data object that will be passed in the 'resume' event.\r\n     *\r\n     * @return {Phaser.Scenes.Systems} This Systems object.\r\n     */\r\n    resume: function (data)\r\n    {\r\n        var events = this.events;\r\n        var settings = this.settings;\r\n\r\n        if (!this.settings.active)\r\n        {\r\n            settings.status = CONST.RUNNING;\r\n\r\n            settings.active = true;\r\n\r\n            events.emit(Events.RESUME, this, data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Send this Scene to sleep.\r\n     *\r\n     * A sleeping Scene doesn't run its update step or render anything, but it also isn't shut down\r\n     * or has any of its systems or children removed, meaning it can be re-activated at any point and\r\n     * will carry on from where it left off. It also keeps everything in memory and events and callbacks\r\n     * from other Scenes may still invoke changes within it, so be careful what is left active.\r\n     *\r\n     * @method Phaser.Scenes.Systems#sleep\r\n     * @fires Phaser.Scenes.Events#SLEEP\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} [data] - A data object that will be passed in the 'sleep' event.\r\n     *\r\n     * @return {Phaser.Scenes.Systems} This Systems object.\r\n     */\r\n    sleep: function (data)\r\n    {\r\n        var events = this.events;\r\n        var settings = this.settings;\r\n\r\n        settings.status = CONST.SLEEPING;\r\n\r\n        settings.active = false;\r\n        settings.visible = false;\r\n\r\n        events.emit(Events.SLEEP, this, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Wake-up this Scene if it was previously asleep.\r\n     *\r\n     * @method Phaser.Scenes.Systems#wake\r\n     * @fires Phaser.Scenes.Events#WAKE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} [data] - A data object that will be passed in the 'wake' event.\r\n     *\r\n     * @return {Phaser.Scenes.Systems} This Systems object.\r\n     */\r\n    wake: function (data)\r\n    {\r\n        var events = this.events;\r\n        var settings = this.settings;\r\n\r\n        settings.status = CONST.RUNNING;\r\n\r\n        settings.active = true;\r\n        settings.visible = true;\r\n\r\n        events.emit(Events.WAKE, this, data);\r\n\r\n        if (settings.isTransition)\r\n        {\r\n            events.emit(Events.TRANSITION_WAKE, settings.transitionFrom, settings.transitionDuration);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns any data that was sent to this Scene by another Scene.\r\n     *\r\n     * The data is also passed to `Scene.init` and in various Scene events, but\r\n     * you can access it at any point via this method.\r\n     *\r\n     * @method Phaser.Scenes.Systems#getData\r\n     * @since 3.22.0\r\n     *\r\n     * @return {any}\r\n     */\r\n    getData: function ()\r\n    {\r\n        return this.settings.data;\r\n    },\r\n\r\n    /**\r\n     * Is this Scene sleeping?\r\n     *\r\n     * @method Phaser.Scenes.Systems#isSleeping\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if this Scene is asleep, otherwise `false`.\r\n     */\r\n    isSleeping: function ()\r\n    {\r\n        return (this.settings.status === CONST.SLEEPING);\r\n    },\r\n\r\n    /**\r\n     * Is this Scene running?\r\n     *\r\n     * @method Phaser.Scenes.Systems#isActive\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if this Scene is running, otherwise `false`.\r\n     */\r\n    isActive: function ()\r\n    {\r\n        return (this.settings.status === CONST.RUNNING);\r\n    },\r\n\r\n    /**\r\n     * Is this Scene paused?\r\n     *\r\n     * @method Phaser.Scenes.Systems#isPaused\r\n     * @since 3.13.0\r\n     *\r\n     * @return {boolean} `true` if this Scene is paused, otherwise `false`.\r\n     */\r\n    isPaused: function ()\r\n    {\r\n        return (this.settings.status === CONST.PAUSED);\r\n    },\r\n\r\n    /**\r\n     * Is this Scene currently transitioning out to, or in from another Scene?\r\n     *\r\n     * @method Phaser.Scenes.Systems#isTransitioning\r\n     * @since 3.5.0\r\n     *\r\n     * @return {boolean} `true` if this Scene is currently transitioning, otherwise `false`.\r\n     */\r\n    isTransitioning: function ()\r\n    {\r\n        return (this.settings.isTransition || this.scenePlugin._target !== null);\r\n    },\r\n\r\n    /**\r\n     * Is this Scene currently transitioning out from itself to another Scene?\r\n     *\r\n     * @method Phaser.Scenes.Systems#isTransitionOut\r\n     * @since 3.5.0\r\n     *\r\n     * @return {boolean} `true` if this Scene is in transition to another Scene, otherwise `false`.\r\n     */\r\n    isTransitionOut: function ()\r\n    {\r\n        return (this.scenePlugin._target !== null && this.scenePlugin._duration > 0);\r\n    },\r\n\r\n    /**\r\n     * Is this Scene currently transitioning in from another Scene?\r\n     *\r\n     * @method Phaser.Scenes.Systems#isTransitionIn\r\n     * @since 3.5.0\r\n     *\r\n     * @return {boolean} `true` if this Scene is transitioning in from another Scene, otherwise `false`.\r\n     */\r\n    isTransitionIn: function ()\r\n    {\r\n        return (this.settings.isTransition);\r\n    },\r\n\r\n    /**\r\n     * Is this Scene visible and rendering?\r\n     *\r\n     * @method Phaser.Scenes.Systems#isVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if this Scene is visible, otherwise `false`.\r\n     */\r\n    isVisible: function ()\r\n    {\r\n        return this.settings.visible;\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state of this Scene.\r\n     * An invisible Scene will not render, but will still process updates.\r\n     *\r\n     * @method Phaser.Scenes.Systems#setVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - `true` to render this Scene, otherwise `false`.\r\n     *\r\n     * @return {Phaser.Scenes.Systems} This Systems object.\r\n     */\r\n    setVisible: function (value)\r\n    {\r\n        this.settings.visible = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the active state of this Scene.\r\n     *\r\n     * An active Scene will run its core update loop.\r\n     *\r\n     * @method Phaser.Scenes.Systems#setActive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - If `true` the Scene will be resumed, if previously paused. If `false` it will be paused.\r\n     * @param {object} [data] - A data object that will be passed in the 'resume' or 'pause' events.\r\n     *\r\n     * @return {Phaser.Scenes.Systems} This Systems object.\r\n     */\r\n    setActive: function (value, data)\r\n    {\r\n        if (value)\r\n        {\r\n            return this.resume(data);\r\n        }\r\n        else\r\n        {\r\n            return this.pause(data);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Start this Scene running and rendering.\r\n     * Called automatically by the SceneManager.\r\n     *\r\n     * @method Phaser.Scenes.Systems#start\r\n     * @fires Phaser.Scenes.Events#START\r\n     * @fires Phaser.Scenes.Events#READY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} data - Optional data object that may have been passed to this Scene from another.\r\n     */\r\n    start: function (data)\r\n    {\r\n        var events = this.events;\r\n        var settings = this.settings;\r\n\r\n        if (data)\r\n        {\r\n            settings.data = data;\r\n        }\r\n\r\n        settings.status = CONST.START;\r\n\r\n        settings.active = true;\r\n        settings.visible = true;\r\n\r\n        //  For plugins to listen out for\r\n        events.emit(Events.START, this);\r\n\r\n        //  For user-land code to listen out for\r\n        events.emit(Events.READY, this, data);\r\n    },\r\n\r\n    /**\r\n     * Shutdown this Scene and send a shutdown event to all of its systems.\r\n     * A Scene that has been shutdown will not run its update loop or render, but it does\r\n     * not destroy any of its plugins or references. It is put into hibernation for later use.\r\n     * If you don't ever plan to use this Scene again, then it should be destroyed instead\r\n     * to free-up resources.\r\n     *\r\n     * @method Phaser.Scenes.Systems#shutdown\r\n     * @fires Phaser.Scenes.Events#SHUTDOWN\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} [data] - A data object that will be passed in the 'shutdown' event.\r\n     */\r\n    shutdown: function (data)\r\n    {\r\n        var events = this.events;\r\n        var settings = this.settings;\r\n\r\n        events.off(Events.TRANSITION_INIT);\r\n        events.off(Events.TRANSITION_START);\r\n        events.off(Events.TRANSITION_COMPLETE);\r\n        events.off(Events.TRANSITION_OUT);\r\n\r\n        settings.status = CONST.SHUTDOWN;\r\n\r\n        settings.active = false;\r\n        settings.visible = false;\r\n\r\n        if (this.renderer === GLOBAL_CONST.WEBGL)\r\n        {\r\n            this.renderer.resetTextures(true);\r\n        }\r\n\r\n        events.emit(Events.SHUTDOWN, this, data);\r\n    },\r\n\r\n    /**\r\n     * Destroy this Scene and send a destroy event all of its systems.\r\n     * A destroyed Scene cannot be restarted.\r\n     * You should not call this directly, instead use `SceneManager.remove`.\r\n     *\r\n     * @method Phaser.Scenes.Systems#destroy\r\n     * @private\r\n     * @fires Phaser.Scenes.Events#DESTROY\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        var events = this.events;\r\n        var settings = this.settings;\r\n\r\n        settings.status = CONST.DESTROYED;\r\n\r\n        settings.active = false;\r\n        settings.visible = false;\r\n\r\n        events.emit(Events.DESTROY, this);\r\n\r\n        events.removeAllListeners();\r\n\r\n        var props = [ 'scene', 'game', 'anims', 'cache', 'plugins', 'registry', 'sound', 'textures', 'add', 'camera', 'displayList', 'events', 'make', 'scenePlugin', 'updateList' ];\r\n\r\n        for (var i = 0; i < props.length; i++)\r\n        {\r\n            this[props[i]] = null;\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Systems;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Scene consts.\r\n * \r\n * @ignore\r\n */\r\n\r\nvar CONST = {\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.PENDING\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PENDING: 0,\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.INIT\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    INIT: 1,\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.START\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    START: 2,\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.LOADING\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    LOADING: 3,\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.CREATING\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    CREATING: 4,\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.RUNNING\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    RUNNING: 5,\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.PAUSED\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PAUSED: 6,\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.SLEEPING\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    SLEEPING: 7,\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.SHUTDOWN\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    SHUTDOWN: 8,\r\n\r\n    /**\r\n     * Scene state.\r\n     * \r\n     * @name Phaser.Scenes.DESTROYED\r\n     * @readonly\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    DESTROYED: 9\r\n\r\n};\r\n\r\nmodule.exports = CONST;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Shallow Object Clone. Will not clone nested objects.\r\n *\r\n * @function Phaser.Utils.Objects.Clone\r\n * @since 3.0.0\r\n *\r\n * @param {object} obj - The object to clone.\r\n *\r\n * @return {object} A new object with the same properties as the input object.\r\n */\r\nvar Clone = function (obj)\r\n{\r\n    var clone = {};\r\n\r\n    for (var key in obj)\r\n    {\r\n        if (Array.isArray(obj[key]))\r\n        {\r\n            clone[key] = obj[key].slice(0);\r\n        }\r\n        else\r\n        {\r\n            clone[key] = obj[key];\r\n        }\r\n    }\r\n\r\n    return clone;\r\n};\r\n\r\nmodule.exports = Clone;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Source object\r\n//  The key as a string, or an array of keys, i.e. 'banner', or 'banner.hideBanner'\r\n//  The default value to use if the key doesn't exist\r\n\r\n/**\r\n * Retrieves a value from an object.\r\n *\r\n * @function Phaser.Utils.Objects.GetValue\r\n * @since 3.0.0\r\n *\r\n * @param {object} source - The object to retrieve the value from.\r\n * @param {string} key - The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`) - `banner.hideBanner` would return the value of the `hideBanner` property from the object stored in the `banner` property of the `source` object.\r\n * @param {*} defaultValue - The value to return if the `key` isn't found in the `source` object.\r\n *\r\n * @return {*} The value of the requested key.\r\n */\r\nvar GetValue = function (source, key, defaultValue)\r\n{\r\n    if (!source || typeof source === 'number')\r\n    {\r\n        return defaultValue;\r\n    }\r\n    else if (source.hasOwnProperty(key))\r\n    {\r\n        return source[key];\r\n    }\r\n    else if (key.indexOf('.') !== -1)\r\n    {\r\n        var keys = key.split('.');\r\n        var parent = source;\r\n        var value = defaultValue;\r\n\r\n        //  Use for loop here so we can break early\r\n        for (var i = 0; i < keys.length; i++)\r\n        {\r\n            if (parent.hasOwnProperty(keys[i]))\r\n            {\r\n                //  Yes it has a key property, let's carry on down\r\n                value = parent[keys[i]];\r\n\r\n                parent = parent[keys[i]];\r\n            }\r\n            else\r\n            {\r\n                //  Can't go any further, so reset to default\r\n                value = defaultValue;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n    else\r\n    {\r\n        return defaultValue;\r\n    }\r\n};\r\n\r\nmodule.exports = GetValue;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clone = require('./Clone');\r\n\r\n/**\r\n * Creates a new Object using all values from obj1 and obj2.\r\n * If a value exists in both obj1 and obj2, the value in obj1 is used.\r\n * \r\n * This is only a shallow copy. Deeply nested objects are not cloned, so be sure to only use this\r\n * function on shallow objects.\r\n *\r\n * @function Phaser.Utils.Objects.Merge\r\n * @since 3.0.0\r\n *\r\n * @param {object} obj1 - The first object.\r\n * @param {object} obj2 - The second object.\r\n *\r\n * @return {object} A new object containing the union of obj1's and obj2's properties.\r\n */\r\nvar Merge = function (obj1, obj2)\r\n{\r\n    var clone = Clone(obj1);\r\n\r\n    for (var key in obj2)\r\n    {\r\n        if (!clone.hasOwnProperty(key))\r\n        {\r\n            clone[key] = obj2[key];\r\n        }\r\n    }\r\n\r\n    return clone;\r\n};\r\n\r\nmodule.exports = Merge;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Capitalizes the first letter of a string if there is one.\r\n * @example\r\n * UppercaseFirst('abc');\r\n * // returns 'Abc'\r\n * @example\r\n * UppercaseFirst('the happy family');\r\n * // returns 'The happy family'\r\n * @example\r\n * UppercaseFirst('');\r\n * // returns ''\r\n *\r\n * @function Phaser.Utils.String.UppercaseFirst\r\n * @since 3.0.0\r\n *\r\n * @param {string} str - The string to capitalize.\r\n *\r\n * @return {string} A new string, same as the first, but with the first letter capitalized.\r\n */\r\nvar UppercaseFirst = function (str)\r\n{\r\n    return str && str[0].toUpperCase() + str.slice(1);\r\n};\r\n\r\nmodule.exports = UppercaseFirst;\r\n"],"names":["module","exports","Global","CoreScene","DefaultScene","GetFastValue","UppercaseFirst","sys","defaultSystem","game","config","defaultPhysicsSystem","sceneSystems","settings","output","push","key","concat","indexOf","defaultPlugins","plugins","getDefaultScenePlugins","scenePlugins","Array","isArray","renderer","anims","cache","registry","scale","sound","textures","events","cameras","add","make","scenePlugin","displayList","lights","data","input","load","time","tweens","arcadePhysics","impactPhysics","matterPhysics","Class","Systems","Scene","initialize","this","scene","children","physics","matter","update","CONST","GetValue","Merge","InjectionMap","Settings","create","undefined","status","PENDING","active","visible","isBooted","isTransition","transitionFrom","transitionDuration","transitionAllowInput","pack","map","loader","DefaultPlugins","Events","GetPhysicsPlugins","GetScenePlugins","GLOBAL_CONST","NOOP","canvas","context","updateList","sceneUpdate","init","INIT","pluginManager","addToScene","emit","BOOT","step","delta","PRE_UPDATE","UPDATE","call","POST_UPDATE","render","depthSort","PRE_RENDER","RENDER","queueDepthSort","pause","PAUSED","PAUSE","resume","RUNNING","RESUME","sleep","SLEEPING","SLEEP","wake","WAKE","TRANSITION_WAKE","getData","isSleeping","isActive","isPaused","isTransitioning","_target","isTransitionOut","_duration","isTransitionIn","isVisible","setVisible","value","setActive","start","START","READY","shutdown","off","TRANSITION_INIT","TRANSITION_START","TRANSITION_COMPLETE","TRANSITION_OUT","SHUTDOWN","WEBGL","resetTextures","destroy","DESTROYED","DESTROY","removeAllListeners","props","i","length","LOADING","CREATING","obj","clone","slice","source","defaultValue","hasOwnProperty","keys","split","parent","Clone","obj1","obj2","str","toUpperCase"],"sourceRoot":""}