{"version":3,"file":"js/9826.b63654ca73a3073653ae.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/const.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/BottomCenter.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/BottomLeft.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/BottomRight.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/Center.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/LeftCenter.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/QuickSet.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/RightCenter.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/TopCenter.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/TopLeft.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/in/TopRight.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/BottomCenter.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/BottomLeft.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/BottomRight.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/LeftBottom.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/LeftCenter.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/LeftTop.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/QuickSet.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/RightBottom.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/RightCenter.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/RightTop.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/TopCenter.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/TopLeft.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/align/to/TopRight.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/CenterOn.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/GetBottom.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/GetCenterX.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/GetCenterY.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/GetLeft.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/GetRight.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/GetTop.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/SetBottom.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/SetCenterX.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/SetCenterY.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/SetLeft.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/SetRight.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/bounds/SetTop.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ALIGN_CONST = {\r\n\r\n    /**\r\n    * A constant representing a top-left alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.TOP_LEFT\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    TOP_LEFT: 0,\r\n\r\n    /**\r\n    * A constant representing a top-center alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.TOP_CENTER\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    TOP_CENTER: 1,\r\n\r\n    /**\r\n    * A constant representing a top-right alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.TOP_RIGHT\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    TOP_RIGHT: 2,\r\n\r\n    /**\r\n    * A constant representing a left-top alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.LEFT_TOP\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    LEFT_TOP: 3,\r\n\r\n    /**\r\n    * A constant representing a left-center alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.LEFT_CENTER\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    LEFT_CENTER: 4,\r\n\r\n    /**\r\n    * A constant representing a left-bottom alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.LEFT_BOTTOM\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    LEFT_BOTTOM: 5,\r\n\r\n    /**\r\n    * A constant representing a center alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.CENTER\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    CENTER: 6,\r\n\r\n    /**\r\n    * A constant representing a right-top alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.RIGHT_TOP\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    RIGHT_TOP: 7,\r\n\r\n    /**\r\n    * A constant representing a right-center alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.RIGHT_CENTER\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    RIGHT_CENTER: 8,\r\n\r\n    /**\r\n    * A constant representing a right-bottom alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.RIGHT_BOTTOM\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    RIGHT_BOTTOM: 9,\r\n\r\n    /**\r\n    * A constant representing a bottom-left alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.BOTTOM_LEFT\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    BOTTOM_LEFT: 10,\r\n\r\n    /**\r\n    * A constant representing a bottom-center alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.BOTTOM_CENTER\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    BOTTOM_CENTER: 11,\r\n\r\n    /**\r\n    * A constant representing a bottom-right alignment or position.\r\n    * @constant\r\n    * @name Phaser.Display.Align.BOTTOM_RIGHT\r\n    * @since 3.0.0\r\n    * @type {number}\r\n    */\r\n    BOTTOM_RIGHT: 12\r\n\r\n};\r\n\r\nmodule.exports = ALIGN_CONST;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetBottom = require('../../bounds/GetBottom');\r\nvar GetCenterX = require('../../bounds/GetCenterX');\r\nvar SetBottom = require('../../bounds/SetBottom');\r\nvar SetCenterX = require('../../bounds/SetCenterX');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned in the bottom center of the other.\r\n *\r\n * @function Phaser.Display.Align.In.BottomCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar BottomCenter = function (gameObject, alignIn, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetCenterX(gameObject, GetCenterX(alignIn) + offsetX);\r\n    SetBottom(gameObject, GetBottom(alignIn) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = BottomCenter;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetBottom = require('../../bounds/GetBottom');\r\nvar GetLeft = require('../../bounds/GetLeft');\r\nvar SetBottom = require('../../bounds/SetBottom');\r\nvar SetLeft = require('../../bounds/SetLeft');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned in the bottom left of the other.\r\n *\r\n * @function Phaser.Display.Align.In.BottomLeft\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar BottomLeft = function (gameObject, alignIn, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetLeft(gameObject, GetLeft(alignIn) - offsetX);\r\n    SetBottom(gameObject, GetBottom(alignIn) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = BottomLeft;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetBottom = require('../../bounds/GetBottom');\r\nvar GetRight = require('../../bounds/GetRight');\r\nvar SetBottom = require('../../bounds/SetBottom');\r\nvar SetRight = require('../../bounds/SetRight');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned in the bottom right of the other.\r\n *\r\n * @function Phaser.Display.Align.In.BottomRight\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar BottomRight = function (gameObject, alignIn, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetRight(gameObject, GetRight(alignIn) + offsetX);\r\n    SetBottom(gameObject, GetBottom(alignIn) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = BottomRight;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CenterOn = require('../../bounds/CenterOn');\r\nvar GetCenterX = require('../../bounds/GetCenterX');\r\nvar GetCenterY = require('../../bounds/GetCenterY');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned in the center of the other.\r\n *\r\n * @function Phaser.Display.Align.In.Center\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar Center = function (gameObject, alignIn, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    CenterOn(gameObject, GetCenterX(alignIn) + offsetX, GetCenterY(alignIn) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = Center;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetCenterY = require('../../bounds/GetCenterY');\r\nvar GetLeft = require('../../bounds/GetLeft');\r\nvar SetCenterY = require('../../bounds/SetCenterY');\r\nvar SetLeft = require('../../bounds/SetLeft');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned in the left center of the other.\r\n *\r\n * @function Phaser.Display.Align.In.LeftCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar LeftCenter = function (gameObject, alignIn, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetLeft(gameObject, GetLeft(alignIn) - offsetX);\r\n    SetCenterY(gameObject, GetCenterY(alignIn) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = LeftCenter;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ALIGN_CONST = require('../const');\r\n\r\nvar AlignInMap = [];\r\n\r\nAlignInMap[ALIGN_CONST.BOTTOM_CENTER] = require('./BottomCenter');\r\nAlignInMap[ALIGN_CONST.BOTTOM_LEFT] = require('./BottomLeft');\r\nAlignInMap[ALIGN_CONST.BOTTOM_RIGHT] = require('./BottomRight');\r\nAlignInMap[ALIGN_CONST.CENTER] = require('./Center');\r\nAlignInMap[ALIGN_CONST.LEFT_CENTER] = require('./LeftCenter');\r\nAlignInMap[ALIGN_CONST.RIGHT_CENTER] = require('./RightCenter');\r\nAlignInMap[ALIGN_CONST.TOP_CENTER] = require('./TopCenter');\r\nAlignInMap[ALIGN_CONST.TOP_LEFT] = require('./TopLeft');\r\nAlignInMap[ALIGN_CONST.TOP_RIGHT] = require('./TopRight');\r\nAlignInMap[ALIGN_CONST.LEFT_BOTTOM] = AlignInMap[ALIGN_CONST.BOTTOM_LEFT];\r\nAlignInMap[ALIGN_CONST.LEFT_TOP] = AlignInMap[ALIGN_CONST.TOP_LEFT];\r\nAlignInMap[ALIGN_CONST.RIGHT_BOTTOM] = AlignInMap[ALIGN_CONST.BOTTOM_RIGHT];\r\nAlignInMap[ALIGN_CONST.RIGHT_TOP] = AlignInMap[ALIGN_CONST.TOP_RIGHT];\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned relative to the other.\r\n * The alignment used is based on the `position` argument, which is an `ALIGN_CONST` value, such as `LEFT_CENTER` or `TOP_RIGHT`.\r\n *\r\n * @function Phaser.Display.Align.In.QuickSet\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [child,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} child - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} position - The position to align the Game Object with. This is an align constant, such as `ALIGN_CONST.LEFT_CENTER`.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar QuickSet = function (child, alignIn, position, offsetX, offsetY)\r\n{\r\n    return AlignInMap[position](child, alignIn, offsetX, offsetY);\r\n};\r\n\r\nmodule.exports = QuickSet;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetCenterY = require('../../bounds/GetCenterY');\r\nvar GetRight = require('../../bounds/GetRight');\r\nvar SetCenterY = require('../../bounds/SetCenterY');\r\nvar SetRight = require('../../bounds/SetRight');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned in the right center of the other.\r\n *\r\n * @function Phaser.Display.Align.In.RightCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar RightCenter = function (gameObject, alignIn, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetRight(gameObject, GetRight(alignIn) + offsetX);\r\n    SetCenterY(gameObject, GetCenterY(alignIn) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = RightCenter;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetCenterX = require('../../bounds/GetCenterX');\r\nvar GetTop = require('../../bounds/GetTop');\r\nvar SetCenterX = require('../../bounds/SetCenterX');\r\nvar SetTop = require('../../bounds/SetTop');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned in the top center of the other.\r\n *\r\n * @function Phaser.Display.Align.In.TopCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar TopCenter = function (gameObject, alignIn, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetCenterX(gameObject, GetCenterX(alignIn) + offsetX);\r\n    SetTop(gameObject, GetTop(alignIn) - offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = TopCenter;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetLeft = require('../../bounds/GetLeft');\r\nvar GetTop = require('../../bounds/GetTop');\r\nvar SetLeft = require('../../bounds/SetLeft');\r\nvar SetTop = require('../../bounds/SetTop');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned in the top left of the other.\r\n *\r\n * @function Phaser.Display.Align.In.TopLeft\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar TopLeft = function (gameObject, alignIn, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetLeft(gameObject, GetLeft(alignIn) - offsetX);\r\n    SetTop(gameObject, GetTop(alignIn) - offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = TopLeft;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetRight = require('../../bounds/GetRight');\r\nvar GetTop = require('../../bounds/GetTop');\r\nvar SetRight = require('../../bounds/SetRight');\r\nvar SetTop = require('../../bounds/SetTop');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned in the top right of the other.\r\n *\r\n * @function Phaser.Display.Align.In.TopRight\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignIn - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar TopRight = function (gameObject, alignIn, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetRight(gameObject, GetRight(alignIn) + offsetX);\r\n    SetTop(gameObject, GetTop(alignIn) - offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = TopRight;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetBottom = require('../../bounds/GetBottom');\r\nvar GetCenterX = require('../../bounds/GetCenterX');\r\nvar SetCenterX = require('../../bounds/SetCenterX');\r\nvar SetTop = require('../../bounds/SetTop');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the bottom center position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.BottomCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar BottomCenter = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetCenterX(gameObject, GetCenterX(alignTo) + offsetX);\r\n    SetTop(gameObject, GetBottom(alignTo) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = BottomCenter;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetBottom = require('../../bounds/GetBottom');\r\nvar GetLeft = require('../../bounds/GetLeft');\r\nvar SetLeft = require('../../bounds/SetLeft');\r\nvar SetTop = require('../../bounds/SetTop');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the bottom left position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.BottomLeft\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar BottomLeft = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetLeft(gameObject, GetLeft(alignTo) - offsetX);\r\n    SetTop(gameObject, GetBottom(alignTo) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = BottomLeft;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetBottom = require('../../bounds/GetBottom');\r\nvar GetRight = require('../../bounds/GetRight');\r\nvar SetRight = require('../../bounds/SetRight');\r\nvar SetTop = require('../../bounds/SetTop');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the bottom right position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.BottomRight\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar BottomRight = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetRight(gameObject, GetRight(alignTo) + offsetX);\r\n    SetTop(gameObject, GetBottom(alignTo) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = BottomRight;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetBottom = require('../../bounds/GetBottom');\r\nvar GetLeft = require('../../bounds/GetLeft');\r\nvar SetBottom = require('../../bounds/SetBottom');\r\nvar SetRight = require('../../bounds/SetRight');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the left bottom position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.LeftBottom\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar LeftBottom = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetRight(gameObject, GetLeft(alignTo) - offsetX);\r\n    SetBottom(gameObject, GetBottom(alignTo) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = LeftBottom;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetCenterY = require('../../bounds/GetCenterY');\r\nvar GetLeft = require('../../bounds/GetLeft');\r\nvar SetCenterY = require('../../bounds/SetCenterY');\r\nvar SetRight = require('../../bounds/SetRight');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the left center position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.LeftCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar LeftCenter = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetRight(gameObject, GetLeft(alignTo) - offsetX);\r\n    SetCenterY(gameObject, GetCenterY(alignTo) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = LeftCenter;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetLeft = require('../../bounds/GetLeft');\r\nvar GetTop = require('../../bounds/GetTop');\r\nvar SetRight = require('../../bounds/SetRight');\r\nvar SetTop = require('../../bounds/SetTop');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the left top position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.LeftTop\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar LeftTop = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetRight(gameObject, GetLeft(alignTo) - offsetX);\r\n    SetTop(gameObject, GetTop(alignTo) - offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = LeftTop;\r\n","/**\r\n * @author       samme\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ALIGN_CONST = require('../const');\r\n\r\nvar AlignToMap = [];\r\n\r\nAlignToMap[ALIGN_CONST.BOTTOM_CENTER] = require('./BottomCenter');\r\nAlignToMap[ALIGN_CONST.BOTTOM_LEFT] = require('./BottomLeft');\r\nAlignToMap[ALIGN_CONST.BOTTOM_RIGHT] = require('./BottomRight');\r\nAlignToMap[ALIGN_CONST.LEFT_BOTTOM] = require('./LeftBottom');\r\nAlignToMap[ALIGN_CONST.LEFT_CENTER] = require('./LeftCenter');\r\nAlignToMap[ALIGN_CONST.LEFT_TOP] = require('./LeftTop');\r\nAlignToMap[ALIGN_CONST.RIGHT_BOTTOM] = require('./RightBottom');\r\nAlignToMap[ALIGN_CONST.RIGHT_CENTER] = require('./RightCenter');\r\nAlignToMap[ALIGN_CONST.RIGHT_TOP] = require('./RightTop');\r\nAlignToMap[ALIGN_CONST.TOP_CENTER] = require('./TopCenter');\r\nAlignToMap[ALIGN_CONST.TOP_LEFT] = require('./TopLeft');\r\nAlignToMap[ALIGN_CONST.TOP_RIGHT] = require('./TopRight');\r\n\r\n/**\r\n * Takes a Game Object and aligns it next to another, at the given position.\r\n * The alignment used is based on the `position` argument, which is a `Phaser.Display.Align` property such as `LEFT_CENTER` or `TOP_RIGHT`.\r\n *\r\n * @function Phaser.Display.Align.To.QuickSet\r\n * @since 3.22.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [child,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} child - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} position - The position to align the Game Object with. This is an align constant, such as `Phaser.Display.Align.LEFT_CENTER`.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar QuickSet = function (child, alignTo, position, offsetX, offsetY)\r\n{\r\n    return AlignToMap[position](child, alignTo, offsetX, offsetY);\r\n};\r\n\r\nmodule.exports = QuickSet;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetBottom = require('../../bounds/GetBottom');\r\nvar GetRight = require('../../bounds/GetRight');\r\nvar SetBottom = require('../../bounds/SetBottom');\r\nvar SetLeft = require('../../bounds/SetLeft');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the right bottom position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.RightBottom\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar RightBottom = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetLeft(gameObject, GetRight(alignTo) + offsetX);\r\n    SetBottom(gameObject, GetBottom(alignTo) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = RightBottom;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetCenterY = require('../../bounds/GetCenterY');\r\nvar GetRight = require('../../bounds/GetRight');\r\nvar SetCenterY = require('../../bounds/SetCenterY');\r\nvar SetLeft = require('../../bounds/SetLeft');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the right center position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.RightCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar RightCenter = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetLeft(gameObject, GetRight(alignTo) + offsetX);\r\n    SetCenterY(gameObject, GetCenterY(alignTo) + offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = RightCenter;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetRight = require('../../bounds/GetRight');\r\nvar GetTop = require('../../bounds/GetTop');\r\nvar SetLeft = require('../../bounds/SetLeft');\r\nvar SetTop = require('../../bounds/SetTop');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the right top position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.RightTop\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar RightTop = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetLeft(gameObject, GetRight(alignTo) + offsetX);\r\n    SetTop(gameObject, GetTop(alignTo) - offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = RightTop;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetCenterX = require('../../bounds/GetCenterX');\r\nvar GetTop = require('../../bounds/GetTop');\r\nvar SetBottom = require('../../bounds/SetBottom');\r\nvar SetCenterX = require('../../bounds/SetCenterX');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the top center position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.TopCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar TopCenter = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetCenterX(gameObject, GetCenterX(alignTo) + offsetX);\r\n    SetBottom(gameObject, GetTop(alignTo) - offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = TopCenter;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetLeft = require('../../bounds/GetLeft');\r\nvar GetTop = require('../../bounds/GetTop');\r\nvar SetBottom = require('../../bounds/SetBottom');\r\nvar SetLeft = require('../../bounds/SetLeft');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the top left position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.TopLeft\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar TopLeft = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetLeft(gameObject, GetLeft(alignTo) - offsetX);\r\n    SetBottom(gameObject, GetTop(alignTo) - offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = TopLeft;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetRight = require('../../bounds/GetRight');\r\nvar GetTop = require('../../bounds/GetTop');\r\nvar SetBottom = require('../../bounds/SetBottom');\r\nvar SetRight = require('../../bounds/SetRight');\r\n\r\n/**\r\n * Takes given Game Object and aligns it so that it is positioned next to the top right position of the other.\r\n *\r\n * @function Phaser.Display.Align.To.TopRight\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be positioned.\r\n * @param {Phaser.GameObjects.GameObject} alignTo - The Game Object to base the alignment position on.\r\n * @param {number} [offsetX=0] - Optional horizontal offset from the position.\r\n * @param {number} [offsetY=0] - Optional vertical offset from the position.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was aligned.\r\n */\r\nvar TopRight = function (gameObject, alignTo, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    SetRight(gameObject, GetRight(alignTo) + offsetX);\r\n    SetBottom(gameObject, GetTop(alignTo) - offsetY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = TopRight;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SetCenterX = require('./SetCenterX');\r\nvar SetCenterY = require('./SetCenterY');\r\n\r\n/**\r\n * Positions the Game Object so that it is centered on the given coordinates.\r\n *\r\n * @function Phaser.Display.Bounds.CenterOn\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be re-positioned.\r\n * @param {number} x - The horizontal coordinate to position the Game Object on.\r\n * @param {number} y - The vertical coordinate to position the Game Object on.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was positioned.\r\n */\r\nvar CenterOn = function (gameObject, x, y)\r\n{\r\n    SetCenterX(gameObject, x);\r\n\r\n    return SetCenterY(gameObject, y);\r\n};\r\n\r\nmodule.exports = CenterOn;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns the bottom coordinate from the bounds of the Game Object.\r\n *\r\n * @function Phaser.Display.Bounds.GetBottom\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to get the bounds value from.\r\n *\r\n * @return {number} The bottom coordinate of the bounds of the Game Object.\r\n */\r\nvar GetBottom = function (gameObject)\r\n{\r\n    return (gameObject.y + gameObject.height) - (gameObject.height * gameObject.originY);\r\n};\r\n\r\nmodule.exports = GetBottom;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns the center x coordinate from the bounds of the Game Object.\r\n *\r\n * @function Phaser.Display.Bounds.GetCenterX\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to get the bounds value from.\r\n *\r\n * @return {number} The center x coordinate of the bounds of the Game Object.\r\n */\r\nvar GetCenterX = function (gameObject)\r\n{\r\n    return gameObject.x - (gameObject.width * gameObject.originX) + (gameObject.width * 0.5);\r\n};\r\n\r\nmodule.exports = GetCenterX;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns the center y coordinate from the bounds of the Game Object.\r\n *\r\n * @function Phaser.Display.Bounds.GetCenterY\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to get the bounds value from.\r\n *\r\n * @return {number} The center y coordinate of the bounds of the Game Object.\r\n */\r\nvar GetCenterY = function (gameObject)\r\n{\r\n    return gameObject.y - (gameObject.height * gameObject.originY) + (gameObject.height * 0.5);\r\n};\r\n\r\nmodule.exports = GetCenterY;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns the left coordinate from the bounds of the Game Object.\r\n *\r\n * @function Phaser.Display.Bounds.GetLeft\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to get the bounds value from.\r\n *\r\n * @return {number} The left coordinate of the bounds of the Game Object.\r\n */\r\nvar GetLeft = function (gameObject)\r\n{\r\n    return gameObject.x - (gameObject.width * gameObject.originX);\r\n};\r\n\r\nmodule.exports = GetLeft;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns the right coordinate from the bounds of the Game Object.\r\n *\r\n * @function Phaser.Display.Bounds.GetRight\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to get the bounds value from.\r\n *\r\n * @return {number} The right coordinate of the bounds of the Game Object.\r\n */\r\nvar GetRight = function (gameObject)\r\n{\r\n    return (gameObject.x + gameObject.width) - (gameObject.width * gameObject.originX);\r\n};\r\n\r\nmodule.exports = GetRight;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns the top coordinate from the bounds of the Game Object.\r\n *\r\n * @function Phaser.Display.Bounds.GetTop\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to get the bounds value from.\r\n *\r\n * @return {number} The top coordinate of the bounds of the Game Object.\r\n */\r\nvar GetTop = function (gameObject)\r\n{\r\n    return gameObject.y - (gameObject.height * gameObject.originY);\r\n};\r\n\r\nmodule.exports = GetTop;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Positions the Game Object so that the bottom of its bounds aligns with the given coordinate.\r\n *\r\n * @function Phaser.Display.Bounds.SetBottom\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be re-positioned.\r\n * @param {number} value - The coordinate to position the Game Object bounds on.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was positioned.\r\n */\r\nvar SetBottom = function (gameObject, value)\r\n{\r\n    gameObject.y = (value - gameObject.height) + (gameObject.height * gameObject.originY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = SetBottom;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Positions the Game Object so that the center top of its bounds aligns with the given coordinate.\r\n *\r\n * @function Phaser.Display.Bounds.SetCenterX\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be re-positioned.\r\n * @param {number} x - The coordinate to position the Game Object bounds on.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was positioned.\r\n */\r\nvar SetCenterX = function (gameObject, x)\r\n{\r\n    var offsetX = gameObject.width * gameObject.originX;\r\n\r\n    gameObject.x = (x + offsetX) - (gameObject.width * 0.5);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = SetCenterX;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Positions the Game Object so that the center top of its bounds aligns with the given coordinate.\r\n *\r\n * @function Phaser.Display.Bounds.SetCenterY\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be re-positioned.\r\n * @param {number} y - The coordinate to position the Game Object bounds on.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was positioned.\r\n */\r\nvar SetCenterY = function (gameObject, y)\r\n{\r\n    var offsetY = gameObject.height * gameObject.originY;\r\n\r\n    gameObject.y = (y + offsetY) - (gameObject.height * 0.5);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = SetCenterY;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Positions the Game Object so that the left of its bounds aligns with the given coordinate.\r\n *\r\n * @function Phaser.Display.Bounds.SetLeft\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be re-positioned.\r\n * @param {number} value - The coordinate to position the Game Object bounds on.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was positioned.\r\n */\r\nvar SetLeft = function (gameObject, value)\r\n{\r\n    gameObject.x = value + (gameObject.width * gameObject.originX);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = SetLeft;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Positions the Game Object so that the left of its bounds aligns with the given coordinate.\r\n *\r\n * @function Phaser.Display.Bounds.SetRight\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be re-positioned.\r\n * @param {number} value - The coordinate to position the Game Object bounds on.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was positioned.\r\n */\r\nvar SetRight = function (gameObject, value)\r\n{\r\n    gameObject.x = (value - gameObject.width) + (gameObject.width * gameObject.originX);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = SetRight;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Positions the Game Object so that the top of its bounds aligns with the given coordinate.\r\n *\r\n * @function Phaser.Display.Bounds.SetTop\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject} G - [gameObject,$return]\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will be re-positioned.\r\n * @param {number} value - The coordinate to position the Game Object bounds on.\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was positioned.\r\n */\r\nvar SetTop = function (gameObject, value)\r\n{\r\n    gameObject.y = value + (gameObject.height * gameObject.originY);\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = SetTop;\r\n"],"names":["module","exports","TOP_LEFT","TOP_CENTER","TOP_RIGHT","LEFT_TOP","LEFT_CENTER","LEFT_BOTTOM","CENTER","RIGHT_TOP","RIGHT_CENTER","RIGHT_BOTTOM","BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM_RIGHT","GetBottom","GetCenterX","SetBottom","SetCenterX","gameObject","alignIn","offsetX","offsetY","undefined","GetLeft","SetLeft","GetRight","SetRight","CenterOn","GetCenterY","SetCenterY","ALIGN_CONST","AlignInMap","child","position","GetTop","SetTop","alignTo","AlignToMap","x","y","height","originY","width","originX","value"],"sourceRoot":""}