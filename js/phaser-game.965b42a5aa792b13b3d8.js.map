{"version":3,"file":"js/phaser-game.965b42a5aa792b13b3d8.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/cache/BaseCache.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/cache/CacheManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/cache/events/ADD_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/cache/events/REMOVE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/cache/events/index.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/Game.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/dom/AddToDOM.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/dom/CreateDOMContainer.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/dom/DOMContentLoaded.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CustomMap = require('../structs/Map');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\n\r\n/**\r\n * @classdesc\r\n * The BaseCache is a base Cache class that can be used for storing references to any kind of data.\r\n *\r\n * Data can be added, retrieved and removed based on the given keys.\r\n *\r\n * Keys are string-based.\r\n *\r\n * @class BaseCache\r\n * @memberof Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\nvar BaseCache = new Class({\r\n\r\n    initialize:\r\n\r\n    function BaseCache ()\r\n    {\r\n        /**\r\n         * The Map in which the cache objects are stored.\r\n         *\r\n         * You can query the Map directly or use the BaseCache methods.\r\n         *\r\n         * @name Phaser.Cache.BaseCache#entries\r\n         * @type {Phaser.Structs.Map.<String, *>}\r\n         * @since 3.0.0\r\n         */\r\n        this.entries = new CustomMap();\r\n\r\n        /**\r\n         * An instance of EventEmitter used by the cache to emit related events.\r\n         *\r\n         * @name Phaser.Cache.BaseCache#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = new EventEmitter();\r\n    },\r\n\r\n    /**\r\n     * Adds an item to this cache. The item is referenced by a unique string, which you are responsible\r\n     * for setting and keeping track of. The item can only be retrieved by using this string.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#add\r\n     * @fires Phaser.Cache.Events#ADD\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key by which the data added to the cache will be referenced.\r\n     * @param {*} data - The data to be stored in the cache.\r\n     *\r\n     * @return {this} This BaseCache object.\r\n     */\r\n    add: function (key, data)\r\n    {\r\n        this.entries.set(key, data);\r\n\r\n        this.events.emit(Events.ADD, this, key, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks if this cache contains an item matching the given key.\r\n     * This performs the same action as `BaseCache.exists`.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#has\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of the item to be checked in this cache.\r\n     *\r\n     * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n     */\r\n    has: function (key)\r\n    {\r\n        return this.entries.has(key);\r\n    },\r\n\r\n    /**\r\n     * Checks if this cache contains an item matching the given key.\r\n     * This performs the same action as `BaseCache.has` and is called directly by the Loader.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#exists\r\n     * @since 3.7.0\r\n     *\r\n     * @param {string} key - The unique key of the item to be checked in this cache.\r\n     *\r\n     * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n     */\r\n    exists: function (key)\r\n    {\r\n        return this.entries.has(key);\r\n    },\r\n\r\n    /**\r\n     * Gets an item from this cache based on the given key.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of the item to be retrieved from this cache.\r\n     *\r\n     * @return {*} The item in the cache, or `null` if no item matching the given key was found.\r\n     */\r\n    get: function (key)\r\n    {\r\n        return this.entries.get(key);\r\n    },\r\n\r\n    /**\r\n     * Removes and item from this cache based on the given key.\r\n     *\r\n     * If an entry matching the key is found it is removed from the cache and a `remove` event emitted.\r\n     * No additional checks are done on the item removed. If other systems or parts of your game code\r\n     * are relying on this item, it is up to you to sever those relationships prior to removing the item.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#remove\r\n     * @fires Phaser.Cache.Events#REMOVE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of the item to remove from the cache.\r\n     *\r\n     * @return {this} This BaseCache object.\r\n     */\r\n    remove: function (key)\r\n    {\r\n        var entry = this.get(key);\r\n\r\n        if (entry)\r\n        {\r\n            this.entries.delete(key);\r\n\r\n            this.events.emit(Events.REMOVE, this, key, entry.data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns all keys in use in this cache.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#getKeys\r\n     * @since 3.17.0\r\n     *\r\n     * @return {string[]} Array containing all the keys.\r\n     */\r\n    getKeys: function ()\r\n    {\r\n        return this.entries.keys();\r\n    },\r\n\r\n    /**\r\n     * Destroys this cache and all items within it.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.entries.clear();\r\n        this.events.removeAllListeners();\r\n\r\n        this.entries = null;\r\n        this.events = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseCache;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseCache = require('./BaseCache');\r\nvar Class = require('../utils/Class');\r\nvar GameEvents = require('../core/events');\r\n\r\n/**\r\n * @classdesc\r\n * The Cache Manager is the global cache owned and maintained by the Game instance.\r\n *\r\n * Various systems, such as the file Loader, rely on this cache in order to store the files\r\n * it has loaded. The manager itself doesn't store any files, but instead owns multiple BaseCache\r\n * instances, one per type of file. You can also add your own custom caches.\r\n *\r\n * @class CacheManager\r\n * @memberof Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance that owns this CacheManager.\r\n */\r\nvar CacheManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function CacheManager (game)\r\n    {\r\n        /**\r\n         * A reference to the Phaser.Game instance that owns this CacheManager.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#game\r\n         * @type {Phaser.Game}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * A Cache storing all binary files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#binary\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.binary = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all bitmap font data files, typically added via the Loader.\r\n         * Only the font data is stored in this cache, the textures are part of the Texture Manager.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#bitmapFont\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.bitmapFont = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all JSON data files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#json\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.json = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all physics data files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#physics\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.physics = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all shader source files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#shader\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.shader = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all non-streaming audio files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#audio\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.audio = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all non-streaming video files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#video\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.20.0\r\n         */\r\n        this.video = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all text files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#text\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.text = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all html files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#html\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.12.0\r\n         */\r\n        this.html = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all WaveFront OBJ files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#obj\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.obj = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all tilemap data files, typically added via the Loader.\r\n         * Only the data is stored in this cache, the textures are part of the Texture Manager.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#tilemap\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all xml data files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#xml\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.xml = new BaseCache();\r\n\r\n        /**\r\n         * An object that contains your own custom BaseCache entries.\r\n         * Add to this via the `addCustom` method.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#custom\r\n         * @type {Object.<Phaser.Cache.BaseCache>}\r\n         * @since 3.0.0\r\n         */\r\n        this.custom = {};\r\n\r\n        this.game.events.once(GameEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Add your own custom Cache for storing your own files.\r\n     * The cache will be available under `Cache.custom.key`.\r\n     * The cache will only be created if the key is not already in use.\r\n     *\r\n     * @method Phaser.Cache.CacheManager#addCustom\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of your custom cache.\r\n     *\r\n     * @return {Phaser.Cache.BaseCache} A reference to the BaseCache that was created. If the key was already in use, a reference to the existing cache is returned instead.\r\n     */\r\n    addCustom: function (key)\r\n    {\r\n        if (!this.custom.hasOwnProperty(key))\r\n        {\r\n            this.custom[key] = new BaseCache();\r\n        }\r\n\r\n        return this.custom[key];\r\n    },\r\n\r\n    /**\r\n     * Removes all entries from all BaseCaches and destroys all custom caches.\r\n     *\r\n     * @method Phaser.Cache.CacheManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        var keys = [\r\n            'binary',\r\n            'bitmapFont',\r\n            'json',\r\n            'physics',\r\n            'shader',\r\n            'audio',\r\n            'video',\r\n            'text',\r\n            'html',\r\n            'obj',\r\n            'tilemap',\r\n            'xml'\r\n        ];\r\n\r\n        for (var i = 0; i < keys.length; i++)\r\n        {\r\n            this[keys[i]].destroy();\r\n            this[keys[i]] = null;\r\n        }\r\n\r\n        for (var key in this.custom)\r\n        {\r\n            this.custom[key].destroy();\r\n        }\r\n\r\n        this.custom = null;\r\n\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = CacheManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Cache Add Event.\r\n * \r\n * This event is dispatched by any Cache that extends the BaseCache each time a new object is added to it.\r\n *\r\n * @event Phaser.Cache.Events#ADD\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Cache.BaseCache} cache - The cache to which the object was added.\r\n * @param {string} key - The key of the object added to the cache.\r\n * @param {*} object - A reference to the object that was added to the cache.\r\n */\r\nmodule.exports = 'add';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Cache Remove Event.\r\n * \r\n * This event is dispatched by any Cache that extends the BaseCache each time an object is removed from it.\r\n *\r\n * @event Phaser.Cache.Events#REMOVE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Cache.BaseCache} cache - The cache from which the object was removed.\r\n * @param {string} key - The key of the object removed from the cache.\r\n * @param {*} object - A reference to the object that was removed from the cache.\r\n */\r\nmodule.exports = 'remove';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Cache.Events\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    ADD: require('./ADD_EVENT'),\r\n    REMOVE: require('./REMOVE_EVENT')\r\n\r\n};\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar AddToDOM = require('../dom/AddToDOM');\r\nvar AnimationManager = require('../animations/AnimationManager');\r\nvar CacheManager = require('../cache/CacheManager');\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar Class = require('../utils/Class');\r\nvar Config = require('./Config');\r\nvar CreateDOMContainer = require('../dom/CreateDOMContainer');\r\nvar CreateRenderer = require('./CreateRenderer');\r\nvar DataManager = require('../data/DataManager');\r\nvar DebugHeader = require('./DebugHeader');\r\nvar Device = require('../device');\r\nvar DOMContentLoaded = require('../dom/DOMContentLoaded');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar InputManager = require('../input/InputManager');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar PluginManager = require('../plugins/PluginManager');\r\nvar ScaleManager = require('../scale/ScaleManager');\r\nvar SceneManager = require('../scene/SceneManager');\r\nvar TextureEvents = require('../textures/events');\r\nvar TextureManager = require('../textures/TextureManager');\r\nvar TimeStep = require('./TimeStep');\r\nvar VisibilityHandler = require('./VisibilityHandler');\r\n\r\nif (typeof FEATURE_SOUND)\r\n{\r\n    var SoundManagerCreator = require('../sound/SoundManagerCreator');\r\n}\r\n\r\nif (typeof PLUGIN_FBINSTANT)\r\n{\r\n    var FacebookInstantGamesPlugin = require('../../plugins/fbinstant/src/FacebookInstantGamesPlugin');\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * The Phaser.Game instance is the main controller for the entire Phaser game. It is responsible\r\n * for handling the boot process, parsing the configuration values, creating the renderer,\r\n * and setting-up all of the global Phaser systems, such as sound and input.\r\n * Once that is complete it will start the Scene Manager and then begin the main game loop.\r\n *\r\n * You should generally avoid accessing any of the systems created by Game, and instead use those\r\n * made available to you via the Phaser.Scene Systems class instead.\r\n *\r\n * @class Game\r\n * @memberof Phaser\r\n * @constructor\r\n * @fires Phaser.Core.Events#BLUR\r\n * @fires Phaser.Core.Events#FOCUS\r\n * @fires Phaser.Core.Events#HIDDEN\r\n * @fires Phaser.Core.Events#VISIBLE\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Core.GameConfig} [GameConfig] - The configuration object for your Phaser Game instance.\r\n */\r\nvar Game = new Class({\r\n\r\n    initialize:\r\n\r\n    function Game (config)\r\n    {\r\n        /**\r\n         * The parsed Game Configuration object.\r\n         *\r\n         * The values stored within this object are read-only and should not be changed at run-time.\r\n         *\r\n         * @name Phaser.Game#config\r\n         * @type {Phaser.Core.Config}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.config = new Config(config);\r\n\r\n        /**\r\n         * A reference to either the Canvas or WebGL Renderer that this Game is using.\r\n         *\r\n         * @name Phaser.Game#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = null;\r\n\r\n        /**\r\n         * A reference to an HTML Div Element used as the DOM Element Container.\r\n         *\r\n         * Only set if `createDOMContainer` is `true` in the game config (by default it is `false`) and\r\n         * if you provide a parent element to insert the Phaser Game inside.\r\n         *\r\n         * See the DOM Element Game Object for more details.\r\n         *\r\n         * @name Phaser.Game#domContainer\r\n         * @type {HTMLDivElement}\r\n         * @since 3.17.0\r\n         */\r\n        this.domContainer = null;\r\n\r\n        /**\r\n         * A reference to the HTML Canvas Element that Phaser uses to render the game.\r\n         * This is created automatically by Phaser unless you provide a `canvas` property\r\n         * in your Game Config.\r\n         *\r\n         * @name Phaser.Game#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.canvas = null;\r\n\r\n        /**\r\n         * A reference to the Rendering Context belonging to the Canvas Element this game is rendering to.\r\n         * If the game is running under Canvas it will be a 2d Canvas Rendering Context.\r\n         * If the game is running under WebGL it will be a WebGL Rendering Context.\r\n         * This context is created automatically by Phaser unless you provide a `context` property\r\n         * in your Game Config.\r\n         *\r\n         * @name Phaser.Game#context\r\n         * @type {(CanvasRenderingContext2D|WebGLRenderingContext)}\r\n         * @since 3.0.0\r\n         */\r\n        this.context = null;\r\n\r\n        /**\r\n         * A flag indicating when this Game instance has finished its boot process.\r\n         *\r\n         * @name Phaser.Game#isBooted\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isBooted = false;\r\n\r\n        /**\r\n         * A flag indicating if this Game is currently running its game step or not.\r\n         *\r\n         * @name Phaser.Game#isRunning\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * An Event Emitter which is used to broadcast game-level events from the global systems.\r\n         *\r\n         * @name Phaser.Game#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = new EventEmitter();\r\n\r\n        /**\r\n         * An instance of the Animation Manager.\r\n         *\r\n         * The Animation Manager is a global system responsible for managing all animations used within your game.\r\n         *\r\n         * @name Phaser.Game#anims\r\n         * @type {Phaser.Animations.AnimationManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.anims = new AnimationManager(this);\r\n\r\n        /**\r\n         * An instance of the Texture Manager.\r\n         *\r\n         * The Texture Manager is a global system responsible for managing all textures being used by your game.\r\n         *\r\n         * @name Phaser.Game#textures\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.textures = new TextureManager(this);\r\n\r\n        /**\r\n         * An instance of the Cache Manager.\r\n         *\r\n         * The Cache Manager is a global system responsible for caching, accessing and releasing external game assets.\r\n         *\r\n         * @name Phaser.Game#cache\r\n         * @type {Phaser.Cache.CacheManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.cache = new CacheManager(this);\r\n\r\n        /**\r\n         * An instance of the Data Manager\r\n         *\r\n         * @name Phaser.Game#registry\r\n         * @type {Phaser.Data.DataManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.registry = new DataManager(this);\r\n\r\n        /**\r\n         * An instance of the Input Manager.\r\n         *\r\n         * The Input Manager is a global system responsible for the capture of browser-level input events.\r\n         *\r\n         * @name Phaser.Game#input\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.input = new InputManager(this, this.config);\r\n\r\n        /**\r\n         * An instance of the Scene Manager.\r\n         *\r\n         * The Scene Manager is a global system responsible for creating, modifying and updating the Scenes in your game.\r\n         *\r\n         * @name Phaser.Game#scene\r\n         * @type {Phaser.Scenes.SceneManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = new SceneManager(this, this.config.sceneConfig);\r\n\r\n        /**\r\n         * A reference to the Device inspector.\r\n         *\r\n         * Contains information about the device running this game, such as OS, browser vendor and feature support.\r\n         * Used by various systems to determine capabilities and code paths.\r\n         *\r\n         * @name Phaser.Game#device\r\n         * @type {Phaser.DeviceConf}\r\n         * @since 3.0.0\r\n         */\r\n        this.device = Device;\r\n\r\n        /**\r\n         * An instance of the Scale Manager.\r\n         *\r\n         * The Scale Manager is a global system responsible for handling scaling of the game canvas.\r\n         *\r\n         * @name Phaser.Game#scale\r\n         * @type {Phaser.Scale.ScaleManager}\r\n         * @since 3.16.0\r\n         */\r\n        this.scale = new ScaleManager(this, this.config);\r\n\r\n        /**\r\n         * An instance of the base Sound Manager.\r\n         *\r\n         * The Sound Manager is a global system responsible for the playback and updating of all audio in your game.\r\n         *\r\n         * You can disable the inclusion of the Sound Manager in your build by toggling the webpack `FEATURE_SOUND` flag.\r\n         *\r\n         * @name Phaser.Game#sound\r\n         * @type {(Phaser.Sound.NoAudioSoundManager|Phaser.Sound.HTML5AudioSoundManager|Phaser.Sound.WebAudioSoundManager)}\r\n         * @since 3.0.0\r\n         */\r\n        this.sound = null;\r\n\r\n        if (typeof FEATURE_SOUND)\r\n        {\r\n            this.sound = SoundManagerCreator.create(this);\r\n        }\r\n\r\n        /**\r\n         * An instance of the Time Step.\r\n         *\r\n         * The Time Step is a global system responsible for setting-up and responding to the browser frame events, processing\r\n         * them and calculating delta values. It then automatically calls the game step.\r\n         *\r\n         * @name Phaser.Game#loop\r\n         * @type {Phaser.Core.TimeStep}\r\n         * @since 3.0.0\r\n         */\r\n        this.loop = new TimeStep(this, this.config.fps);\r\n\r\n        /**\r\n         * An instance of the Plugin Manager.\r\n         *\r\n         * The Plugin Manager is a global system that allows plugins to register themselves with it, and can then install\r\n         * those plugins into Scenes as required.\r\n         *\r\n         * @name Phaser.Game#plugins\r\n         * @type {Phaser.Plugins.PluginManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.plugins = new PluginManager(this, this.config);\r\n\r\n        if (typeof PLUGIN_FBINSTANT)\r\n        {\r\n            /**\r\n             * An instance of the Facebook Instant Games Plugin.\r\n             *\r\n             * This will only be available if the plugin has been built into Phaser,\r\n             * or you're using the special Facebook Instant Games custom build.\r\n             *\r\n             * @name Phaser.Game#facebook\r\n             * @type {Phaser.FacebookInstantGamesPlugin}\r\n             * @since 3.13.0\r\n             */\r\n            this.facebook = new FacebookInstantGamesPlugin(this);\r\n        }\r\n\r\n        /**\r\n         * Is this Game pending destruction at the start of the next frame?\r\n         *\r\n         * @name Phaser.Game#pendingDestroy\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.pendingDestroy = false;\r\n\r\n        /**\r\n         * Remove the Canvas once the destroy is over?\r\n         *\r\n         * @name Phaser.Game#removeCanvas\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.removeCanvas = false;\r\n\r\n        /**\r\n         * Remove everything when the game is destroyed.\r\n         * You cannot create a new Phaser instance on the same web page after doing this.\r\n         *\r\n         * @name Phaser.Game#noReturn\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this.noReturn = false;\r\n\r\n        /**\r\n         * Does the window the game is running in currently have focus or not?\r\n         * This is modified by the VisibilityHandler.\r\n         *\r\n         * @name Phaser.Game#hasFocus\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.9.0\r\n         */\r\n        this.hasFocus = false;\r\n\r\n        //  Wait for the DOM Ready event, then call boot.\r\n        DOMContentLoaded(this.boot.bind(this));\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically when the DOM is ready. It is responsible for creating the renderer,\r\n     * displaying the Debug Header, adding the game canvas to the DOM and emitting the 'boot' event.\r\n     * It listens for a 'ready' event from the base systems and once received it will call `Game.start`.\r\n     *\r\n     * @method Phaser.Game#boot\r\n     * @protected\r\n     * @fires Phaser.Core.Events#BOOT\r\n     * @listens Phaser.Textures.Events#READY\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        if (!PluginCache.hasCore('EventEmitter'))\r\n        {\r\n            console.warn('Aborting. Core Plugins missing.');\r\n            return;\r\n        }\r\n\r\n        this.isBooted = true;\r\n\r\n        this.config.preBoot(this);\r\n\r\n        this.scale.preBoot();\r\n\r\n        CreateRenderer(this);\r\n\r\n        CreateDOMContainer(this);\r\n\r\n        DebugHeader(this);\r\n\r\n        AddToDOM(this.canvas, this.config.parent);\r\n\r\n        //  The Texture Manager has to wait on a couple of non-blocking events before it's fully ready.\r\n        //  So it will emit this internal event when done:\r\n        this.textures.once(TextureEvents.READY, this.texturesReady, this);\r\n\r\n        this.events.emit(Events.BOOT);\r\n    },\r\n\r\n    /**\r\n     * Called automatically when the Texture Manager has finished setting up and preparing the\r\n     * default textures.\r\n     *\r\n     * @method Phaser.Game#texturesReady\r\n     * @private\r\n     * @fires Phaser.Game#READY\r\n     * @since 3.12.0\r\n     */\r\n    texturesReady: function ()\r\n    {\r\n        //  Start all the other systems\r\n        this.events.emit(Events.READY);\r\n\r\n        this.start();\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Game.boot once all of the global systems have finished setting themselves up.\r\n     * By this point the Game is now ready to start the main loop running.\r\n     * It will also enable the Visibility Handler.\r\n     *\r\n     * @method Phaser.Game#start\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    start: function ()\r\n    {\r\n        this.isRunning = true;\r\n\r\n        this.config.postBoot(this);\r\n\r\n        if (this.renderer)\r\n        {\r\n            this.loop.start(this.step.bind(this));\r\n        }\r\n        else\r\n        {\r\n            this.loop.start(this.headlessStep.bind(this));\r\n        }\r\n\r\n        VisibilityHandler(this);\r\n\r\n        var eventEmitter = this.events;\r\n\r\n        eventEmitter.on(Events.HIDDEN, this.onHidden, this);\r\n        eventEmitter.on(Events.VISIBLE, this.onVisible, this);\r\n        eventEmitter.on(Events.BLUR, this.onBlur, this);\r\n        eventEmitter.on(Events.FOCUS, this.onFocus, this);\r\n    },\r\n\r\n    /**\r\n     * The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\r\n     * Request Animation Frame, or Set Timeout on very old browsers.)\r\n     *\r\n     * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\r\n     *\r\n     * It will then render each Scene in turn, via the Renderer. This process emits `prerender` and `postrender` events.\r\n     *\r\n     * @method Phaser.Game#step\r\n     * @fires Phaser.Core.Events#PRE_STEP\r\n     * @fires Phaser.Core.Events#STEP\r\n     * @fires Phaser.Core.Events#POST_STEP\r\n     * @fires Phaser.Core.Events#PRE_RENDER\r\n     * @fires Phaser.Core.Events#POST_RENDER\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    step: function (time, delta)\r\n    {\r\n        if (this.pendingDestroy)\r\n        {\r\n            return this.runDestroy();\r\n        }\r\n\r\n        var eventEmitter = this.events;\r\n\r\n        //  Global Managers like Input and Sound update in the prestep\r\n\r\n        eventEmitter.emit(Events.PRE_STEP, time, delta);\r\n\r\n        //  This is mostly meant for user-land code and plugins\r\n\r\n        eventEmitter.emit(Events.STEP, time, delta);\r\n\r\n        //  Update the Scene Manager and all active Scenes\r\n\r\n        this.scene.update(time, delta);\r\n\r\n        //  Our final event before rendering starts\r\n\r\n        eventEmitter.emit(Events.POST_STEP, time, delta);\r\n\r\n        var renderer = this.renderer;\r\n\r\n        //  Run the Pre-render (clearing the canvas, setting background colors, etc)\r\n\r\n        renderer.preRender();\r\n\r\n        eventEmitter.emit(Events.PRE_RENDER, renderer, time, delta);\r\n\r\n        //  The main render loop. Iterates all Scenes and all Cameras in those scenes, rendering to the renderer instance.\r\n\r\n        this.scene.render(renderer);\r\n\r\n        //  The Post-Render call. Tidies up loose end, takes snapshots, etc.\r\n\r\n        renderer.postRender();\r\n\r\n        //  The final event before the step repeats. Your last chance to do anything to the canvas before it all starts again.\r\n\r\n        eventEmitter.emit(Events.POST_RENDER, renderer, time, delta);\r\n    },\r\n\r\n    /**\r\n     * A special version of the Game Step for the HEADLESS renderer only.\r\n     *\r\n     * The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\r\n     * Request Animation Frame, or Set Timeout on very old browsers.)\r\n     *\r\n     * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\r\n     *\r\n     * This process emits `prerender` and `postrender` events, even though nothing actually displays.\r\n     *\r\n     * @method Phaser.Game#headlessStep\r\n     * @fires Phaser.Game#PRE_RENDER\r\n     * @fires Phaser.Game#POST_RENDER\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    headlessStep: function (time, delta)\r\n    {\r\n        if (this.pendingDestroy)\r\n        {\r\n            return this.runDestroy();\r\n        }\r\n\r\n        var eventEmitter = this.events;\r\n\r\n        //  Global Managers\r\n\r\n        eventEmitter.emit(Events.PRE_STEP, time, delta);\r\n\r\n        eventEmitter.emit(Events.STEP, time, delta);\r\n\r\n        //  Scenes\r\n\r\n        this.scene.update(time, delta);\r\n\r\n        eventEmitter.emit(Events.POST_STEP, time, delta);\r\n\r\n        //  Render\r\n\r\n        eventEmitter.emit(Events.PRE_RENDER);\r\n\r\n        eventEmitter.emit(Events.POST_RENDER);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will pause the main loop and then emit a pause event.\r\n     *\r\n     * @method Phaser.Game#onHidden\r\n     * @protected\r\n     * @fires Phaser.Core.Events#PAUSE\r\n     * @since 3.0.0\r\n     */\r\n    onHidden: function ()\r\n    {\r\n        this.loop.pause();\r\n\r\n        this.events.emit(Events.PAUSE);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will resume the main loop and then emit a resume event.\r\n     *\r\n     * @method Phaser.Game#onVisible\r\n     * @protected\r\n     * @fires Phaser.Core.Events#RESUME\r\n     * @since 3.0.0\r\n     */\r\n    onVisible: function ()\r\n    {\r\n        this.loop.resume();\r\n\r\n        this.events.emit(Events.RESUME);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will set the main loop into a 'blurred' state, which pauses it.\r\n     *\r\n     * @method Phaser.Game#onBlur\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        this.hasFocus = false;\r\n\r\n        this.loop.blur();\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will set the main loop into a 'focused' state, which resumes it.\r\n     *\r\n     * @method Phaser.Game#onFocus\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        this.hasFocus = true;\r\n\r\n        this.loop.focus();\r\n    },\r\n\r\n    /**\r\n     * Returns the current game frame.\r\n     *\r\n     * When the game starts running, the frame is incremented every time Request Animation Frame, or Set Timeout, fires.\r\n     *\r\n     * @method Phaser.Game#getFrame\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The current game frame.\r\n     */\r\n    getFrame: function ()\r\n    {\r\n        return this.loop.frame;\r\n    },\r\n\r\n    /**\r\n     * Returns the time that the current game step started at, as based on `performance.now`.\r\n     *\r\n     * @method Phaser.Game#getTime\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The current game timestamp.\r\n     */\r\n    getTime: function ()\r\n    {\r\n        return this.loop.now;\r\n    },\r\n\r\n    /**\r\n     * Flags this Game instance as needing to be destroyed on the _next frame_, making this an asynchronous operation.\r\n     *\r\n     * It will wait until the current frame has completed and then call `runDestroy` internally.\r\n     *\r\n     * If you need to react to the games eventual destruction, listen for the `DESTROY` event.\r\n     *\r\n     * If you **do not** need to run Phaser again on the same web page you can set the `noReturn` argument to `true` and it will free-up\r\n     * memory being held by the core Phaser plugins. If you do need to create another game instance on the same page, leave this as `false`.\r\n     *\r\n     * @method Phaser.Game#destroy\r\n     * @fires Phaser.Core.Events#DESTROY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} removeCanvas - Set to `true` if you would like the parent canvas element removed from the DOM, or `false` to leave it in place.\r\n     * @param {boolean} [noReturn=false] - If `true` all the core Phaser plugins are destroyed. You cannot create another instance of Phaser on the same web page if you do this.\r\n     */\r\n    destroy: function (removeCanvas, noReturn)\r\n    {\r\n        if (noReturn === undefined) { noReturn = false; }\r\n\r\n        this.pendingDestroy = true;\r\n\r\n        this.removeCanvas = removeCanvas;\r\n        this.noReturn = noReturn;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Phaser.Game instance, all global systems, all sub-systems and all Scenes.\r\n     *\r\n     * @method Phaser.Game#runDestroy\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    runDestroy: function ()\r\n    {\r\n        this.scene.destroy();\r\n\r\n        this.events.emit(Events.DESTROY);\r\n\r\n        this.events.removeAllListeners();\r\n\r\n        if (this.renderer)\r\n        {\r\n            this.renderer.destroy();\r\n        }\r\n\r\n        if (this.removeCanvas && this.canvas)\r\n        {\r\n            CanvasPool.remove(this.canvas);\r\n\r\n            if (this.canvas.parentNode)\r\n            {\r\n                this.canvas.parentNode.removeChild(this.canvas);\r\n            }\r\n        }\r\n\r\n        if (this.domContainer)\r\n        {\r\n            this.domContainer.parentNode.removeChild(this.domContainer);\r\n        }\r\n\r\n        this.loop.destroy();\r\n\r\n        this.pendingDestroy = false;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Game;\r\n\r\n/**\r\n * \"Computers are good at following instructions, but not at reading your mind.\" - Donald Knuth\r\n */\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Adds the given element to the DOM. If a parent is provided the element is added as a child of the parent, providing it was able to access it.\r\n * If no parent was given it falls back to using `document.body`.\r\n *\r\n * @function Phaser.DOM.AddToDOM\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLElement} element - The element to be added to the DOM. Usually a Canvas object.\r\n * @param {(string|HTMLElement)} [parent] - The parent in which to add the element. Can be a string which is passed to `getElementById` or an actual DOM object.\r\n *\r\n * @return {HTMLElement} The element that was added to the DOM.\r\n */\r\nvar AddToDOM = function (element, parent)\r\n{\r\n    var target;\r\n\r\n    if (parent)\r\n    {\r\n        if (typeof parent === 'string')\r\n        {\r\n            //  Hopefully an element ID\r\n            target = document.getElementById(parent);\r\n        }\r\n        else if (typeof parent === 'object' && parent.nodeType === 1)\r\n        {\r\n            //  Quick test for a HTMLElement\r\n            target = parent;\r\n        }\r\n    }\r\n    else if (element.parentElement || parent === null)\r\n    {\r\n        return element;\r\n    }\r\n\r\n    //  Fallback, covers an invalid ID and a non HTMLElement object\r\n    if (!target)\r\n    {\r\n        target = document.body;\r\n    }\r\n\r\n    target.appendChild(element);\r\n\r\n    return element;\r\n};\r\n\r\nmodule.exports = AddToDOM;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar AddToDOM = require('../dom/AddToDOM');\r\n\r\nvar CreateDOMContainer = function (game)\r\n{\r\n    var config = game.config;\r\n\r\n    if (!config.parent || !config.domCreateContainer)\r\n    {\r\n        return;\r\n    }\r\n\r\n    //  DOM Element Container\r\n    var div = document.createElement('div');\r\n\r\n    div.style.cssText = [\r\n        'display: block;',\r\n        'width: ' + game.scale.width + 'px;',\r\n        'height: ' + game.scale.height + 'px;',\r\n        'padding: 0; margin: 0;',\r\n        'position: absolute;',\r\n        'overflow: hidden;',\r\n        'pointer-events: ' + config.domPointerEvents + ';',\r\n        'transform: scale(1);',\r\n        'transform-origin: left top;'\r\n    ].join(' ');\r\n\r\n    game.domContainer = div;\r\n\r\n    AddToDOM(div, config.parent);\r\n};\r\n\r\nmodule.exports = CreateDOMContainer;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar OS = require('../device/OS');\r\n\r\n/**\r\n * @callback ContentLoadedCallback\r\n */\r\n\r\n/**\r\n * Inspects the readyState of the document. If the document is already complete then it invokes the given callback.\r\n * If not complete it sets up several event listeners such as `deviceready`, and once those fire, it invokes the callback.\r\n * Called automatically by the Phaser.Game instance. Should not usually be accessed directly.\r\n *\r\n * @function Phaser.DOM.DOMContentLoaded\r\n * @since 3.0.0\r\n *\r\n * @param {ContentLoadedCallback} callback - The callback to be invoked when the device is ready and the DOM content is loaded.\r\n */\r\nvar DOMContentLoaded = function (callback)\r\n{\r\n    if (document.readyState === 'complete' || document.readyState === 'interactive')\r\n    {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n\r\n    var check = function ()\r\n    {\r\n        document.removeEventListener('deviceready', check, true);\r\n        document.removeEventListener('DOMContentLoaded', check, true);\r\n        window.removeEventListener('load', check, true);\r\n\r\n        callback();\r\n    };\r\n\r\n    if (!document.body)\r\n    {\r\n        window.setTimeout(check, 20);\r\n    }\r\n    else if (OS.cordova)\r\n    {\r\n        //  Ref. http://docs.phonegap.com/en/3.5.0/cordova_events_events.md.html#deviceready\r\n        document.addEventListener('deviceready', check, false);\r\n    }\r\n    else\r\n    {\r\n        document.addEventListener('DOMContentLoaded', check, true);\r\n        window.addEventListener('load', check, true);\r\n    }\r\n};\r\n\r\nmodule.exports = DOMContentLoaded;\r\n"],"names":["Class","CustomMap","EventEmitter","Events","BaseCache","initialize","this","entries","events","add","key","data","set","emit","ADD","has","exists","get","remove","entry","delete","REMOVE","getKeys","keys","destroy","clear","removeAllListeners","module","exports","GameEvents","CacheManager","game","binary","bitmapFont","json","physics","shader","audio","video","text","html","obj","tilemap","xml","custom","once","DESTROY","addCustom","hasOwnProperty","i","length","AddToDOM","AnimationManager","CanvasPool","Config","CreateDOMContainer","CreateRenderer","DataManager","DebugHeader","Device","DOMContentLoaded","InputManager","PluginCache","PluginManager","ScaleManager","SceneManager","TextureEvents","TextureManager","TimeStep","VisibilityHandler","SoundManagerCreator","Game","config","renderer","domContainer","canvas","context","isBooted","isRunning","anims","textures","cache","registry","input","scene","sceneConfig","device","scale","sound","create","loop","fps","plugins","pendingDestroy","removeCanvas","noReturn","hasFocus","boot","bind","hasCore","preBoot","parent","READY","texturesReady","BOOT","console","warn","start","postBoot","step","headlessStep","eventEmitter","on","HIDDEN","onHidden","VISIBLE","onVisible","BLUR","onBlur","FOCUS","onFocus","time","delta","runDestroy","PRE_STEP","STEP","update","POST_STEP","preRender","PRE_RENDER","render","postRender","POST_RENDER","pause","PAUSE","resume","RESUME","blur","focus","getFrame","frame","getTime","now","undefined","parentNode","removeChild","element","target","document","getElementById","nodeType","parentElement","body","appendChild","domCreateContainer","div","createElement","style","cssText","width","height","domPointerEvents","join","OS","callback","readyState","check","removeEventListener","window","cordova","addEventListener","setTimeout"],"sourceRoot":""}