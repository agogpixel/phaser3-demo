{"version":3,"file":"js/8127.0619ee06a6f85c7d7640.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/circle/Circle.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/circle/Circumference.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/circle/CircumferencePoint.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/circle/Contains.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/circle/GetPoint.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/circle/GetPoints.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/circle/Random.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/ellipse/Random.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/line/BresenhamPoints.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/rectangle/MarchingAnts.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/triangle/Random.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar GEOM_CONST = require('../const');\r\nvar Random = require('./Random');\r\n\r\n/**\r\n * @classdesc\r\n * A Circle object.\r\n *\r\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render a Circle you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Circle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x position of the center of the circle.\r\n * @param {number} [y=0] - The y position of the center of the circle.\r\n * @param {number} [radius=0] - The radius of the circle.\r\n */\r\nvar Circle = new Class({\r\n\r\n    initialize:\r\n\r\n    function Circle (x, y, radius)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (radius === undefined) { radius = 0; }\r\n\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.CIRCLE`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Circle#type\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.CIRCLE;\r\n\r\n        /**\r\n         * The x position of the center of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The y position of the center of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The internal radius of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#_radius\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._radius = radius;\r\n\r\n        /**\r\n         * The internal diameter of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#_diameter\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._diameter = radius * 2;\r\n    },\r\n\r\n    /**\r\n     * Check to see if the Circle contains the given x / y coordinates.\r\n     *\r\n     * @method Phaser.Geom.Circle#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to check within the circle.\r\n     * @param {number} y - The y coordinate to check within the circle.\r\n     *\r\n     * @return {boolean} True if the coordinates are within the circle, otherwise false.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Returns a Point object containing the coordinates of a point on the circumference of the Circle\r\n     * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n     * at 180 degrees around the circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [out,$return]\r\n     *\r\n     * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the circle.\r\n     * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the circle.\r\n     */\r\n    getPoint: function (position, point)\r\n    {\r\n        return GetPoint(this, position, point);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n     * based on the given quantity or stepRate values.\r\n     *\r\n     * @method Phaser.Geom.Circle#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {number} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n     * @param {number} [stepRate] - Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} An array of Point objects pertaining to the points around the circumference of the circle.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Returns a uniformly distributed random point from anywhere within the Circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {(Phaser.Geom.Point|object)} [point] - A Point or point-like object to set the random `x` and `y` values in.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Sets the x, y and radius of this circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The x position of the center of the circle.\r\n     * @param {number} [y=0] - The y position of the center of the circle.\r\n     * @param {number} [radius=0] - The radius of the circle.\r\n     *\r\n     * @return {this} This Circle object.\r\n     */\r\n    setTo: function (x, y, radius)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this._radius = radius;\r\n        this._diameter = radius * 2;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets this Circle to be empty with a radius of zero.\r\n     * Does not change its position.\r\n     *\r\n     * @method Phaser.Geom.Circle#setEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Circle object.\r\n     */\r\n    setEmpty: function ()\r\n    {\r\n        this._radius = 0;\r\n        this._diameter = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the position of this Circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The x position of the center of the circle.\r\n     * @param {number} [y=0] - The y position of the center of the circle.\r\n     *\r\n     * @return {this} This Circle object.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the Circle is empty: has a radius of zero.\r\n     *\r\n     * @method Phaser.Geom.Circle#isEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} True if the Circle is empty, otherwise false.\r\n     */\r\n    isEmpty: function ()\r\n    {\r\n        return (this._radius <= 0);\r\n    },\r\n\r\n    /**\r\n     * The radius of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#radius\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    radius: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._radius = value;\r\n            this._diameter = value * 2;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The diameter of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#diameter\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    diameter: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._diameter;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._diameter = value;\r\n            this._radius = value * 0.5;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The left position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x - this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value + this._radius;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The right position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value - this._radius;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The top position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y - this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value + this._radius;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The bottom position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value - this._radius;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Circle;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns the circumference of the given Circle.\r\n *\r\n * @function Phaser.Geom.Circle.Circumference\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get the circumference of.\r\n *\r\n * @return {number} The circumference of the Circle.\r\n */\r\nvar Circumference = function (circle)\r\n{\r\n    return 2 * (Math.PI * circle.radius);\r\n};\r\n\r\nmodule.exports = Circumference;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a Point object containing the coordinates of a point on the circumference of the Circle based on the given angle.\r\n *\r\n * @function Phaser.Geom.Circle.CircumferencePoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get the circumference point on.\r\n * @param {number} angle - The angle from the center of the Circle to the circumference to return the point from. Given in radians.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point, or point-like object, to store the results in. If not given a Point will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object where the `x` and `y` properties are the point on the circumference.\r\n */\r\nvar CircumferencePoint = function (circle, angle, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    out.x = circle.x + (circle.radius * Math.cos(angle));\r\n    out.y = circle.y + (circle.radius * Math.sin(angle));\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = CircumferencePoint;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Check to see if the Circle contains the given x / y coordinates.\r\n *\r\n * @function Phaser.Geom.Circle.Contains\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to check.\r\n * @param {number} x - The x coordinate to check within the circle.\r\n * @param {number} y - The y coordinate to check within the circle.\r\n *\r\n * @return {boolean} True if the coordinates are within the circle, otherwise false.\r\n */\r\nvar Contains = function (circle, x, y)\r\n{\r\n    //  Check if x/y are within the bounds first\r\n    if (circle.radius > 0 && x >= circle.left && x <= circle.right && y >= circle.top && y <= circle.bottom)\r\n    {\r\n        var dx = (circle.x - x) * (circle.x - x);\r\n        var dy = (circle.y - y) * (circle.y - y);\r\n\r\n        return (dx + dy) <= (circle.radius * circle.radius);\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n};\r\n\r\nmodule.exports = Contains;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CircumferencePoint = require('./CircumferencePoint');\r\nvar FromPercent = require('../../math/FromPercent');\r\nvar MATH_CONST = require('../../math/const');\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a Point object containing the coordinates of a point on the circumference of the Circle\r\n * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n * at 180 degrees around the circle.\r\n *\r\n * @function Phaser.Geom.Circle.GetPoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get the circumference point on.\r\n * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the circle.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the circle.\r\n */\r\nvar GetPoint = function (circle, position, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var angle = FromPercent(position, 0, MATH_CONST.PI2);\r\n\r\n    return CircumferencePoint(circle, angle, out);\r\n};\r\n\r\nmodule.exports = GetPoint;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Circumference = require('./Circumference');\r\nvar CircumferencePoint = require('./CircumferencePoint');\r\nvar FromPercent = require('../../math/FromPercent');\r\nvar MATH_CONST = require('../../math/const');\r\n\r\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n * based on the given quantity or stepRate values.\r\n *\r\n * @function Phaser.Geom.Circle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get the points from.\r\n * @param {number} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n * @param {number} [stepRate] - Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\r\n * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the circumference of the circle.\r\n */\r\nvar GetPoints = function (circle, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity && stepRate > 0)\r\n    {\r\n        quantity = Circumference(circle) / stepRate;\r\n    }\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var angle = FromPercent(i / quantity, 0, MATH_CONST.PI2);\r\n\r\n        out.push(CircumferencePoint(circle, angle));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a uniformly distributed random point from anywhere within the given Circle.\r\n *\r\n * @function Phaser.Geom.Circle.Random\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get a random point from.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point or point-like object to set the random `x` and `y` values in.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n */\r\nvar Random = function (circle, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var t = 2 * Math.PI * Math.random();\r\n    var u = Math.random() + Math.random();\r\n    var r = (u > 1) ? 2 - u : u;\r\n    var x = r * Math.cos(t);\r\n    var y = r * Math.sin(t);\r\n\r\n    out.x = circle.x + (x * circle.radius);\r\n    out.y = circle.y + (y * circle.radius);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Random;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a uniformly distributed random point from anywhere within the given Ellipse.\r\n *\r\n * @function Phaser.Geom.Ellipse.Random\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to get a random point from.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point or point-like object to set the random `x` and `y` values in.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n */\r\nvar Random = function (ellipse, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var p = Math.random() * Math.PI * 2;\r\n    var s = Math.sqrt(Math.random());\r\n\r\n    out.x = ellipse.x + ((s * Math.cos(p)) * ellipse.width / 2);\r\n    out.y = ellipse.y + ((s * Math.sin(p)) * ellipse.height / 2);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Random;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Using Bresenham's line algorithm this will return an array of all coordinates on this line.\r\n *\r\n * The `start` and `end` points are rounded before this runs as the algorithm works on integers.\r\n *\r\n * @function Phaser.Geom.Line.BresenhamPoints\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line.\r\n * @param {number} [stepRate=1] - The optional step rate for the points on the line.\r\n * @param {Phaser.Types.Math.Vector2Like[]} [results] - An optional array to push the resulting coordinates into.\r\n *\r\n * @return {Phaser.Types.Math.Vector2Like[]} The array of coordinates on the line.\r\n */\r\nvar BresenhamPoints = function (line, stepRate, results)\r\n{\r\n    if (stepRate === undefined) { stepRate = 1; }\r\n    if (results === undefined) { results = []; }\r\n\r\n    var x1 = Math.round(line.x1);\r\n    var y1 = Math.round(line.y1);\r\n    var x2 = Math.round(line.x2);\r\n    var y2 = Math.round(line.y2);\r\n\r\n    var dx = Math.abs(x2 - x1);\r\n    var dy = Math.abs(y2 - y1);\r\n    var sx = (x1 < x2) ? 1 : -1;\r\n    var sy = (y1 < y2) ? 1 : -1;\r\n    var err = dx - dy;\r\n\r\n    results.push({ x: x1, y: y1 });\r\n\r\n    var i = 1;\r\n\r\n    while (!((x1 === x2) && (y1 === y2)))\r\n    {\r\n        var e2 = err << 1;\r\n\r\n        if (e2 > -dy)\r\n        {\r\n            err -= dy;\r\n            x1 += sx;\r\n        }\r\n\r\n        if (e2 < dx)\r\n        {\r\n            err += dx;\r\n            y1 += sy;\r\n        }\r\n\r\n        if (i % stepRate === 0)\r\n        {\r\n            results.push({ x: x1, y: y1 });\r\n        }\r\n\r\n        i++;\r\n    }\r\n\r\n    return results;\r\n};\r\n\r\nmodule.exports = BresenhamPoints;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Perimeter = require('./Perimeter');\r\nvar Point = require('../point/Point');\r\n\r\n\r\n/**\r\n * Returns an array of points from the perimeter of the Rectangle, where each point is spaced out based\r\n * on either the `step` value, or the `quantity`.\r\n *\r\n * @function Phaser.Geom.Rectangle.MarchingAnts\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - The Rectangle to get the perimeter points from.\r\n * @param {number} [step] - The distance between each point of the perimeter. Set to `null` if you wish to use the `quantity` parameter instead.\r\n * @param {number} [quantity] - The total number of points to return. The step is then calculated based on the length of the Rectangle, divided by this value.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An array in which the perimeter points will be stored. If not given, a new array instance is created.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array containing the perimeter points from the Rectangle.\r\n */\r\nvar MarchingAnts = function (rect, step, quantity, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    if (!step && !quantity)\r\n    {\r\n        //  Bail out\r\n        return out;\r\n    }\r\n\r\n    //  If step is a falsey value (false, null, 0, undefined, etc) then we calculate\r\n    //  it based on the quantity instead, otherwise we always use the step value\r\n    if (!step)\r\n    {\r\n        step = Perimeter(rect) / quantity;\r\n    }\r\n    else\r\n    {\r\n        quantity = Math.round(Perimeter(rect) / step);\r\n    }\r\n\r\n    var x = rect.x;\r\n    var y = rect.y;\r\n    var face = 0;\r\n\r\n    //  Loop across each face of the rectangle\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        out.push(new Point(x, y));\r\n\r\n        switch (face)\r\n        {\r\n\r\n            //  Top face\r\n            case 0:\r\n                x += step;\r\n\r\n                if (x >= rect.right)\r\n                {\r\n                    face = 1;\r\n                    y += (x - rect.right);\r\n                    x = rect.right;\r\n                }\r\n                break;\r\n\r\n            //  Right face\r\n            case 1:\r\n                y += step;\r\n\r\n                if (y >= rect.bottom)\r\n                {\r\n                    face = 2;\r\n                    x -= (y - rect.bottom);\r\n                    y = rect.bottom;\r\n                }\r\n                break;\r\n\r\n            //  Bottom face\r\n            case 2:\r\n                x -= step;\r\n\r\n                if (x <= rect.left)\r\n                {\r\n                    face = 3;\r\n                    y -= (rect.left - x);\r\n                    x = rect.left;\r\n                }\r\n                break;\r\n\r\n            //  Left face\r\n            case 3:\r\n                y -= step;\r\n\r\n                if (y <= rect.top)\r\n                {\r\n                    face = 0;\r\n                    y = rect.top;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = MarchingAnts;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a random Point from within the area of the given Triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.Random\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to get a random point from.\r\n * @param {Phaser.Geom.Point} [out] - The Point object to store the position in. If not given, a new Point instance is created.\r\n *\r\n * @return {Phaser.Geom.Point} A Point object holding the coordinates of a random position within the Triangle.\r\n */\r\nvar Random = function (triangle, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    //  Basis vectors\r\n    var ux = triangle.x2 - triangle.x1;\r\n    var uy = triangle.y2 - triangle.y1;\r\n\r\n    var vx = triangle.x3 - triangle.x1;\r\n    var vy = triangle.y3 - triangle.y1;\r\n\r\n    //  Random point within the unit square\r\n    var r = Math.random();\r\n    var s = Math.random();\r\n\r\n    //  Point outside the triangle? Remap it.\r\n    if (r + s >= 1)\r\n    {\r\n        r = 1 - r;\r\n        s = 1 - s;\r\n    }\r\n\r\n    out.x = triangle.x1 + ((ux * r) + (vx * s));\r\n    out.y = triangle.y1 + ((uy * r) + (vy * s));\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Random;\r\n"],"names":["Class","Contains","GetPoint","GetPoints","GEOM_CONST","Random","Circle","initialize","x","y","radius","undefined","this","type","CIRCLE","_radius","_diameter","contains","getPoint","position","point","getPoints","quantity","stepRate","output","getRandomPoint","setTo","setEmpty","setPosition","isEmpty","get","set","value","diameter","left","right","top","bottom","module","exports","circle","Math","PI","Point","angle","out","cos","sin","CircumferencePoint","FromPercent","MATH_CONST","PI2","Circumference","i","push","t","random","u","r","ellipse","p","s","sqrt","width","height","line","results","x1","round","y1","x2","y2","dx","abs","dy","sx","sy","err","e2","Perimeter","rect","step","face","triangle","ux","uy","vx","x3","vy","y3"],"sourceRoot":""}