{"version":3,"file":"js/5380.65f961743abd1f363eb3.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/const.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/line/GetPoint.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/line/GetPoints.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/line/Length.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/line/Line.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/line/Random.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/point/Point.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/rectangle/Contains.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/rectangle/GetPoint.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/rectangle/GetPoints.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/rectangle/Perimeter.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/rectangle/Random.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/rectangle/Rectangle.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GEOM_CONST = {\r\n\r\n    /**\r\n     * A Circle Geometry object type.\r\n     * \r\n     * @name Phaser.Geom.CIRCLE\r\n     * @type {number}\r\n     * @since 3.19.0\r\n     */\r\n    CIRCLE: 0,\r\n\r\n    /**\r\n     * An Ellipse Geometry object type.\r\n     * \r\n     * @name Phaser.Geom.ELLIPSE\r\n     * @type {number}\r\n     * @since 3.19.0\r\n     */\r\n    ELLIPSE: 1,\r\n\r\n    /**\r\n     * A Line Geometry object type.\r\n     * \r\n     * @name Phaser.Geom.LINE\r\n     * @type {number}\r\n     * @since 3.19.0\r\n     */\r\n    LINE: 2,\r\n\r\n    /**\r\n     * A Point Geometry object type.\r\n     * \r\n     * @name Phaser.Geom.POINT\r\n     * @type {number}\r\n     * @since 3.19.0\r\n     */\r\n    POINT: 3,\r\n\r\n    /**\r\n     * A Polygon Geometry object type.\r\n     * \r\n     * @name Phaser.Geom.POLYGON\r\n     * @type {number}\r\n     * @since 3.19.0\r\n     */\r\n    POLYGON: 4,\r\n\r\n    /**\r\n     * A Rectangle Geometry object type.\r\n     * \r\n     * @name Phaser.Geom.RECTANGLE\r\n     * @type {number}\r\n     * @since 3.19.0\r\n     */\r\n    RECTANGLE: 5,\r\n\r\n    /**\r\n     * A Triangle Geometry object type.\r\n     * \r\n     * @name Phaser.Geom.TRIANGLE\r\n     * @type {number}\r\n     * @since 3.19.0\r\n     */\r\n    TRIANGLE: 6\r\n\r\n};\r\n\r\nmodule.exports = GEOM_CONST;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Get a point on a line that's a given percentage along its length.\r\n *\r\n * @function Phaser.Geom.Line.GetPoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line.\r\n * @param {number} position - A value between 0 and 1, where 0 is the start, 0.5 is the middle and 1 is the end of the line.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An optional point, or point-like object, to store the coordinates of the point on the line.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} The point on the line.\r\n */\r\nvar GetPoint = function (line, position, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    out.x = line.x1 + (line.x2 - line.x1) * position;\r\n    out.y = line.y1 + (line.y2 - line.y1) * position;\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoint;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Length = require('./Length');\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Get a number of points along a line's length.\r\n *\r\n * Provide a `quantity` to get an exact number of points along the line.\r\n *\r\n * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\r\n * providing a `stepRate`.\r\n *\r\n * @function Phaser.Geom.Line.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line.\r\n * @param {number} quantity - The number of points to place on the line. Set to `0` to use `stepRate` instead.\r\n * @param {number} [stepRate] - The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An optional array of Points, or point-like objects, to store the coordinates of the points on the line.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array of Points, or point-like objects, containing the coordinates of the points on the line.\r\n */\r\nvar GetPoints = function (line, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity && stepRate > 0)\r\n    {\r\n        quantity = Length(line) / stepRate;\r\n    }\r\n\r\n    var x1 = line.x1;\r\n    var y1 = line.y1;\r\n\r\n    var x2 = line.x2;\r\n    var y2 = line.y2;\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var position = i / quantity;\r\n\r\n        var x = x1 + (x2 - x1) * position;\r\n        var y = y1 + (y2 - y1) * position;\r\n\r\n        out.push(new Point(x, y));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculate the length of the given line.\r\n *\r\n * @function Phaser.Geom.Line.Length\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line to calculate the length of.\r\n *\r\n * @return {number} The length of the line.\r\n */\r\nvar Length = function (line)\r\n{\r\n    return Math.sqrt((line.x2 - line.x1) * (line.x2 - line.x1) + (line.y2 - line.y1) * (line.y2 - line.y1));\r\n};\r\n\r\nmodule.exports = Length;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar GEOM_CONST = require('../const');\r\nvar Random = require('./Random');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * Defines a Line segment, a part of a line between two endpoints.\r\n *\r\n * @class Line\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x1=0] - The x coordinate of the lines starting point.\r\n * @param {number} [y1=0] - The y coordinate of the lines starting point.\r\n * @param {number} [x2=0] - The x coordinate of the lines ending point.\r\n * @param {number} [y2=0] - The y coordinate of the lines ending point.\r\n */\r\nvar Line = new Class({\r\n\r\n    initialize:\r\n\r\n    function Line (x1, y1, x2, y2)\r\n    {\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 0; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.LINE`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Line#type\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.LINE;\r\n\r\n        /**\r\n         * The x coordinate of the lines starting point.\r\n         *\r\n         * @name Phaser.Geom.Line#x1\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.x1 = x1;\r\n\r\n        /**\r\n         * The y coordinate of the lines starting point.\r\n         *\r\n         * @name Phaser.Geom.Line#y1\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.y1 = y1;\r\n\r\n        /**\r\n         * The x coordinate of the lines ending point.\r\n         *\r\n         * @name Phaser.Geom.Line#x2\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.x2 = x2;\r\n\r\n        /**\r\n         * The y coordinate of the lines ending point.\r\n         *\r\n         * @name Phaser.Geom.Line#y2\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.y2 = y2;\r\n    },\r\n\r\n    /**\r\n     * Get a point on a line that's a given percentage along its length.\r\n     *\r\n     * @method Phaser.Geom.Line#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [output,$return]\r\n     *\r\n     * @param {number} position - A value between 0 and 1, where 0 is the start, 0.5 is the middle and 1 is the end of the line.\r\n     * @param {(Phaser.Geom.Point|object)} [output] - An optional point, or point-like object, to store the coordinates of the point on the line.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point on the line.\r\n     */\r\n    getPoint: function (position, output)\r\n    {\r\n        return GetPoint(this, position, output);\r\n    },\r\n\r\n    /**\r\n     * Get a number of points along a line's length.\r\n     *\r\n     * Provide a `quantity` to get an exact number of points along the line.\r\n     *\r\n     * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\r\n     * providing a `stepRate`.\r\n     *\r\n     * @method Phaser.Geom.Line#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {number} quantity - The number of points to place on the line. Set to `0` to use `stepRate` instead.\r\n     * @param {number} [stepRate] - The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - An optional array of Points, or point-like objects, to store the coordinates of the points on the line.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} An array of Points, or point-like objects, containing the coordinates of the points on the line.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Get a random Point on the Line.\r\n     *\r\n     * @method Phaser.Geom.Line#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {(Phaser.Geom.Point|object)} [point] - An instance of a Point to be modified.\r\n     *\r\n     * @return {Phaser.Geom.Point} A random Point on the Line.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Set new coordinates for the line endpoints.\r\n     *\r\n     * @method Phaser.Geom.Line#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x1=0] - The x coordinate of the lines starting point.\r\n     * @param {number} [y1=0] - The y coordinate of the lines starting point.\r\n     * @param {number} [x2=0] - The x coordinate of the lines ending point.\r\n     * @param {number} [y2=0] - The y coordinate of the lines ending point.\r\n     *\r\n     * @return {this} This Line object.\r\n     */\r\n    setTo: function (x1, y1, x2, y2)\r\n    {\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 0; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns a Vector2 object that corresponds to the start of this Line.\r\n     *\r\n     * @method Phaser.Geom.Line#getPointA\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [vec2,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [vec2] - A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} A Vector2 object that corresponds to the start of this Line.\r\n     */\r\n    getPointA: function (vec2)\r\n    {\r\n        if (vec2 === undefined) { vec2 = new Vector2(); }\r\n\r\n        vec2.set(this.x1, this.y1);\r\n\r\n        return vec2;\r\n    },\r\n\r\n    /**\r\n     * Returns a Vector2 object that corresponds to the end of this Line.\r\n     *\r\n     * @method Phaser.Geom.Line#getPointB\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [vec2,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [vec2] - A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} A Vector2 object that corresponds to the end of this Line.\r\n     */\r\n    getPointB: function (vec2)\r\n    {\r\n        if (vec2 === undefined) { vec2 = new Vector2(); }\r\n\r\n        vec2.set(this.x2, this.y2);\r\n\r\n        return vec2;\r\n    },\r\n\r\n    /**\r\n     * The left position of the Line.\r\n     *\r\n     * @name Phaser.Geom.Line#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.min(this.x1, this.x2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.x1 <= this.x2)\r\n            {\r\n                this.x1 = value;\r\n            }\r\n            else\r\n            {\r\n                this.x2 = value;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The right position of the Line.\r\n     *\r\n     * @name Phaser.Geom.Line#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.max(this.x1, this.x2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.x1 > this.x2)\r\n            {\r\n                this.x1 = value;\r\n            }\r\n            else\r\n            {\r\n                this.x2 = value;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The top position of the Line.\r\n     *\r\n     * @name Phaser.Geom.Line#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.min(this.y1, this.y2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.y1 <= this.y2)\r\n            {\r\n                this.y1 = value;\r\n            }\r\n            else\r\n            {\r\n                this.y2 = value;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The bottom position of the Line.\r\n     *\r\n     * @name Phaser.Geom.Line#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.max(this.y1, this.y2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.y1 > this.y2)\r\n            {\r\n                this.y1 = value;\r\n            }\r\n            else\r\n            {\r\n                this.y2 = value;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Line;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a random point on a given Line.\r\n *\r\n * @function Phaser.Geom.Line.Random\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The Line to calculate the random Point on.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An instance of a Point to be modified.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A random Point on the Line.\r\n */\r\nvar Random = function (line, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var t = Math.random();\r\n\r\n    out.x = line.x1 + t * (line.x2 - line.x1);\r\n    out.y = line.y1 + t * (line.y2 - line.y1);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Random;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GEOM_CONST = require('../const');\r\n\r\n/**\r\n * @classdesc\r\n * Defines a Point in 2D space, with an x and y component.\r\n *\r\n * @class Point\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x coordinate of this Point.\r\n * @param {number} [y=x] - The y coordinate of this Point.\r\n */\r\nvar Point = new Class({\r\n\r\n    initialize:\r\n\r\n    function Point (x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.POINT`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Point#type\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.POINT;\r\n\r\n        /**\r\n         * The x coordinate of this Point.\r\n         *\r\n         * @name Phaser.Geom.Point#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The y coordinate of this Point.\r\n         *\r\n         * @name Phaser.Geom.Point#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n    },\r\n\r\n    /**\r\n     * Set the x and y coordinates of the point to the given values.\r\n     *\r\n     * @method Phaser.Geom.Point#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The x coordinate of this Point.\r\n     * @param {number} [y=x] - The y coordinate of this Point.\r\n     *\r\n     * @return {this} This Point object.\r\n     */\r\n    setTo: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Point;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if a given point is inside a Rectangle's bounds.\r\n *\r\n * @function Phaser.Geom.Rectangle.Contains\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - The Rectangle to check.\r\n * @param {number} x - The X coordinate of the point to check.\r\n * @param {number} y - The Y coordinate of the point to check.\r\n *\r\n * @return {boolean} `true` if the point is within the Rectangle's bounds, otherwise `false`.\r\n */\r\nvar Contains = function (rect, x, y)\r\n{\r\n    if (rect.width <= 0 || rect.height <= 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\r\n};\r\n\r\nmodule.exports = Contains;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Perimeter = require('./Perimeter');\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Calculates the coordinates of a point at a certain `position` on the Rectangle's perimeter.\r\n * \r\n * The `position` is a fraction between 0 and 1 which defines how far into the perimeter the point is.\r\n * \r\n * A value of 0 or 1 returns the point at the top left corner of the rectangle, while a value of 0.5 returns the point at the bottom right corner of the rectangle. Values between 0 and 0.5 are on the top or the right side and values between 0.5 and 1 are on the bottom or the left side.\r\n *\r\n * @function Phaser.Geom.Rectangle.GetPoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectangle - The Rectangle to get the perimeter point from.\r\n * @param {number} position - The normalized distance into the Rectangle's perimeter to return.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An object to update with the `x` and `y` coordinates of the point.\r\n *\r\n * @return {Phaser.Geom.Point} The updated `output` object, or a new Point if no `output` object was given.\r\n */\r\nvar GetPoint = function (rectangle, position, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    if (position <= 0 || position >= 1)\r\n    {\r\n        out.x = rectangle.x;\r\n        out.y = rectangle.y;\r\n\r\n        return out;\r\n    }\r\n\r\n    var p = Perimeter(rectangle) * position;\r\n\r\n    if (position > 0.5)\r\n    {\r\n        p -= (rectangle.width + rectangle.height);\r\n\r\n        if (p <= rectangle.width)\r\n        {\r\n            //  Face 3\r\n            out.x = rectangle.right - p;\r\n            out.y = rectangle.bottom;\r\n        }\r\n        else\r\n        {\r\n            //  Face 4\r\n            out.x = rectangle.x;\r\n            out.y = rectangle.bottom - (p - rectangle.width);\r\n        }\r\n    }\r\n    else if (p <= rectangle.width)\r\n    {\r\n        //  Face 1\r\n        out.x = rectangle.x + p;\r\n        out.y = rectangle.y;\r\n    }\r\n    else\r\n    {\r\n        //  Face 2\r\n        out.x = rectangle.right;\r\n        out.y = rectangle.y + (p - rectangle.width);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoint;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetPoint = require('./GetPoint');\r\nvar Perimeter = require('./Perimeter');\r\n\r\n//  Return an array of points from the perimeter of the rectangle\r\n//  each spaced out based on the quantity or step required\r\n\r\n/**\r\n * Return an array of points from the perimeter of the rectangle, each spaced out based on the quantity or step required.\r\n *\r\n * @function Phaser.Geom.Rectangle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectangle - The Rectangle object to get the points from.\r\n * @param {number} step - Step between points. Used to calculate the number of points to return when quantity is falsey. Ignored if quantity is positive.\r\n * @param {number} quantity - The number of evenly spaced points from the rectangles perimeter to return. If falsey, step param will be used to calculate the number of points.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An optional array to store the points in.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array of Points from the perimeter of the rectangle.\r\n */\r\nvar GetPoints = function (rectangle, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity && stepRate > 0)\r\n    {\r\n        quantity = Perimeter(rectangle) / stepRate;\r\n    }\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var position = i / quantity;\r\n\r\n        out.push(GetPoint(rectangle, position));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculates the perimeter of a Rectangle.\r\n *\r\n * @function Phaser.Geom.Rectangle.Perimeter\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - The Rectangle to use.\r\n *\r\n * @return {number} The perimeter of the Rectangle, equal to `(width * 2) + (height * 2)`.\r\n */\r\nvar Perimeter = function (rect)\r\n{\r\n    return 2 * (rect.width + rect.height);\r\n};\r\n\r\nmodule.exports = Perimeter;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a random point within a Rectangle.\r\n *\r\n * @function Phaser.Geom.Rectangle.Random\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - The Rectangle to return a point from.\r\n * @param {Phaser.Geom.Point} out - The object to update with the point's coordinates.\r\n *\r\n * @return {Phaser.Geom.Point} The modified `out` object, or a new Point if none was provided.\r\n */\r\nvar Random = function (rect, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    out.x = rect.x + (Math.random() * rect.width);\r\n    out.y = rect.y + (Math.random() * rect.height);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Random;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar GEOM_CONST = require('../const');\r\nvar Line = require('../line/Line');\r\nvar Random = require('./Random');\r\n\r\n/**\r\n * @classdesc\r\n * Encapsulates a 2D rectangle defined by its corner point in the top-left and its extends in x (width) and y (height)\r\n *\r\n * @class Rectangle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The X coordinate of the top left corner of the Rectangle.\r\n * @param {number} [y=0] - The Y coordinate of the top left corner of the Rectangle.\r\n * @param {number} [width=0] - The width of the Rectangle.\r\n * @param {number} [height=0] - The height of the Rectangle.\r\n */\r\nvar Rectangle = new Class({\r\n\r\n    initialize:\r\n\r\n    function Rectangle (x, y, width, height)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 0; }\r\n        if (height === undefined) { height = 0; }\r\n\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.RECTANGLE`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#type\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.RECTANGLE;\r\n\r\n        /**\r\n         * The X coordinate of the top left corner of the Rectangle.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The Y coordinate of the top left corner of the Rectangle.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The width of the Rectangle, i.e. the distance between its left side (defined by `x`) and its right side.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#width\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.width = width;\r\n\r\n        /**\r\n         * The height of the Rectangle, i.e. the distance between its top side (defined by `y`) and its bottom side.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#height\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.height = height;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given point is inside the Rectangle's bounds.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The X coordinate of the point to check.\r\n     * @param {number} y - The Y coordinate of the point to check.\r\n     *\r\n     * @return {boolean} `true` if the point is within the Rectangle's bounds, otherwise `false`.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Calculates the coordinates of a point at a certain `position` on the Rectangle's perimeter.\r\n     * \r\n     * The `position` is a fraction between 0 and 1 which defines how far into the perimeter the point is.\r\n     * \r\n     * A value of 0 or 1 returns the point at the top left corner of the rectangle, while a value of 0.5 returns the point at the bottom right corner of the rectangle. Values between 0 and 0.5 are on the top or the right side and values between 0.5 and 1 are on the bottom or the left side.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [output,$return]\r\n     *\r\n     * @param {number} position - The normalized distance into the Rectangle's perimeter to return.\r\n     * @param {(Phaser.Geom.Point|object)} [output] - An object to update with the `x` and `y` coordinates of the point.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} The updated `output` object, or a new Point if no `output` object was given.\r\n     */\r\n    getPoint: function (position, output)\r\n    {\r\n        return GetPoint(this, position, output);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of points from the perimeter of the Rectangle, each spaced out based on the quantity or step required.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {number} quantity - The number of points to return. Set to `false` or 0 to return an arbitrary number of points (`perimeter / stepRate`) evenly spaced around the Rectangle based on the `stepRate`.\r\n     * @param {number} [stepRate] - If `quantity` is 0, determines the normalized distance between each returned point.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - An array to which to append the points.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} The modified `output` array, or a new array if none was provided.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Returns a random point within the Rectangle's bounds.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {Phaser.Geom.Point} [point] - The object in which to store the `x` and `y` coordinates of the point.\r\n     *\r\n     * @return {Phaser.Geom.Point} The updated `point`, or a new Point if none was provided.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Sets the position, width, and height of the Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The X coordinate of the top left corner of the Rectangle.\r\n     * @param {number} y - The Y coordinate of the top left corner of the Rectangle.\r\n     * @param {number} width - The width of the Rectangle.\r\n     * @param {number} height - The height of the Rectangle.\r\n     *\r\n     * @return {this} This Rectangle object.\r\n     */\r\n    setTo: function (x, y, width, height)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets the position, width, and height of the Rectangle to 0.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#setEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Rectangle object.\r\n     */\r\n    setEmpty: function ()\r\n    {\r\n        return this.setTo(0, 0, 0, 0);\r\n    },\r\n\r\n    /**\r\n     * Sets the position of the Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The X coordinate of the top left corner of the Rectangle.\r\n     * @param {number} [y=x] - The Y coordinate of the top left corner of the Rectangle.\r\n     *\r\n     * @return {this} This Rectangle object.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the width and height of the Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width to set the Rectangle to.\r\n     * @param {number} [height=width] - The height to set the Rectangle to.\r\n     *\r\n     * @return {this} This Rectangle object.\r\n     */\r\n    setSize: function (width, height)\r\n    {\r\n        if (height === undefined) { height = width; }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Determines if the Rectangle is empty. A Rectangle is empty if its width or height is less than or equal to 0.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#isEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the Rectangle is empty. A Rectangle object is empty if its width or height is less than or equal to 0.\r\n     */\r\n    isEmpty: function ()\r\n    {\r\n        return (this.width <= 0 || this.height <= 0);\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to the top of this Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getLineA\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to the top of this Rectangle.\r\n     */\r\n    getLineA: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x, this.y, this.right, this.y);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to the right of this Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getLineB\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to the right of this Rectangle.\r\n     */\r\n    getLineB: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.right, this.y, this.right, this.bottom);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to the bottom of this Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getLineC\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to the bottom of this Rectangle.\r\n     */\r\n    getLineC: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.right, this.bottom, this.x, this.bottom);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to the left of this Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getLineD\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to the left of this Rectangle.\r\n     */\r\n    getLineD: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x, this.bottom, this.x, this.y);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * The x coordinate of the left of the Rectangle.\r\n     * Changing the left property of a Rectangle object has no effect on the y and height properties. However it does affect the width property, whereas changing the x value does not affect the width property.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (value >= this.right)\r\n            {\r\n                this.width = 0;\r\n            }\r\n            else\r\n            {\r\n                this.width = this.right - value;\r\n            }\r\n\r\n            this.x = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The sum of the x and width properties.\r\n     * Changing the right property of a Rectangle object has no effect on the x, y and height properties, however it does affect the width property.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + this.width;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (value <= this.x)\r\n            {\r\n                this.width = 0;\r\n            }\r\n            else\r\n            {\r\n                this.width = value - this.x;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y coordinate of the top of the Rectangle. Changing the top property of a Rectangle object has no effect on the x and width properties.\r\n     * However it does affect the height property, whereas changing the y value does not affect the height property.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (value >= this.bottom)\r\n            {\r\n                this.height = 0;\r\n            }\r\n            else\r\n            {\r\n                this.height = (this.bottom - value);\r\n            }\r\n\r\n            this.y = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The sum of the y and height properties.\r\n     * Changing the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + this.height;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (value <= this.y)\r\n            {\r\n                this.height = 0;\r\n            }\r\n            else\r\n            {\r\n                this.height = value - this.y;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The x coordinate of the center of the Rectangle.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#centerX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    centerX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + (this.width / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value - (this.width / 2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y coordinate of the center of the Rectangle.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#centerY\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    centerY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + (this.height / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value - (this.height / 2);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Rectangle;\r\n"],"names":["module","exports","CIRCLE","ELLIPSE","LINE","POINT","POLYGON","RECTANGLE","TRIANGLE","Point","line","position","out","undefined","x","x1","x2","y","y1","y2","Length","quantity","stepRate","i","push","Math","sqrt","Class","GetPoint","GetPoints","GEOM_CONST","Random","Vector2","Line","initialize","this","type","getPoint","output","getPoints","getRandomPoint","point","setTo","getPointA","vec2","set","getPointB","left","get","min","value","right","max","top","bottom","t","random","rect","width","height","Perimeter","rectangle","p","Contains","Rectangle","contains","setEmpty","setPosition","setSize","isEmpty","getLineA","getLineB","getLineC","getLineD","centerX","centerY"],"sourceRoot":""}