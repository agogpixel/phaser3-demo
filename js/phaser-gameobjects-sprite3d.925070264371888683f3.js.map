{"version":3,"file":"js/phaser-gameobjects-sprite3d.925070264371888683f3.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/plugins/camera3d/src/sprite3d/Sprite3D.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Clamp.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/DegToRad.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Vector4.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Wrap.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/NOOP.js"],"sourcesContent":["/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar Class = require('../../../../src/utils/Class');\nvar GameObject = require('../../../../src/gameobjects/GameObject');\nvar Sprite = require('../../../../src/gameobjects/sprite/Sprite');\nvar Vector2 = require('../../../../src/math/Vector2');\nvar Vector4 = require('../../../../src/math/Vector4');\n\n/**\n * @classdesc\n * A Sprite 3D Game Object.\n *\n * The Sprite 3D object is an encapsulation of a standard Sprite object, with additional methods to allow\n * it to be rendered by a 3D Camera. The Sprite can be positioned anywhere within 3D space.\n *\n * @class Sprite3D\n * @extends Phaser.GameObjects.Sprite\n * @memberOf Phaser.GameObjects\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n * @param {number} x - The x position of this Game Object.\n * @param {number} y - The y position of this Game Object.\n * @param {number} z - The z position of this Game Object.\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\n */\nvar Sprite3D = new Class({\n\n    Extends: GameObject,\n\n    initialize:\n\n    function Sprite3D (scene, x, y, z, texture, frame)\n    {\n        GameObject.call(this, scene, 'Sprite3D');\n\n        /**\n         * The encapsulated Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#gameObject\n         * @type {Phaser.GameObjects.GameObject}\n         * @since 3.0.0\n         */\n        this.gameObject = new Sprite(scene, 0, 0, texture, frame);\n\n        /**\n         * The position of the Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#position\n         * @type {Phaser.Math.Vector4}\n         * @since 3.0.0\n         */\n        this.position = new Vector4(x, y, z);\n\n        /**\n         * The 2D size of the Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#size\n         * @type {Phaser.Math.Vector2}\n         * @since 3.0.0\n         */\n        this.size = new Vector2(this.gameObject.width, this.gameObject.height);\n\n        /**\n         * The 2D scale of the Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#scale\n         * @type {Phaser.Math.Vector2}\n         * @since 3.0.0\n         */\n        this.scale = new Vector2(1, 1);\n\n        /**\n         * Whether to automatically set the horizontal scale of the encapsulated Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleX\n         * @type {boolean}\n         * @default true\n         * @since 3.0.0\n         */\n        this.adjustScaleX = true;\n\n        /**\n         * Whether to automatically set the vertical scale of the encapsulated Sprite.\n         *\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleY\n         * @type {boolean}\n         * @default true\n         * @since 3.0.0\n         */\n        this.adjustScaleY = true;\n\n        /**\n         * The visible state of the Game Object.\n         *\n         * @name Phaser.GameObjects.Sprite3D#_visible\n         * @type {boolean}\n         * @default true\n         * @private\n         * @since 3.0.0\n         */\n        this._visible = true;\n    },\n\n    /**\n     * Project this Sprite onto the given 3D Camera.\n     *\n     * @method Phaser.GameObjects.Sprite3D#project\n     * @since 3.0.0\n     *\n     * @param {Phaser.Cameras.Sprite3D.Camera} camera - The 3D Camera onto which to project this Sprite.\n     */\n    project: function (camera)\n    {\n        var pos = this.position;\n\n        var gameObject = this.gameObject;\n\n        camera.project(pos, gameObject);\n\n        camera.getPointSize(pos, this.size, this.scale);\n\n        if (this.scale.x <= 0 || this.scale.y <= 0)\n        {\n            gameObject.setVisible(false);\n        }\n        else\n        {\n            if (!gameObject.visible)\n            {\n                gameObject.setVisible(true);\n            }\n\n            if (this.adjustScaleX)\n            {\n                gameObject.scaleX = this.scale.x;\n            }\n\n            if (this.adjustScaleY)\n            {\n                gameObject.scaleY = this.scale.y;\n            }\n\n            gameObject.setDepth(gameObject.z * -1);\n        }\n    },\n\n    /**\n     * Set the visible state of the Game Object.\n     *\n     * @method Phaser.GameObjects.Sprite3D#setVisible\n     * @since 3.0.0\n     *\n     * @param {boolean} value - The visible state of the Game Object.\n     *\n     * @return {Phaser.GameObjects.Sprite3D} This Sprite3D Object.\n     */\n    setVisible: function (value)\n    {\n        this.visible = value;\n\n        return this;\n    },\n\n    /**\n     * The visible state of the Game Object.\n     *\n     * An invisible Game Object will skip rendering, but will still process update logic.\n     *\n     * @name Phaser.GameObjects.Sprite3D#visible\n     * @type {boolean}\n     * @since 3.0.0\n     */\n    visible: {\n\n        get: function ()\n        {\n            return this._visible;\n        },\n\n        set: function (value)\n        {\n            this._visible = value;\n            this.gameObject.visible = value;\n        }\n\n    },\n\n    /**\n     * The x position of this Game Object.\n     *\n     * @name Phaser.GameObjects.Sprite3D#x\n     * @type {number}\n     * @since 3.0.0\n     */\n    x: {\n\n        get: function ()\n        {\n            return this.position.x;\n        },\n\n        set: function (value)\n        {\n            this.position.x = value;\n        }\n\n    },\n\n    /**\n     * The y position of this Game Object.\n     *\n     * @name Phaser.GameObjects.Sprite3D#y\n     * @type {number}\n     * @since 3.0.0\n     */\n    y: {\n\n        get: function ()\n        {\n            return this.position.y;\n        },\n\n        set: function (value)\n        {\n            this.position.y = value;\n        }\n\n    },\n\n    /**\n     * The z position of this Game Object.\n     *\n     * @name Phaser.GameObjects.Sprite3D#z\n     * @type {number}\n     * @since 3.0.0\n     */\n    z: {\n\n        get: function ()\n        {\n            return this.position.z;\n        },\n\n        set: function (value)\n        {\n            this.position.z = value;\n        }\n\n    }\n\n});\n\nmodule.exports = Sprite3D;\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\r\n *\r\n * @function Phaser.Math.Clamp\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to be clamped.\r\n * @param {number} min - The minimum bounds.\r\n * @param {number} max - The maximum bounds.\r\n *\r\n * @return {number} The clamped value.\r\n */\r\nvar Clamp = function (value, min, max)\r\n{\r\n    return Math.max(min, Math.min(max, value));\r\n};\r\n\r\nmodule.exports = Clamp;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CONST = require('./const');\r\n\r\n/**\r\n * Convert the given angle from degrees, to the equivalent angle in radians.\r\n *\r\n * @function Phaser.Math.DegToRad\r\n * @since 3.0.0\r\n *\r\n * @param {number} degrees - The angle (in degrees) to convert to radians.\r\n *\r\n * @return {number} The given angle converted to radians.\r\n */\r\nvar DegToRad = function (degrees)\r\n{\r\n    return degrees * CONST.DEG_TO_RAD;\r\n};\r\n\r\nmodule.exports = DegToRad;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A representation of a vector in 4D space.\r\n *\r\n * A four-component vector.\r\n *\r\n * @class Vector4\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n * @param {number} [w] - The w component.\r\n */\r\nvar Vector4 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Vector4 (x, y, z, w)\r\n    {\r\n        /**\r\n         * The x component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = 0;\r\n\r\n        /**\r\n         * The y component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = 0;\r\n\r\n        /**\r\n         * The z component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#z\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.z = 0;\r\n\r\n        /**\r\n         * The w component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#w\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.w = 0;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Vector4.\r\n     *\r\n     * @method Phaser.Math.Vector4#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} A clone of this Vector4.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Vector4(this.x, this.y, this.z, this.w);\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Vector into this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} src - The Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        this.x = src.x;\r\n        this.y = src.y;\r\n        this.z = src.z || 0;\r\n        this.w = src.w || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check whether this Vector is equal to a given Vector.\r\n     *\r\n     * Performs a strict quality check against each Vector's components.\r\n     *\r\n     * @method Phaser.Math.Vector4#equals\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} v - The vector to check equality with.\r\n     *\r\n     * @return {boolean} A boolean indicating whether the two Vectors are equal or not.\r\n     */\r\n    equals: function (v)\r\n    {\r\n        return ((this.x === v.x) && (this.y === v.y) && (this.z === v.z) && (this.w === v.w));\r\n    },\r\n\r\n    /**\r\n     * Set the `x`, `y`, `z` and `w` components of the this Vector to the given `x`, `y`, `z` and `w` values.\r\n     *\r\n     * @method Phaser.Math.Vector4#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y, z and w components.\r\n     * @param {number} y - The y value to set for this Vector.\r\n     * @param {number} z - The z value to set for this Vector.\r\n     * @param {number} w - The z value to set for this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    set: function (x, y, z, w)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a given Vector to this Vector. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector4#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to add to this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    add: function (v)\r\n    {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z || 0;\r\n        this.w += v.w || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector4#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to subtract from this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    subtract: function (v)\r\n    {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z || 0;\r\n        this.w -= v.w || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Vector by the given value.\r\n     *\r\n     * @method Phaser.Math.Vector4#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} scale - The value to scale this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    scale: function (scale)\r\n    {\r\n        this.x *= scale;\r\n        this.y *= scale;\r\n        this.z *= scale;\r\n        this.w *= scale;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length (or magnitude) of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Vector squared.\r\n     *\r\n     * @method Phaser.Math.Vector4#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return x * x + y * y + z * z + w * w;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Vector.\r\n     *\r\n     * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n     *\r\n     * @method Phaser.Math.Vector4#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n        var len = x * x + y * y + z * z + w * w;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this.x = x * len;\r\n            this.y = y * len;\r\n            this.z = z * len;\r\n            this.w = w * len;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} v - The Vector4 to dot product with this Vector4.\r\n     *\r\n     * @return {number} The dot product of this Vector and the given Vector.\r\n     */\r\n    dot: function (v)\r\n    {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate between this Vector and the given Vector.\r\n     *\r\n     * Interpolates this Vector towards the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} v - The Vector4 to interpolate towards.\r\n     * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    lerp: function (v, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        this.x = ax + t * (v.x - ax);\r\n        this.y = ay + t * (v.y - ay);\r\n        this.z = az + t * (v.z - az);\r\n        this.w = aw + t * (v.w - aw);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise multiplication between this Vector and the given Vector.\r\n     *\r\n     * Multiplies this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to multiply this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    multiply: function (v)\r\n    {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z || 1;\r\n        this.w *= v.w || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise division between this Vector and the given Vector.\r\n     *\r\n     * Divides this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#divide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to divide this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    divide: function (v)\r\n    {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        this.z /= v.z || 1;\r\n        this.w /= v.w || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#distance\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector.\r\n     */\r\n    distance: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n        var dw = v.w - this.w || 0;\r\n\r\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector, squared.\r\n     *\r\n     * @method Phaser.Math.Vector4#distanceSq\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector, squared.\r\n     */\r\n    distanceSq: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n        var dw = v.w - this.w || 0;\r\n\r\n        return dx * dx + dy * dy + dz * dz + dw * dw;\r\n    },\r\n\r\n    /**\r\n     * Negate the `x`, `y`, `z` and `w` components of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#negate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    negate: function ()\r\n    {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        this.w = -this.w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector4#transformMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector4 with.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    transformMat4: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n        var m = mat.val;\r\n\r\n        this.x = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n        this.y = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n        this.z = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n        this.w = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Quaternion.\r\n     *\r\n     * @method Phaser.Math.Vector4#transformQuat\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    transformQuat: function (q)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var qx = q.x;\r\n        var qy = q.y;\r\n        var qz = q.z;\r\n        var qw = q.w;\r\n\r\n        // calculate quat * vec\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse quat\r\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Make this Vector the zero vector (0, 0, 0, 0).\r\n     *\r\n     * @method Phaser.Math.Vector4#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        this.w = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nVector4.prototype.sub = Vector4.prototype.subtract;\r\nVector4.prototype.mul = Vector4.prototype.multiply;\r\nVector4.prototype.div = Vector4.prototype.divide;\r\nVector4.prototype.dist = Vector4.prototype.distance;\r\nVector4.prototype.distSq = Vector4.prototype.distanceSq;\r\nVector4.prototype.len = Vector4.prototype.length;\r\nVector4.prototype.lenSq = Vector4.prototype.lengthSq;\r\n\r\nmodule.exports = Vector4;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Wrap the given `value` between `min` and `max.\r\n *\r\n * @function Phaser.Math.Wrap\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to wrap.\r\n * @param {number} min - The minimum value.\r\n * @param {number} max - The maximum value.\r\n *\r\n * @return {number} The wrapped value.\r\n */\r\nvar Wrap = function (value, min, max)\r\n{\r\n    var range = max - min;\r\n\r\n    return (min + ((((value - min) % range) + range) % range));\r\n};\r\n\r\nmodule.exports = Wrap;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A NOOP (No Operation) callback function.\r\n *\r\n * Used internally by Phaser when it's more expensive to determine if a callback exists\r\n * than it is to just invoke an empty function.\r\n *\r\n * @function Phaser.Utils.NOOP\r\n * @since 3.0.0\r\n */\r\nvar NOOP = function ()\r\n{\r\n    //  NOOP\r\n};\r\n\r\nmodule.exports = NOOP;\r\n"],"names":["Class","GameObject","Sprite","Vector2","Vector4","Sprite3D","Extends","initialize","scene","x","y","z","texture","frame","call","this","gameObject","position","size","width","height","scale","adjustScaleX","adjustScaleY","_visible","project","camera","pos","getPointSize","setVisible","visible","scaleX","scaleY","setDepth","value","get","set","module","exports","min","max","Math","CONST","degrees","DEG_TO_RAD","w","clone","copy","src","equals","v","add","subtract","length","sqrt","lengthSq","normalize","len","dot","lerp","t","undefined","ax","ay","az","aw","multiply","divide","distance","dx","dy","dz","dw","distanceSq","negate","transformMat4","mat","m","val","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","reset","prototype","sub","mul","div","dist","distSq","lenSq","range"],"sourceRoot":""}