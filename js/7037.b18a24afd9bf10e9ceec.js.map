{"version":3,"file":"js/7037.b18a24afd9bf10e9ceec.js","mappings":";sHAMA,IAAIA,EAAQ,EAAQ,OAChBC,EAAc,EAAQ,OACtBC,EAAc,EAAQ,OAkBtBC,EAAoB,IAAIH,EAAM,CAE9BI,WAEA,SAA4BC,GAUxBC,KAAKD,MAAQA,EAUbC,KAAKC,QAAUF,EAAMG,IAUrBF,KAAKG,OAASJ,EAAMG,IAAIC,OAUxBH,KAAKI,YAULJ,KAAKK,WAELL,KAAKG,OAAOG,KAAKV,EAAYW,KAAMP,KAAKQ,KAAMR,MAC9CA,KAAKG,OAAOM,GAAGb,EAAYc,MAAOV,KAAKW,MAAOX,OAWlDQ,KAAM,WAEFR,KAAKI,YAAcJ,KAAKC,QAAQG,YAChCJ,KAAKK,WAAaL,KAAKC,QAAQI,WAE/BL,KAAKG,OAAOG,KAAKV,EAAYgB,QAASZ,KAAKa,QAASb,OAYxDW,MAAO,WAEHX,KAAKG,OAAOG,KAAKV,EAAYkB,SAAUd,KAAKe,SAAUf,OAW1De,SAAU,WAENf,KAAKG,OAAOa,IAAIpB,EAAYkB,SAAUd,KAAKe,SAAUf,OAWzDa,QAAS,WAELb,KAAKe,WAELf,KAAKG,OAAOa,IAAIpB,EAAYc,MAAOV,KAAKW,MAAOX,MAE/CA,KAAKD,MAAQ,KACbC,KAAKC,QAAU,KACfD,KAAKG,OAAS,KAEdH,KAAKI,YAAc,KACnBJ,KAAKK,WAAa,QAkB1BR,EAAkBoB,SAAW,SAAUC,EAAaC,GAE3CtB,EAAkBuB,UAAUC,eAAeH,KAE5CrB,EAAkBuB,UAAUF,GAAeC,IAgBnDtB,EAAkByB,OAAS,SAAUJ,GAE7BrB,EAAkBuB,UAAUC,eAAeH,WAEpCrB,EAAkBuB,UAAUF,IAI3CvB,EAAYsB,SAAS,oBAAqBpB,EAAmB,QAE7D0B,EAAOC,QAAU3B,G,gBC9LjB,IAAIH,EAAQ,EAAQ,OAChBC,EAAc,EAAQ,OACtBC,EAAc,EAAQ,OAiBtB6B,EAAoB,IAAI/B,EAAM,CAE9BI,WAEA,SAA4BC,GAUxBC,KAAKD,MAAQA,EAUbC,KAAKC,QAAUF,EAAMG,IAUrBF,KAAKG,OAASJ,EAAMG,IAAIC,OAUxBH,KAAKI,YAULJ,KAAKK,WAELL,KAAKG,OAAOG,KAAKV,EAAYW,KAAMP,KAAKQ,KAAMR,MAC9CA,KAAKG,OAAOM,GAAGb,EAAYc,MAAOV,KAAKW,MAAOX,OAWlDQ,KAAM,WAEFR,KAAKI,YAAcJ,KAAKC,QAAQG,YAChCJ,KAAKK,WAAaL,KAAKC,QAAQI,WAE/BL,KAAKG,OAAOG,KAAKV,EAAYgB,QAASZ,KAAKa,QAASb,OAYxDW,MAAO,WAEHX,KAAKG,OAAOG,KAAKV,EAAYkB,SAAUd,KAAKe,SAAUf,OAkB1D0B,SAAU,SAAUC,GAchB,OAZIA,EAAMC,cAAgBD,EAAME,cAE5B7B,KAAKI,YAAY0B,IAAIH,GAKrBA,EAAMI,WAEN/B,KAAKK,WAAWyB,IAAIH,GAGjBA,GAWXZ,SAAU,WAENf,KAAKG,OAAOa,IAAIpB,EAAYkB,SAAUd,KAAKe,SAAUf,OAWzDa,QAAS,WAELb,KAAKe,WAELf,KAAKG,OAAOa,IAAIpB,EAAYc,MAAOV,KAAKW,MAAOX,MAE/CA,KAAKD,MAAQ,KACbC,KAAKC,QAAU,KACfD,KAAKG,OAAS,KAEdH,KAAKI,YAAc,KACnBJ,KAAKK,WAAa,QAkB1BoB,EAAkBR,SAAW,SAAUC,EAAaC,GAE3CM,EAAkBL,UAAUC,eAAeH,KAE5CO,EAAkBL,UAAUF,GAAeC,IAenDM,EAAkBH,OAAS,SAAUJ,GAE7BO,EAAkBL,UAAUC,eAAeH,WAEpCO,EAAkBL,UAAUF,IAI3CvB,EAAYsB,SAAS,oBAAqBQ,EAAmB,OAE7DF,EAAOC,QAAUC,G,UC5NjB,IAAIO,EAAQ,GAMRC,EAAmB,CAanBC,QAAS,SAAUC,GAEf,IAAK,IAAIC,KAAOJ,EAEZG,EAAOC,GAAOJ,EAAMI,IAe5BnB,SAAU,SAAUmB,EAAKjB,GAErBa,EAAMI,GAAOjB,GASjBN,QAAS,WAELmB,EAAQ,KAKhBT,EAAOC,QAAUS,G,gBCxDjB,IAAIvC,EAAQ,EAAQ,OAChB2C,EAAa,EAAQ,OACrBC,EAAe,EAAQ,OACvBL,EAAmB,EAAQ,OAC3BpC,EAAoB,EAAQ,OAC5B4B,EAAoB,EAAQ,OAC5Bc,EAAe,EAAQ,OACvB5C,EAAc,EAAQ,OACtB6C,EAAS,EAAQ,OA2CjBC,EAAgB,IAAI/C,EAAM,CAE1BgD,QAASJ,EAETxC,WAEA,SAAwB6C,GAEpBL,EAAaM,KAAK5C,MASlBA,KAAK2C,KAAOA,EAUZ3C,KAAK6C,QAAU,GASf7C,KAAK8C,aAAe,GAUpB9C,KAAK+C,eAAiB,GAUtB/C,KAAKgD,cAAgB,GAEjBL,EAAKM,SAELjD,KAAKQ,OAILmC,EAAKxC,OAAOG,KAAK+B,EAAW9B,KAAMP,KAAKQ,KAAMR,OAWrDQ,KAAM,WAEF,IAAI0C,EACAC,EACAf,EACAgB,EACAzC,EACA0C,EACAC,EACAC,EAASvD,KAAK2C,KAAKY,OAGnBC,EAAOD,EAAOE,qBAKlB,IAFAD,EAAOA,EAAKE,OAAO1D,KAAK+C,gBAEnBG,EAAI,EAAGA,EAAIM,EAAKG,OAAQT,IAEzBC,EAAQK,EAAKN,GAIbd,EAAMG,EAAaY,EAAO,MAAO,MACjCC,EAASb,EAAaY,EAAO,SAAU,MACvCxC,EAAQ4B,EAAaY,EAAO,SAAS,GACrCE,EAAUd,EAAaY,EAAO,UAAW,MACzCG,EAAOf,EAAaY,EAAO,OAAQ,MAE/Bf,IAEIgB,EAEApD,KAAKkC,QAAQE,EAAKgB,EAAQzC,EAAO0C,EAASC,GAI1CM,QAAQC,KAAK,6BAA+BzB,IAYxD,IAFAoB,GAHAA,EAAOD,EAAOO,qBAGFJ,OAAO1D,KAAKgD,eAEnBE,EAAI,EAAGA,EAAIM,EAAKG,OAAQT,IAEzBC,EAAQK,EAAKN,GAIbd,EAAMG,EAAaY,EAAO,MAAO,MACjCC,EAASb,EAAaY,EAAO,SAAU,MACvCE,EAAUd,EAAaY,EAAO,UAAW,MAErCf,IAEIgB,EAEApD,KAAK+D,mBAAmB3B,EAAKgB,EAAQC,GAIrCO,QAAQC,KAAK,6BAA+BzB,IAKxDpC,KAAK+C,eAAiB,GACtB/C,KAAKgD,cAAgB,GAErBhD,KAAK2C,KAAKxC,OAAOG,KAAK+B,EAAWzB,QAASZ,KAAKa,QAASb,OAkB5DgE,WAAY,SAAU9D,EAAK+D,EAAenB,GAEtC,IAAII,EACAgB,EACAC,EACAxB,EAAO3C,KAAK2C,KACZ5C,EAAQG,EAAIH,MACZqE,EAAMlE,EAAImE,SAASD,IACnBnB,EAAW/C,EAAImE,SAASpB,SAG5B,IAAKC,EAAI,EAAGA,EAAIe,EAAcN,OAAQT,IAI9BP,EAFJuB,EAAYD,EAAcf,KAItBhD,EAAIgE,GAAavB,EAAKuB,GAGlBE,EAAI/C,eAAe6C,KAEnBnE,EAAMqE,EAAIF,IAAchE,EAAIgE,KAGb,SAAdA,GAAwBE,EAAI/C,eAAe6C,KAEhDnE,EAAMqE,EAAIF,IAAcvB,GAIhC,IAAK,IAAI2B,EAAI,EAAGA,EAAIxB,EAAaa,OAAQW,IAIrC,IAFAH,EAAarB,EAAawB,GAErBpB,EAAI,EAAGA,EAAIiB,EAAWR,OAAQT,IAI/B,GAFAgB,EAAYC,EAAWjB,GAElBvD,EAAY4E,QAAQL,GAAzB,CAKA,IAAIM,EAAS7E,EAAY8E,QAAQP,GAE7BQ,EAASF,EAAOnB,QAEhBD,EAAS,IAAIoB,EAAOpB,OAAOrD,EAAOC,KAAM0E,GAE5CxE,EAAIwE,GAAUtB,EAGVoB,EAAOG,OAEP5E,EAAM2E,GAAUtB,EAEXgB,EAAI/C,eAAeqD,KAExB3E,EAAMqE,EAAIM,IAAWtB,GAIrBH,GAEAG,EAAO5C,OAQnB,IAFA2D,EAAanE,KAAK6C,QAEbK,EAAI,EAAGA,EAAIiB,EAAWR,OAAQT,IACnC,CACI,IAAIC,EAAQgB,EAAWjB,GAEnBC,EAAME,UAENtD,EAAMoD,EAAME,SAAWF,EAAMC,UAczCwB,uBAAwB,WAEpB,IAAIpB,EAAOxD,KAAK2C,KAAKY,OAAOsB,eAK5B,OAFOrB,EAAKE,OAAO1D,KAAK8C,eAkC5BiB,mBAAoB,SAAU3B,EAAKgB,EAAQC,EAASW,EAAYc,GAI5D,QAFmBC,IAAfD,IAA4BA,GAAa,GAEvB,mBAAX1B,EAAX,CAMA,GAAKzD,EAAY4E,QAAQnC,IAOpB,IAAK0C,GAAcnF,EAAY4E,QAAQnC,GAIxC,YADAwB,QAAQC,KAAK,4BAA8BzB,QAP3CzC,EAAYsB,SAASmB,EAAKgB,EAAQC,GAAS,GAE3CrD,KAAK8C,aAAakC,KAAK5C,GAS3B,GAAI4B,EACJ,CACI,IAAIiB,EAAW,IAAI7B,EAAOY,EAAYhE,KAAMoC,GAE5C4B,EAAW9D,IAAIkC,GAAO6C,EAElB5B,GAAuB,KAAZA,IAEXW,EAAWX,GAAW4B,GAG1BA,EAASzE,aA7BToD,QAAQC,KAAK,yBAA2BzB,IAgEhDF,QAAS,SAAUE,EAAKgB,EAAQzC,EAAO0C,EAASC,GAM5C,QAJcyB,IAAVpE,IAAuBA,GAAQ,QACnBoE,IAAZ1B,IAAyBA,EAAU,WAC1B0B,IAATzB,IAAsBA,EAAO,MAEX,mBAAXF,EAGP,OADAQ,QAAQC,KAAK,mBAAqBzB,GAC3B,KAGX,GAAIzC,EAAYuF,UAAU9C,GAGtB,OADAwB,QAAQC,KAAK,sBAAwBzB,GAC9B,KAQX,GALgB,OAAZiB,IAEA1C,GAAQ,GAGPX,KAAK2C,KAAKM,UASX,GAFAtD,EAAYwF,eAAe/C,EAAKgB,EAAQC,EAASC,GAE7C3C,EAEA,OAAOX,KAAKW,MAAMyB,QATtBpC,KAAK+C,eAAeiC,KAAK,CAAE5C,IAAKA,EAAKgB,OAAQA,EAAQzC,MAAOA,EAAO0C,QAASA,EAASC,KAAMA,IAa/F,OAAO,MAcX8B,SAAU,SAAUhD,GAIhB,IAFA,IAAIoB,EAAOxD,KAAK6C,QAEPK,EAAI,EAAGA,EAAIM,EAAKG,OAAQT,IAI7B,GAFYM,EAAKN,GAEPd,MAAQA,EAEd,OAAOc,EAIf,OAAQ,GAcZmC,SAAU,SAAUjD,GAEhB,IAAIkD,EAAMtF,KAAKoF,SAAShD,GAExB,IAAa,IAATkD,EAEA,OAAOtF,KAAK6C,QAAQyC,IAc5BC,SAAU,SAAUnD,GAEhB,IAAIe,EAAQnD,KAAKqF,SAASjD,GAE1B,OAAQe,GAASA,EAAMqC,QAsB3B7E,MAAO,SAAUyB,EAAKqD,QAEJV,IAAVU,IAAuBA,EAAQrD,GAEnC,IAAIe,EAAQnD,KAAKqF,SAASI,GAc1B,OAXItC,IAAUA,EAAMqC,QAGhBrC,EAAMqC,QAAS,EACfrC,EAAMC,OAAOzC,SAEPwC,IAENA,EAAQnD,KAAK0F,YAAYtD,EAAKqD,IAG3B,EAAUtC,EAAMC,OAAS,MAepCsC,YAAa,SAAUtD,EAAKqD,GAExB,IAAItC,EAAQxD,EAAYgG,UAAUvD,GAElC,GAAIe,EACJ,CACI,IAAI8B,EAAW,IAAI9B,EAAMC,OAAOpD,MAEhCmD,EAAQ,CACJf,IAAKqD,EACLrC,OAAQ6B,EACRO,QAAQ,EACRnC,QAASF,EAAME,QACfC,KAAMH,EAAMG,MAGhBtD,KAAK6C,QAAQmC,KAAK7B,GAElB8B,EAASW,KAAKzC,EAAMG,MACpB2B,EAAStE,QAGb,OAAOwC,GAkBX0C,KAAM,SAAUzD,GAEZ,IAAIe,EAAQnD,KAAKqF,SAASjD,GAQ1B,OANIe,GAASA,EAAMqC,SAEfrC,EAAMqC,QAAS,EACfrC,EAAMC,OAAOyC,QAGV7F,MAiBX8F,IAAK,SAAU1D,EAAK2D,QAEEhB,IAAdgB,IAA2BA,GAAY,GAE3C,IAAI5C,EAAQnD,KAAKqF,SAASjD,GAE1B,GAAIe,EAEA,OAAOA,EAAMC,OAIb,IAAIA,EAASpD,KAAKgG,SAAS5D,GAE3B,OAAIgB,GAAU2C,GAEV5C,EAAQnD,KAAK0F,YAAYtD,EAAKA,IAEbe,EAAMC,OAAS,KAE3BA,GAMN,MAcX4C,SAAU,SAAU5D,GAEhB,OAAOzC,EAAYsG,eAAe7D,IAatC8D,mBAAoB,SAAU9D,GAE1B,IAAIe,EAAQnD,KAAKqF,SAASjD,GAEtBe,GAEAX,EAAOxC,KAAK6C,QAASM,GAGzBxD,EAAYwG,aAAa/D,IAe7BgE,kBAAmB,SAAUhE,GAEzBI,EAAOxC,KAAK8C,aAAcV,GAE1BzC,EAAY2B,OAAOc,IAqCvBiE,mBAAoB,SAAUjE,EAAKkE,EAAiBC,GAYhD,OAVID,GAEA7E,EAAkBR,SAASmB,EAAKkE,GAGhCC,GAEA1G,EAAkBoB,SAASmB,EAAKmE,GAG7BvG,MAcXwG,iBAAkB,SAAUpE,EAAKqE,EAAmBC,GAehD,YAb0B3B,IAAtB0B,IAAmCA,GAAoB,QACjC1B,IAAtB2B,IAAmCA,GAAoB,GAEvDD,GAEAhF,EAAkBH,OAAOc,GAGzBsE,GAEA7G,EAAkByB,OAAOc,GAGtBpC,MAqCX2G,iBAAkB,SAAUvE,EAAKwE,EAAU5C,GAEvC/B,EAAiBhB,SAASmB,EAAKwE,GAE3B5C,GAAcA,EAAW9D,IAAI2G,OAE7B7C,EAAW9D,IAAI2G,KAAKzE,GAAOwE,IAanC/F,QAAS,WAEL,IAAK,IAAIqC,EAAI,EAAGA,EAAIlD,KAAK6C,QAAQc,OAAQT,IAErClD,KAAK6C,QAAQK,GAAGE,OAAOvC,UAG3BlB,EAAYmH,uBAER9G,KAAK2C,KAAKoE,UAEVpH,EAAYqH,qBAGhBhH,KAAK2C,KAAO,KACZ3C,KAAK6C,QAAU,GACf7C,KAAK8C,aAAe,MAW5BvB,EAAOC,QAAUiB,M","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/gameobjects/GameObjectCreator.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/gameobjects/GameObjectFactory.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/loader/FileTypesManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/plugins/PluginManager.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar SceneEvents = require('../scene/events');\r\n\r\n/**\r\n * @classdesc\r\n * The Game Object Creator is a Scene plugin that allows you to quickly create many common\r\n * types of Game Objects and return them. Unlike the Game Object Factory, they are not automatically\r\n * added to the Scene.\r\n *\r\n * Game Objects directly register themselves with the Creator and inject their own creation\r\n * methods into the class.\r\n *\r\n * @class GameObjectCreator\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object Factory belongs.\r\n */\r\nvar GameObjectCreator = new Class({\r\n\r\n    initialize:\r\n\r\n    function GameObjectCreator (scene)\r\n    {\r\n        /**\r\n         * The Scene to which this Game Object Creator belongs.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectCreator#scene\r\n         * @type {Phaser.Scene}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectCreator#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * A reference to the Scene Event Emitter.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectCreator#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @protected\r\n         * @since 3.50.0\r\n         */\r\n        this.events = scene.sys.events;\r\n\r\n        /**\r\n         * A reference to the Scene Display List.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectCreator#displayList\r\n         * @type {Phaser.GameObjects.DisplayList}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.displayList;\r\n\r\n        /**\r\n         * A reference to the Scene Update List.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectCreator#updateList\r\n         * @type {Phaser.GameObjects.UpdateList}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.updateList;\r\n\r\n        this.events.once(SceneEvents.BOOT, this.boot, this);\r\n        this.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectCreator#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.displayList = this.systems.displayList;\r\n        this.updateList = this.systems.updateList;\r\n\r\n        this.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectCreator#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        this.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectCreator#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectCreator#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n        this.events = null;\r\n\r\n        this.displayList = null;\r\n        this.updateList = null;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Static method called directly by the Game Object creator functions.\r\n * With this method you can register a custom GameObject factory in the GameObjectCreator,\r\n * providing a name (`factoryType`) and the constructor (`factoryFunction`) in order\r\n * to be called when you invoke Phaser.Scene.make[ factoryType ] method.\r\n *\r\n * @method Phaser.GameObjects.GameObjectCreator.register\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {string} factoryType - The key of the factory that you will use to call to Phaser.Scene.make[ factoryType ] method.\r\n * @param {function} factoryFunction - The constructor function to be called when you invoke to the Phaser.Scene.make method.\r\n */\r\nGameObjectCreator.register = function (factoryType, factoryFunction)\r\n{\r\n    if (!GameObjectCreator.prototype.hasOwnProperty(factoryType))\r\n    {\r\n        GameObjectCreator.prototype[factoryType] = factoryFunction;\r\n    }\r\n};\r\n\r\n/**\r\n * Static method called directly by the Game Object Creator functions.\r\n *\r\n * With this method you can remove a custom Game Object Creator that has been previously\r\n * registered in the Game Object Creator. Pass in its `factoryType` in order to remove it.\r\n *\r\n * @method Phaser.GameObjects.GameObjectCreator.remove\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {string} factoryType - The key of the factory that you want to remove from the GameObjectCreator.\r\n */\r\nGameObjectCreator.remove = function (factoryType)\r\n{\r\n    if (GameObjectCreator.prototype.hasOwnProperty(factoryType))\r\n    {\r\n        delete GameObjectCreator.prototype[factoryType];\r\n    }\r\n};\r\n\r\nPluginCache.register('GameObjectCreator', GameObjectCreator, 'make');\r\n\r\nmodule.exports = GameObjectCreator;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar SceneEvents = require('../scene/events');\r\n\r\n/**\r\n * @classdesc\r\n * The Game Object Factory is a Scene plugin that allows you to quickly create many common\r\n * types of Game Objects and have them automatically registered with the Scene.\r\n *\r\n * Game Objects directly register themselves with the Factory and inject their own creation\r\n * methods into the class.\r\n *\r\n * @class GameObjectFactory\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object Factory belongs.\r\n */\r\nvar GameObjectFactory = new Class({\r\n\r\n    initialize:\r\n\r\n    function GameObjectFactory (scene)\r\n    {\r\n        /**\r\n         * The Scene to which this Game Object Factory belongs.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectFactory#scene\r\n         * @type {Phaser.Scene}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectFactory#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * A reference to the Scene Event Emitter.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectFactory#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @protected\r\n         * @since 3.50.0\r\n         */\r\n        this.events = scene.sys.events;\r\n\r\n        /**\r\n         * A reference to the Scene Display List.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectFactory#displayList\r\n         * @type {Phaser.GameObjects.DisplayList}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.displayList;\r\n\r\n        /**\r\n         * A reference to the Scene Update List.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectFactory#updateList\r\n         * @type {Phaser.GameObjects.UpdateList}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.updateList;\r\n\r\n        this.events.once(SceneEvents.BOOT, this.boot, this);\r\n        this.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.displayList = this.systems.displayList;\r\n        this.updateList = this.systems.updateList;\r\n\r\n        this.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        this.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Game Object to this Scene.\r\n     *\r\n     * If the Game Object renders, it will be added to the Display List.\r\n     * If it has a `preUpdate` method, it will be added to the Update List.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#existing\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {(Phaser.GameObjects.GameObject|Phaser.GameObjects.Group|Phaser.GameObjects.Layer)} G - [child,$return]\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.Group|Phaser.GameObjects.Layer)} child - The child to be added to this Scene.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that was added.\r\n     */\r\n    existing: function (child)\r\n    {\r\n        if (child.renderCanvas || child.renderWebGL)\r\n        {\r\n            this.displayList.add(child);\r\n        }\r\n\r\n        //  For when custom objects have overridden `preUpdate` but don't hook into the ADDED_TO_SCENE event:\r\n        //  Adding to the list multiple times is safe, as it won't add duplicates into the list anyway.\r\n        if (child.preUpdate)\r\n        {\r\n            this.updateList.add(child);\r\n        }\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n        this.events = null;\r\n\r\n        this.displayList = null;\r\n        this.updateList = null;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Static method called directly by the Game Object factory functions.\r\n * With this method you can register a custom GameObject factory in the GameObjectFactory,\r\n * providing a name (`factoryType`) and the constructor (`factoryFunction`) in order\r\n * to be called when you call to Phaser.Scene.add[ factoryType ] method.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory.register\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {string} factoryType - The key of the factory that you will use to call to Phaser.Scene.add[ factoryType ] method.\r\n * @param {function} factoryFunction - The constructor function to be called when you invoke to the Phaser.Scene.add method.\r\n */\r\nGameObjectFactory.register = function (factoryType, factoryFunction)\r\n{\r\n    if (!GameObjectFactory.prototype.hasOwnProperty(factoryType))\r\n    {\r\n        GameObjectFactory.prototype[factoryType] = factoryFunction;\r\n    }\r\n};\r\n\r\n/**\r\n * Static method called directly by the Game Object factory functions.\r\n * With this method you can remove a custom GameObject factory registered in the GameObjectFactory,\r\n * providing a its `factoryType`.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory.remove\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {string} factoryType - The key of the factory that you want to remove from the GameObjectFactory.\r\n */\r\nGameObjectFactory.remove = function (factoryType)\r\n{\r\n    if (GameObjectFactory.prototype.hasOwnProperty(factoryType))\r\n    {\r\n        delete GameObjectFactory.prototype[factoryType];\r\n    }\r\n};\r\n\r\nPluginCache.register('GameObjectFactory', GameObjectFactory, 'add');\r\n\r\nmodule.exports = GameObjectFactory;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar types = {};\r\n\r\n/**\r\n * @namespace Phaser.Loader.FileTypesManager\r\n */\r\n\r\nvar FileTypesManager = {\r\n\r\n    /**\r\n     * Static method called when a LoaderPlugin is created.\r\n     * \r\n     * Loops through the local types object and injects all of them as\r\n     * properties into the LoaderPlugin instance.\r\n     *\r\n     * @method Phaser.Loader.FileTypesManager.install\r\n     * @since 3.0.0\r\n     * \r\n     * @param {Phaser.Loader.LoaderPlugin} loader - The LoaderPlugin to install the types into.\r\n     */\r\n    install: function (loader)\r\n    {\r\n        for (var key in types)\r\n        {\r\n            loader[key] = types[key];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Static method called directly by the File Types.\r\n     * \r\n     * The key is a reference to the function used to load the files via the Loader, i.e. `image`.\r\n     *\r\n     * @method Phaser.Loader.FileTypesManager.register\r\n     * @since 3.0.0\r\n     * \r\n     * @param {string} key - The key that will be used as the method name in the LoaderPlugin.\r\n     * @param {function} factoryFunction - The function that will be called when LoaderPlugin.key is invoked.\r\n     */\r\n    register: function (key, factoryFunction)\r\n    {\r\n        types[key] = factoryFunction;\r\n    },\r\n\r\n    /**\r\n     * Removed all associated file types.\r\n     *\r\n     * @method Phaser.Loader.FileTypesManager.destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        types = {};\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = FileTypesManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar GameEvents = require('../core/events');\r\nvar EventEmitter = require('eventemitter3');\r\nvar FileTypesManager = require('../loader/FileTypesManager');\r\nvar GameObjectCreator = require('../gameobjects/GameObjectCreator');\r\nvar GameObjectFactory = require('../gameobjects/GameObjectFactory');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar PluginCache = require('./PluginCache');\r\nvar Remove = require('../utils/array/Remove');\r\n\r\n/**\r\n * @classdesc\r\n * The PluginManager is responsible for installing and adding plugins to Phaser.\r\n *\r\n * It is a global system and therefore belongs to the Game instance, not a specific Scene.\r\n *\r\n * It works in conjunction with the PluginCache. Core internal plugins automatically register themselves\r\n * with the Cache, but it's the Plugin Manager that is responsible for injecting them into the Scenes.\r\n *\r\n * There are two types of plugin:\r\n *\r\n * 1. A Global Plugin\r\n * 2. A Scene Plugin\r\n *\r\n * A Global Plugin is a plugin that lives within the Plugin Manager rather than a Scene. You can get\r\n * access to it by calling `PluginManager.get` and providing a key. Any Scene that requests a plugin in\r\n * this way will all get access to the same plugin instance, allowing you to use a single plugin across\r\n * multiple Scenes.\r\n *\r\n * A Scene Plugin is a plugin dedicated to running within a Scene. These are different to Global Plugins\r\n * in that their instances do not live within the Plugin Manager, but within the Scene Systems class instead.\r\n * And that every Scene created is given its own unique instance of a Scene Plugin. Examples of core Scene\r\n * Plugins include the Input Plugin, the Tween Plugin and the physics Plugins.\r\n *\r\n * You can add a plugin to Phaser in three different ways:\r\n *\r\n * 1. Preload it\r\n * 2. Include it in your source code and install it via the Game Config\r\n * 3. Include it in your source code and install it within a Scene\r\n *\r\n * For examples of all of these approaches please see the Phaser 3 Examples Repo `plugins` folder.\r\n *\r\n * For information on creating your own plugin please see the Phaser 3 Plugin Template.\r\n *\r\n * @class PluginManager\r\n * @memberof Phaser.Plugins\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The game instance that owns this Plugin Manager.\r\n */\r\nvar PluginManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function PluginManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * The game instance that owns this Plugin Manager.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#game\r\n         * @type {Phaser.Game}\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * The global plugins currently running and managed by this Plugin Manager.\r\n         * A plugin must have been started at least once in order to appear in this list.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#plugins\r\n         * @type {Phaser.Types.Plugins.GlobalPlugin[]}\r\n         * @since 3.8.0\r\n         */\r\n        this.plugins = [];\r\n\r\n        /**\r\n         * A list of plugin keys that should be installed into Scenes as well as the Core Plugins.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#scenePlugins\r\n         * @type {string[]}\r\n         * @since 3.8.0\r\n         */\r\n        this.scenePlugins = [];\r\n\r\n        /**\r\n         * A temporary list of plugins to install when the game has booted.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#_pendingGlobal\r\n         * @private\r\n         * @type {array}\r\n         * @since 3.8.0\r\n         */\r\n        this._pendingGlobal = [];\r\n\r\n        /**\r\n         * A temporary list of scene plugins to install when the game has booted.\r\n         *\r\n         * @name Phaser.Plugins.PluginManager#_pendingScene\r\n         * @private\r\n         * @type {array}\r\n         * @since 3.8.0\r\n         */\r\n        this._pendingScene = [];\r\n\r\n        if (game.isBooted)\r\n        {\r\n            this.boot();\r\n        }\r\n        else\r\n        {\r\n            game.events.once(GameEvents.BOOT, this.boot, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Run once the game has booted and installs all of the plugins configured in the Game Config.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#boot\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var i;\r\n        var entry;\r\n        var key;\r\n        var plugin;\r\n        var start;\r\n        var mapping;\r\n        var data;\r\n        var config = this.game.config;\r\n\r\n        //  Any plugins to install?\r\n        var list = config.installGlobalPlugins;\r\n\r\n        //  Any plugins added outside of the game config, but before the game booted?\r\n        list = list.concat(this._pendingGlobal);\r\n\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            entry = list[i];\r\n\r\n            // { key: 'TestPlugin', plugin: TestPlugin, start: true, mapping: 'test', data: { msg: 'The plugin is alive' } }\r\n\r\n            key = GetFastValue(entry, 'key', null);\r\n            plugin = GetFastValue(entry, 'plugin', null);\r\n            start = GetFastValue(entry, 'start', false);\r\n            mapping = GetFastValue(entry, 'mapping', null);\r\n            data = GetFastValue(entry, 'data', null);\r\n\r\n            if (key)\r\n            {\r\n                if (plugin)\r\n                {\r\n                    this.install(key, plugin, start, mapping, data);\r\n                }\r\n                else\r\n                {\r\n                    console.warn('Missing `plugin` for key: ' + key);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        //  Any scene plugins to install?\r\n        list = config.installScenePlugins;\r\n\r\n        //  Any plugins added outside of the game config, but before the game booted?\r\n        list = list.concat(this._pendingScene);\r\n\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            entry = list[i];\r\n\r\n            // { key: 'moveSpritePlugin', plugin: MoveSpritePlugin, , mapping: 'move' }\r\n\r\n            key = GetFastValue(entry, 'key', null);\r\n            plugin = GetFastValue(entry, 'plugin', null);\r\n            mapping = GetFastValue(entry, 'mapping', null);\r\n\r\n            if (key)\r\n            {\r\n                if (plugin)\r\n                {\r\n                    this.installScenePlugin(key, plugin, mapping);\r\n                }\r\n                else\r\n                {\r\n                    console.warn('Missing `plugin` for key: ' + key);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._pendingGlobal = [];\r\n        this._pendingScene = [];\r\n\r\n        this.game.events.once(GameEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Called by the Scene Systems class. Tells the plugin manager to install all Scene plugins into it.\r\n     *\r\n     * First it will install global references, i.e. references from the Game systems into the Scene Systems (and Scene if mapped.)\r\n     * Then it will install Core Scene Plugins followed by Scene Plugins registered with the PluginManager.\r\n     * Finally it will install any references to Global Plugins that have a Scene mapping property into the Scene itself.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#addToScene\r\n     * @protected\r\n     * @since 3.8.0\r\n     *\r\n     * @param {Phaser.Scenes.Systems} sys - The Scene Systems class to install all the plugins in to.\r\n     * @param {array} globalPlugins - An array of global plugins to install.\r\n     * @param {array} scenePlugins - An array of scene plugins to install.\r\n     */\r\n    addToScene: function (sys, globalPlugins, scenePlugins)\r\n    {\r\n        var i;\r\n        var pluginKey;\r\n        var pluginList;\r\n        var game = this.game;\r\n        var scene = sys.scene;\r\n        var map = sys.settings.map;\r\n        var isBooted = sys.settings.isBooted;\r\n\r\n        //  Reference the GlobalPlugins from Game into Scene.Systems\r\n        for (i = 0; i < globalPlugins.length; i++)\r\n        {\r\n            pluginKey = globalPlugins[i];\r\n\r\n            if (game[pluginKey])\r\n            {\r\n                sys[pluginKey] = game[pluginKey];\r\n\r\n                //  Scene level injection\r\n                if (map.hasOwnProperty(pluginKey))\r\n                {\r\n                    scene[map[pluginKey]] = sys[pluginKey];\r\n                }\r\n            }\r\n            else if (pluginKey === 'game' && map.hasOwnProperty(pluginKey))\r\n            {\r\n                scene[map[pluginKey]] = game;\r\n            }\r\n        }\r\n\r\n        for (var s = 0; s < scenePlugins.length; s++)\r\n        {\r\n            pluginList = scenePlugins[s];\r\n\r\n            for (i = 0; i < pluginList.length; i++)\r\n            {\r\n                pluginKey = pluginList[i];\r\n\r\n                if (!PluginCache.hasCore(pluginKey))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                var source = PluginCache.getCore(pluginKey);\r\n\r\n                var mapKey = source.mapping;\r\n\r\n                var plugin = new source.plugin(scene, this, mapKey);\r\n\r\n                sys[mapKey] = plugin;\r\n\r\n                //  Scene level injection\r\n                if (source.custom)\r\n                {\r\n                    scene[mapKey] = plugin;\r\n                }\r\n                else if (map.hasOwnProperty(mapKey))\r\n                {\r\n                    scene[map[mapKey]] = plugin;\r\n                }\r\n\r\n                //  Scene is already booted, usually because this method is being called at run-time, so boot the plugin\r\n                if (isBooted)\r\n                {\r\n                    plugin.boot();\r\n                }\r\n            }\r\n        }\r\n\r\n        //  And finally, inject any 'global scene plugins'\r\n        pluginList = this.plugins;\r\n\r\n        for (i = 0; i < pluginList.length; i++)\r\n        {\r\n            var entry = pluginList[i];\r\n\r\n            if (entry.mapping)\r\n            {\r\n                scene[entry.mapping] = entry.plugin;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the Scene Systems class. Returns a list of plugins to be installed.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#getDefaultScenePlugins\r\n     * @protected\r\n     * @since 3.8.0\r\n     *\r\n     * @return {string[]} A list keys of all the Scene Plugins to install.\r\n     */\r\n    getDefaultScenePlugins: function ()\r\n    {\r\n        var list = this.game.config.defaultPlugins;\r\n\r\n        //  Merge in custom Scene plugins\r\n        list = list.concat(this.scenePlugins);\r\n\r\n        return list;\r\n    },\r\n\r\n    /**\r\n     * Installs a new Scene Plugin into the Plugin Manager and optionally adds it\r\n     * to the given Scene as well. A Scene Plugin added to the manager in this way\r\n     * will be automatically installed into all new Scenes using the key and mapping given.\r\n     *\r\n     * The `key` property is what the plugin is injected into Scene.Systems as.\r\n     * The `mapping` property is optional, and if specified is what the plugin is installed into\r\n     * the Scene as. For example:\r\n     *\r\n     * ```javascript\r\n     * this.plugins.installScenePlugin('powerupsPlugin', pluginCode, 'powerups');\r\n     *\r\n     * // and from within the scene:\r\n     * this.sys.powerupsPlugin; // key value\r\n     * this.powerups; // mapping value\r\n     * ```\r\n     *\r\n     * This method is called automatically by Phaser if you install your plugins using either the\r\n     * Game Configuration object, or by preloading them via the Loader.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#installScenePlugin\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The property key that will be used to add this plugin to Scene.Systems.\r\n     * @param {function} plugin - The plugin code. This should be the non-instantiated version.\r\n     * @param {string} [mapping] - If this plugin is injected into the Phaser.Scene class, this is the property key to use.\r\n     * @param {Phaser.Scene} [addToScene] - Optionally automatically add this plugin to the given Scene.\r\n     * @param {boolean} [fromLoader=false] - Is this being called by the Loader?\r\n     */\r\n    installScenePlugin: function (key, plugin, mapping, addToScene, fromLoader)\r\n    {\r\n        if (fromLoader === undefined) { fromLoader = false; }\r\n\r\n        if (typeof plugin !== 'function')\r\n        {\r\n            console.warn('Invalid Scene Plugin: ' + key);\r\n            return;\r\n        }\r\n\r\n        if (!PluginCache.hasCore(key))\r\n        {\r\n            //  Plugin is freshly loaded\r\n            PluginCache.register(key, plugin, mapping, true);\r\n\r\n            this.scenePlugins.push(key);\r\n        }\r\n        else if (!fromLoader && PluginCache.hasCore(key))\r\n        {\r\n            //  Plugin wasn't from the loader but already exists\r\n            console.warn('Scene Plugin key in use: ' + key);\r\n            return;\r\n        }\r\n\r\n        if (addToScene)\r\n        {\r\n            var instance = new plugin(addToScene, this, key);\r\n\r\n            addToScene.sys[key] = instance;\r\n\r\n            if (mapping && mapping !== '')\r\n            {\r\n                addToScene[mapping] = instance;\r\n            }\r\n\r\n            instance.boot();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Installs a new Global Plugin into the Plugin Manager and optionally starts it running.\r\n     * A global plugin belongs to the Plugin Manager, rather than a specific Scene, and can be accessed\r\n     * and used by all Scenes in your game.\r\n     *\r\n     * The `key` property is what you use to access this plugin from the Plugin Manager.\r\n     *\r\n     * ```javascript\r\n     * this.plugins.install('powerupsPlugin', pluginCode);\r\n     *\r\n     * // and from within the scene:\r\n     * this.plugins.get('powerupsPlugin');\r\n     * ```\r\n     *\r\n     * This method is called automatically by Phaser if you install your plugins using either the\r\n     * Game Configuration object, or by preloading them via the Loader.\r\n     *\r\n     * The same plugin can be installed multiple times into the Plugin Manager by simply giving each\r\n     * instance its own unique key.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#install\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The unique handle given to this plugin within the Plugin Manager.\r\n     * @param {function} plugin - The plugin code. This should be the non-instantiated version.\r\n     * @param {boolean} [start=false] - Automatically start the plugin running? This is always `true` if you provide a mapping value.\r\n     * @param {string} [mapping] - If this plugin is injected into the Phaser.Scene class, this is the property key to use.\r\n     * @param {any} [data] - A value passed to the plugin's `init` method.\r\n     *\r\n     * @return {?Phaser.Plugins.BasePlugin} The plugin that was started, or `null` if `start` was false, or game isn't yet booted.\r\n     */\r\n    install: function (key, plugin, start, mapping, data)\r\n    {\r\n        if (start === undefined) { start = false; }\r\n        if (mapping === undefined) { mapping = null; }\r\n        if (data === undefined) { data = null; }\r\n\r\n        if (typeof plugin !== 'function')\r\n        {\r\n            console.warn('Invalid Plugin: ' + key);\r\n            return null;\r\n        }\r\n\r\n        if (PluginCache.hasCustom(key))\r\n        {\r\n            console.warn('Plugin key in use: ' + key);\r\n            return null;\r\n        }\r\n\r\n        if (mapping !== null)\r\n        {\r\n            start = true;\r\n        }\r\n\r\n        if (!this.game.isBooted)\r\n        {\r\n            this._pendingGlobal.push({ key: key, plugin: plugin, start: start, mapping: mapping, data: data });\r\n        }\r\n        else\r\n        {\r\n            //  Add it to the plugin store\r\n            PluginCache.registerCustom(key, plugin, mapping, data);\r\n\r\n            if (start)\r\n            {\r\n                return this.start(key);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Gets an index of a global plugin based on the given key.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#getIndex\r\n     * @protected\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The unique plugin key.\r\n     *\r\n     * @return {number} The index of the plugin within the plugins array.\r\n     */\r\n    getIndex: function (key)\r\n    {\r\n        var list = this.plugins;\r\n\r\n        for (var i = 0; i < list.length; i++)\r\n        {\r\n            var entry = list[i];\r\n\r\n            if (entry.key === key)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    },\r\n\r\n    /**\r\n     * Gets a global plugin based on the given key.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#getEntry\r\n     * @protected\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The unique plugin key.\r\n     *\r\n     * @return {Phaser.Types.Plugins.GlobalPlugin} The plugin entry.\r\n     */\r\n    getEntry: function (key)\r\n    {\r\n        var idx = this.getIndex(key);\r\n\r\n        if (idx !== -1)\r\n        {\r\n            return this.plugins[idx];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks if the given global plugin, based on its key, is active or not.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#isActive\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The unique plugin key.\r\n     *\r\n     * @return {boolean} `true` if the plugin is active, otherwise `false`.\r\n     */\r\n    isActive: function (key)\r\n    {\r\n        var entry = this.getEntry(key);\r\n\r\n        return (entry && entry.active);\r\n    },\r\n\r\n    /**\r\n     * Starts a global plugin running.\r\n     *\r\n     * If the plugin was previously active then calling `start` will reset it to an active state and then\r\n     * call its `start` method.\r\n     *\r\n     * If the plugin has never been run before a new instance of it will be created within the Plugin Manager,\r\n     * its active state set and then both of its `init` and `start` methods called, in that order.\r\n     *\r\n     * If the plugin is already running under the given key then nothing happens.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#start\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to start.\r\n     * @param {string} [runAs] - Run the plugin under a new key. This allows you to run one plugin multiple times.\r\n     *\r\n     * @return {?Phaser.Plugins.BasePlugin} The plugin that was started, or `null` if invalid key given or plugin is already stopped.\r\n     */\r\n    start: function (key, runAs)\r\n    {\r\n        if (runAs === undefined) { runAs = key; }\r\n\r\n        var entry = this.getEntry(runAs);\r\n\r\n        //  Plugin already running under this key?\r\n        if (entry && !entry.active)\r\n        {\r\n            //  It exists, we just need to start it up again\r\n            entry.active = true;\r\n            entry.plugin.start();\r\n        }\r\n        else if (!entry)\r\n        {\r\n            entry = this.createEntry(key, runAs);\r\n        }\r\n\r\n        return (entry) ? entry.plugin : null;\r\n    },\r\n\r\n    /**\r\n     * Creates a new instance of a global plugin, adds an entry into the plugins array and returns it.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#createEntry\r\n     * @private\r\n     * @since 3.9.0\r\n     *\r\n     * @param {string} key - The key of the plugin to create an instance of.\r\n     * @param {string} [runAs] - Run the plugin under a new key. This allows you to run one plugin multiple times.\r\n     *\r\n     * @return {?Phaser.Plugins.BasePlugin} The plugin that was started, or `null` if invalid key given.\r\n     */\r\n    createEntry: function (key, runAs)\r\n    {\r\n        var entry = PluginCache.getCustom(key);\r\n\r\n        if (entry)\r\n        {\r\n            var instance = new entry.plugin(this);\r\n\r\n            entry = {\r\n                key: runAs,\r\n                plugin: instance,\r\n                active: true,\r\n                mapping: entry.mapping,\r\n                data: entry.data\r\n            };\r\n\r\n            this.plugins.push(entry);\r\n\r\n            instance.init(entry.data);\r\n            instance.start();\r\n        }\r\n\r\n        return entry;\r\n    },\r\n\r\n    /**\r\n     * Stops a global plugin from running.\r\n     *\r\n     * If the plugin is active then its active state will be set to false and the plugins `stop` method\r\n     * will be called.\r\n     *\r\n     * If the plugin is not already running, nothing will happen.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#stop\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to stop.\r\n     *\r\n     * @return {this} The Plugin Manager.\r\n     */\r\n    stop: function (key)\r\n    {\r\n        var entry = this.getEntry(key);\r\n\r\n        if (entry && entry.active)\r\n        {\r\n            entry.active = false;\r\n            entry.plugin.stop();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a global plugin from the Plugin Manager based on the given key and returns it.\r\n     *\r\n     * If it cannot find an active plugin based on the key, but there is one in the Plugin Cache with the same key,\r\n     * then it will create a new instance of the cached plugin and return that.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#get\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to get.\r\n     * @param {boolean} [autoStart=true] - Automatically start a new instance of the plugin if found in the cache, but not actively running.\r\n     *\r\n     * @return {?(Phaser.Plugins.BasePlugin|function)} The plugin, or `null` if no plugin was found matching the key.\r\n     */\r\n    get: function (key, autoStart)\r\n    {\r\n        if (autoStart === undefined) { autoStart = true; }\r\n\r\n        var entry = this.getEntry(key);\r\n\r\n        if (entry)\r\n        {\r\n            return entry.plugin;\r\n        }\r\n        else\r\n        {\r\n            var plugin = this.getClass(key);\r\n\r\n            if (plugin && autoStart)\r\n            {\r\n                entry = this.createEntry(key, key);\r\n\r\n                return (entry) ? entry.plugin : null;\r\n            }\r\n            else if (plugin)\r\n            {\r\n                return plugin;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Returns the plugin class from the cache.\r\n     * Used internally by the Plugin Manager.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#getClass\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to get.\r\n     *\r\n     * @return {Phaser.Plugins.BasePlugin} A Plugin object\r\n     */\r\n    getClass: function (key)\r\n    {\r\n        return PluginCache.getCustomClass(key);\r\n    },\r\n\r\n    /**\r\n     * Removes a global plugin from the Plugin Manager and Plugin Cache.\r\n     *\r\n     * It is up to you to remove all references to this plugin that you may hold within your game code.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#removeGlobalPlugin\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to remove.\r\n     */\r\n    removeGlobalPlugin: function (key)\r\n    {\r\n        var entry = this.getEntry(key);\r\n\r\n        if (entry)\r\n        {\r\n            Remove(this.plugins, entry);\r\n        }\r\n\r\n        PluginCache.removeCustom(key);\r\n    },\r\n\r\n    /**\r\n     * Removes a scene plugin from the Plugin Manager and Plugin Cache.\r\n     *\r\n     * This will not remove the plugin from any active Scenes that are already using it.\r\n     *\r\n     * It is up to you to remove all references to this plugin that you may hold within your game code.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#removeScenePlugin\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the plugin to remove.\r\n     */\r\n    removeScenePlugin: function (key)\r\n    {\r\n        Remove(this.scenePlugins, key);\r\n\r\n        PluginCache.remove(key);\r\n    },\r\n\r\n    /**\r\n     * Registers a new type of Game Object with the global Game Object Factory and / or Creator.\r\n     * This is usually called from within your Plugin code and is a helpful short-cut for creating\r\n     * new Game Objects.\r\n     *\r\n     * The key is the property that will be injected into the factories and used to create the\r\n     * Game Object. For example:\r\n     *\r\n     * ```javascript\r\n     * this.plugins.registerGameObject('clown', clownFactoryCallback, clownCreatorCallback);\r\n     * // later in your game code:\r\n     * this.add.clown();\r\n     * this.make.clown();\r\n     * ```\r\n     *\r\n     * The callbacks are what are called when the factories try to create a Game Object\r\n     * matching the given key. It's important to understand that the callbacks are invoked within\r\n     * the context of the GameObjectFactory. In this context there are several properties available\r\n     * to use:\r\n     *\r\n     * this.scene - A reference to the Scene that owns the GameObjectFactory.\r\n     * this.displayList - A reference to the Display List the Scene owns.\r\n     * this.updateList - A reference to the Update List the Scene owns.\r\n     *\r\n     * See the GameObjectFactory and GameObjectCreator classes for more details.\r\n     * Any public property or method listed is available from your callbacks under `this`.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#registerGameObject\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the Game Object that the given callbacks will create, i.e. `image`, `sprite`.\r\n     * @param {function} [factoryCallback] - The callback to invoke when the Game Object Factory is called.\r\n     * @param {function} [creatorCallback] - The callback to invoke when the Game Object Creator is called.\r\n     */\r\n    registerGameObject: function (key, factoryCallback, creatorCallback)\r\n    {\r\n        if (factoryCallback)\r\n        {\r\n            GameObjectFactory.register(key, factoryCallback);\r\n        }\r\n\r\n        if (creatorCallback)\r\n        {\r\n            GameObjectCreator.register(key, creatorCallback);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes a previously registered Game Object from the global Game Object Factory and / or Creator.\r\n     * This is usually called from within your Plugin destruction code to help clean-up after your plugin has been removed.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#removeGameObject\r\n     * @since 3.19.0\r\n     *\r\n     * @param {string} key - The key of the Game Object to be removed from the factories.\r\n     * @param {boolean} [removeFromFactory=true] - Should the Game Object be removed from the Game Object Factory?\r\n     * @param {boolean} [removeFromCreator=true] - Should the Game Object be removed from the Game Object Creator?\r\n     */\r\n    removeGameObject: function (key, removeFromFactory, removeFromCreator)\r\n    {\r\n        if (removeFromFactory === undefined) { removeFromFactory = true; }\r\n        if (removeFromCreator === undefined) { removeFromCreator = true; }\r\n\r\n        if (removeFromFactory)\r\n        {\r\n            GameObjectFactory.remove(key);\r\n        }\r\n\r\n        if (removeFromCreator)\r\n        {\r\n            GameObjectCreator.remove(key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Registers a new file type with the global File Types Manager, making it available to all Loader\r\n     * Plugins created after this.\r\n     *\r\n     * This is usually called from within your Plugin code and is a helpful short-cut for creating\r\n     * new loader file types.\r\n     *\r\n     * The key is the property that will be injected into the Loader Plugin and used to load the\r\n     * files. For example:\r\n     *\r\n     * ```javascript\r\n     * this.plugins.registerFileType('wad', doomWadLoaderCallback);\r\n     * // later in your preload code:\r\n     * this.load.wad();\r\n     * ```\r\n     *\r\n     * The callback is what is called when the loader tries to load a file  matching the given key.\r\n     * It's important to understand that the callback is invoked within\r\n     * the context of the LoaderPlugin. In this context there are several properties / methods available\r\n     * to use:\r\n     *\r\n     * this.addFile - A method to add the new file to the load queue.\r\n     * this.scene - The Scene that owns the Loader Plugin instance.\r\n     *\r\n     * See the LoaderPlugin class for more details. Any public property or method listed is available from\r\n     * your callback under `this`.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#registerFileType\r\n     * @since 3.8.0\r\n     *\r\n     * @param {string} key - The key of the Game Object that the given callbacks will create, i.e. `image`, `sprite`.\r\n     * @param {function} callback - The callback to invoke when the Game Object Factory is called.\r\n     * @param {Phaser.Scene} [addToScene] - Optionally add this file type into the Loader Plugin owned by the given Scene.\r\n     */\r\n    registerFileType: function (key, callback, addToScene)\r\n    {\r\n        FileTypesManager.register(key, callback);\r\n\r\n        if (addToScene && addToScene.sys.load)\r\n        {\r\n            addToScene.sys.load[key] = callback;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Plugin Manager and all associated plugins.\r\n     * It will iterate all plugins found and call their `destroy` methods.\r\n     *\r\n     * The PluginCache will remove all custom plugins.\r\n     *\r\n     * @method Phaser.Plugins.PluginManager#destroy\r\n     * @since 3.8.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        for (var i = 0; i < this.plugins.length; i++)\r\n        {\r\n            this.plugins[i].plugin.destroy();\r\n        }\r\n\r\n        PluginCache.destroyCustomPlugins();\r\n\r\n        if (this.game.noReturn)\r\n        {\r\n            PluginCache.destroyCorePlugins();\r\n        }\r\n\r\n        this.game = null;\r\n        this.plugins = [];\r\n        this.scenePlugins = [];\r\n    }\r\n\r\n});\r\n\r\n/*\r\n * \"Sometimes, the elegant implementation is just a function.\r\n * Not a method. Not a class. Not a framework. Just a function.\"\r\n *  -- John Carmack\r\n */\r\n\r\nmodule.exports = PluginManager;\r\n"],"names":["Class","PluginCache","SceneEvents","GameObjectCreator","initialize","scene","this","systems","sys","events","displayList","updateList","once","BOOT","boot","on","START","start","DESTROY","destroy","SHUTDOWN","shutdown","off","register","factoryType","factoryFunction","prototype","hasOwnProperty","remove","module","exports","GameObjectFactory","existing","child","renderCanvas","renderWebGL","add","preUpdate","types","FileTypesManager","install","loader","key","GameEvents","EventEmitter","GetFastValue","Remove","PluginManager","Extends","game","call","plugins","scenePlugins","_pendingGlobal","_pendingScene","isBooted","i","entry","plugin","mapping","data","config","list","installGlobalPlugins","concat","length","console","warn","installScenePlugins","installScenePlugin","addToScene","globalPlugins","pluginKey","pluginList","map","settings","s","hasCore","source","getCore","mapKey","custom","getDefaultScenePlugins","defaultPlugins","fromLoader","undefined","push","instance","hasCustom","registerCustom","getIndex","getEntry","idx","isActive","active","runAs","createEntry","getCustom","init","stop","get","autoStart","getClass","getCustomClass","removeGlobalPlugin","removeCustom","removeScenePlugin","registerGameObject","factoryCallback","creatorCallback","removeGameObject","removeFromFactory","removeFromCreator","registerFileType","callback","load","destroyCustomPlugins","noReturn","destroyCorePlugins"],"sourceRoot":""}