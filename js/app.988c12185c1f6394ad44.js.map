{"version":3,"file":"js/app.988c12185c1f6394ad44.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./src/app/gameobjects/lightpost.ts","webpack://@agogpixel/phaser3-demo/./src/app/plugins/lightpost-plugin.ts","webpack://@agogpixel/phaser3-demo/./src/app/scenes/main-scene.ts","webpack://@agogpixel/phaser3-demo/./src/app/scenes/preload-scene.ts","webpack://@agogpixel/phaser3-demo/./src/app/index.ts"],"sourcesContent":["/**\n *\n */\ntype LightpostFacing = 'left' | 'right';\n\n/**\n *\n */\nexport class Lightpost extends Phaser.GameObjects.Image {\n  /**\n   *\n   */\n  public static readonly key = 'lightpost';\n\n  /**\n   *\n   */\n  private static readonly textureKey = 'lightpost';\n\n  /**\n   *\n   */\n  private static readonly tilemapKey = 'lightpost';\n\n  /**\n   *\n   */\n  private static readonly tilemapLayerID = 'layer1';\n\n  /**\n   *\n   */\n  private static readonly tilemapLayerPropertyName = 'frames';\n\n  /**\n   *\n   */\n  private static readonly tilesetName = 'roguelikeCity_transparent';\n\n  /**\n   *\n   */\n  private static readonly originLeftFacing = new Phaser.Math.Vector2(0.75, 1);\n\n  /**\n   *\n   */\n  private static readonly originRightFacing = new Phaser.Math.Vector2(0.25, 1);\n\n  /**\n   *\n   */\n  private static readonly lightbarOriginLeftFacing = new Phaser.Math.Vector2(0.125, 0.085);\n\n  /**\n   *\n   */\n  private static readonly lightbarOriginRightFacing = new Phaser.Math.Vector2(0.5625, 0.085);\n\n  /**\n   *\n   */\n  private static readonly lightbarDimensions = new Phaser.Math.Vector2(5, 1);\n\n  /**\n   *\n   */\n  private static readonly lightbarCastForegroundMagnitude = 24;\n\n  /**\n   *\n   * @param config\n   * @param addToScene\n   * @returns\n   */\n  public static readonly creator = function creator(\n    config: Phaser.Types.GameObjects.GameObjectConfig & { facing: LightpostFacing },\n    addToScene?: boolean\n  ): Lightpost {\n    const lightpost = new Lightpost(this.scene, 0, 0, config.facing);\n\n    if (addToScene !== undefined) {\n      config.add = addToScene;\n    }\n\n    Phaser.GameObjects.BuildGameObject(this.scene, lightpost, config);\n\n    return lightpost;\n  };\n\n  /**\n   * Generate lightpost texture sheet, with indexed frames, from tilemap & tileset data. Assumes a custom property\n   * 'frames' exists on the tilemap layer. The value of this property must be a json string mapping facings 'left' &\n   * 'right' to their appropriate texture frame dimensions: [x,y,width,height];\n   *\n   * @param scene\n   * @returns\n   */\n  public static generateTexture(scene: Phaser.Scene): Phaser.Textures.Texture {\n    const tilemap = scene.make.tilemap({ key: Lightpost.tilemapKey });\n    const tileset = tilemap.addTilesetImage(Lightpost.tilesetName);\n\n    const layer = tilemap.createLayer(Lightpost.tilemapLayerID, tileset);\n    scene.children.remove(layer);\n\n    const renderTexture = scene.make.renderTexture({ x: 0, y: 0, width: layer.width, height: layer.height }, false);\n    const texture = renderTexture.draw(layer).saveTexture(Lightpost.textureKey);\n\n    const frames: Record<string, [number, number, number, number]> = JSON.parse(\n      layer.layer.properties.find((value) => value['name'] === Lightpost.tilemapLayerPropertyName)['value']\n    );\n\n    for (const [name, [x, y, w, h]] of Object.entries(frames)) {\n      texture.add(name, 0, x, y, w, h);\n    }\n\n    tilemap.destroy();\n    renderTexture.destroy();\n\n    return texture;\n  }\n\n  /**\n   *\n   * @param x\n   * @param y\n   * @param facing\n   * @returns\n   */\n  public static readonly factory = function factory(x: number, y: number, facing: LightpostFacing): Lightpost {\n    return (this.displayList as Phaser.Structs.List<Lightpost>).add(new Lightpost(this.scene, x, y, facing));\n  };\n\n  /**\n   *\n   * @param scene\n   * @param x\n   * @param y\n   * @param facing\n   */\n  public constructor(scene: Phaser.Scene, x: number, y: number, public readonly facing: LightpostFacing = 'left') {\n    super(scene, x, y, Lightpost.textureKey, facing);\n\n    let origin: Phaser.Math.Vector2;\n\n    switch (facing) {\n      case 'right':\n        origin = Lightpost.originRightFacing;\n        break;\n      case 'left':\n      default:\n        origin = Lightpost.originLeftFacing;\n        break;\n    }\n\n    this.setOrigin(origin.x, origin.y);\n  }\n\n  public castLighting(ambient: Phaser.Textures.CanvasTexture, minMagnitude = 0, maxMagnitude = 1): void {\n    maxMagnitude = Phaser.Math.Clamp(maxMagnitude, 0, 1);\n    minMagnitude = Phaser.Math.Clamp(minMagnitude, 0, maxMagnitude);\n\n    const lightbar = this.calculateLightbar();\n\n    this.castLightbar(lightbar, ambient, maxMagnitude);\n    this.castRays(lightbar, ambient, minMagnitude, maxMagnitude);\n    this.castForeground(lightbar, ambient, minMagnitude, maxMagnitude);\n\n    ambient.refresh();\n  }\n\n  /**\n   *\n   * @returns\n   */\n  private calculateLightbar(): Phaser.Geom.Rectangle {\n    let origin: Phaser.Math.Vector2;\n\n    switch (this.facing) {\n      case 'right':\n        origin = Lightpost.lightbarOriginRightFacing;\n        break;\n      case 'left':\n      default:\n        origin = Lightpost.lightbarOriginLeftFacing;\n        break;\n    }\n\n    const dimensions = Lightpost.lightbarDimensions;\n    const topLeft = this.getTopLeft(undefined, true);\n\n    const x = Math.floor(topLeft.x + this.displayWidth * origin.x);\n    const y = Math.floor(topLeft.y + this.displayHeight * origin.y);\n    const width = Math.floor(dimensions.x * this.scaleX);\n    const height = Math.floor(dimensions.y * this.scaleY);\n\n    return new Phaser.Geom.Rectangle(x, y, width, height);\n  }\n\n  /**\n   *\n   * @param lightbar\n   * @param ambient\n   * @param maxMagnitude\n   */\n  private castLightbar(\n    lightbar: Phaser.Geom.Rectangle,\n    ambient: Phaser.Textures.CanvasTexture,\n    maxMagnitude: number\n  ): void {\n    const imageData = ambient.context.getImageData(lightbar.x, lightbar.y, lightbar.width, lightbar.height);\n\n    for (let y = 0; y < lightbar.height; ++y) {\n      for (let x = 0; x < lightbar.width; ++x) {\n        const ix = 4 * (y * imageData.width + x);\n        imageData.data[ix + 3] = Math.floor(255 * (1 - maxMagnitude));\n      }\n    }\n\n    ambient.context.putImageData(imageData, lightbar.x, lightbar.y);\n  }\n\n  /**\n   *\n   * @param lightbar\n   * @param ambient\n   * @param minMagnitude\n   * @param maxMagnitude\n   */\n  private castRays(\n    lightbar: Phaser.Geom.Rectangle,\n    ambient: Phaser.Textures.CanvasTexture,\n    minMagnitude: number,\n    maxMagnitude: number\n  ): void {\n    const beginY = lightbar.bottom;\n    const endY = this.getBottomCenter().y;\n\n    const numSteps = endY - beginY;\n    const stepDelta = 1;\n\n    for (let step = 0; step < numSteps; step += stepDelta) {\n      const maxMagStep = step + 1;\n      const maxMagWidthDelta = maxMagStep * 2;\n      const maxMagWidth = lightbar.width + maxMagWidthDelta;\n\n      const grdMagStep = maxMagStep * 2;\n      const grdMagWidthDelta = grdMagStep * 2;\n\n      const sx = lightbar.left - maxMagStep - grdMagStep;\n      const sy = lightbar.bottom + step;\n      const sw = maxMagWidth + grdMagWidthDelta;\n      const sh = stepDelta;\n\n      const imageData = ambient.context.getImageData(sx, sy, sw, sh);\n\n      for (let y = 0; y < sh; ++y) {\n        for (let x = 0; x < sw; ++x) {\n          let magnitude = maxMagnitude;\n\n          if (x < grdMagStep) {\n            magnitude = Phaser.Math.Clamp(maxMagnitude * ((x + 1) / grdMagStep), minMagnitude, maxMagnitude);\n          } else if (x >= grdMagStep + maxMagWidth) {\n            magnitude = Phaser.Math.Clamp(\n              maxMagnitude * ((grdMagStep - (x - (grdMagStep + maxMagWidth) + 1)) / grdMagStep),\n              minMagnitude,\n              maxMagnitude\n            );\n          }\n\n          const ix = 4 * (y * imageData.width + x);\n          imageData.data[ix + 3] = 255 * (1 - magnitude);\n        }\n      }\n\n      ambient.context.putImageData(imageData, sx, sy);\n    }\n  }\n\n  /**\n   *\n   * @param lightbar\n   * @param ambient\n   * @param minMagnitude\n   * @param maxMagnitude\n   */\n  private castForeground(\n    lightbar: Phaser.Geom.Rectangle,\n    ambient: Phaser.Textures.CanvasTexture,\n    minMagnitude: number,\n    maxMagnitude: number\n  ): void {\n    const beginY = lightbar.bottom;\n    const endY = this.getBottomCenter().y;\n\n    const numSteps = endY - beginY;\n\n    const maxHeight = Math.floor(Lightpost.lightbarCastForegroundMagnitude * this.scaleY);\n\n    const stepDelta = 1; // Math.floor(maxWidth / maxHeight);\n\n    for (let step = 0; step < maxHeight; step += stepDelta) {\n      const maxMagStep = numSteps - step;\n      const maxMagWidthDelta = maxMagStep * 2;\n      const maxMagWidth = lightbar.width + maxMagWidthDelta;\n\n      const grdMagStep = maxMagStep * 2;\n      const grdMagWidthDelta = grdMagStep * 2;\n\n      const sx = lightbar.left - maxMagStep - grdMagStep;\n      const sy = lightbar.bottom + numSteps + step;\n      const sw = maxMagWidth + grdMagWidthDelta;\n      const sh = stepDelta;\n\n      const imageData = ambient.context.getImageData(sx, sy, sw, sh);\n\n      for (let y = 0; y < sh; ++y) {\n        for (let x = 0; x < sw; ++x) {\n          let magnitude = maxMagnitude;\n\n          if (x < grdMagStep) {\n            magnitude = Phaser.Math.Clamp(maxMagnitude * ((x + 1) / grdMagStep), minMagnitude, maxMagnitude);\n          } else if (x >= grdMagStep + maxMagWidth) {\n            magnitude = Phaser.Math.Clamp(\n              maxMagnitude * ((grdMagStep - (x - (grdMagStep + maxMagWidth) + 1)) / grdMagStep),\n              minMagnitude,\n              maxMagnitude\n            );\n          }\n\n          magnitude *= 1 - (step + 1) / maxHeight;\n          magnitude = Phaser.Math.Clamp(magnitude, minMagnitude, maxMagnitude);\n\n          const ix = 4 * (y * imageData.width + x);\n          imageData.data[ix + 3] = 255 * (1 - magnitude);\n        }\n      }\n\n      ambient.context.putImageData(imageData, sx, sy);\n    }\n  }\n}\n","import { Lightpost } from '../gameobjects';\n\nexport class LightpostPlugin extends Phaser.Plugins.BasePlugin {\n  public static readonly key = 'lightpostPlugin';\n\n  public constructor(pluginManager: Phaser.Plugins.PluginManager) {\n    super(pluginManager);\n\n    pluginManager.registerGameObject(Lightpost.key, Lightpost.factory, Lightpost.creator);\n  }\n}\n","import { Lightpost } from '../gameobjects';\n\n/**\n * Main scene.\n */\nexport class MainScene extends Phaser.Scene {\n  /**\n   * Scene key.\n   */\n  public static readonly key = 'Main';\n\n  /**\n   *\n   */\n  public static readonly scaleFactor = 4;\n\n  public readonly add: Phaser.GameObjects.GameObjectFactory & { [Lightpost.key]: typeof Lightpost.factory };\n\n  public readonly make: Phaser.GameObjects.GameObjectCreator & { [Lightpost.key]: typeof Lightpost.creator };\n\n  /**\n   * Keyboard controls.\n   */\n  private controls: Phaser.Cameras.Controls.FixedKeyControl;\n\n  /**\n   * Instantiate main scene.\n   */\n  public constructor() {\n    super(MainScene.key);\n  }\n\n  /**\n   * Lifecycle method called before all others.\n   */\n  public init(): void {\n    // Initially disable input.\n    this.input.keyboard.enabled = false;\n  }\n\n  /**\n   * Lifecycle method called after init & preload.\n   */\n  public create(): void {\n    // Scene fade in.\n    this.cameras.main.setAlpha(0);\n    this.events.once(Phaser.Scenes.Events.TRANSITION_START, (fromScene, duration) => {\n      this.tweens.add({\n        targets: this.cameras.main,\n        alpha: 1,\n        duration,\n        delay: 1000,\n        // Allow input after fade in complete.\n        onComplete: () => (this.input.keyboard.enabled = true)\n      });\n    });\n\n    const scaleFactor = MainScene.scaleFactor;\n\n    // Background.\n    const tilemap = this.make.tilemap({ key: 'background', insertNull: true });\n    const tileset = tilemap.addTilesetImage('roguelikeCity_transparent');\n    const layer = tilemap.createLayer('layer1', tileset).setScale(scaleFactor);\n    tilemap.createLayer('layer2', tileset).setScale(scaleFactor);\n\n    // Lightposts.\n    const cx = (tilemap.tileWidth / 2) * scaleFactor;\n    const cy = (tilemap.tileHeight / 2) * scaleFactor;\n    const v = new Phaser.Math.Vector2();\n    layer.tileToWorldXY(7, 9, v);\n    const lp1 = this.add\n      .lightpost(v.x + cx, v.y + cy + cy / 2, 'right')\n      .setScale(scaleFactor)\n      .setDepth(9);\n    layer.tileToWorldXY(23, 9, v);\n    const lp2 = this.add\n      .lightpost(v.x + cx, v.y + cy + cy / 2, 'right')\n      .setScale(scaleFactor)\n      .setDepth(9);\n    layer.tileToWorldXY(15, 15, v);\n    const lp3 = this.add\n      .lightpost(v.x + cx, v.y + cy - cy / 2, 'left')\n      .setScale(scaleFactor)\n      .setDepth(15);\n\n    // Rain particle emitter.\n    const rainEmitter = this.add\n      .particles('blue')\n      .setDepth(12)\n      .createEmitter({\n        x: { min: 0, max: layer.displayWidth },\n        y: 0,\n        lifespan: { min: 200, max: 1000 },\n        speedY: 1500,\n        scaleY: { min: 1, max: 4 },\n        scaleX: 0.01,\n        quantity: 1,\n        blendMode: 'SCREEN',\n        emitCallback: (particle: Phaser.GameObjects.Particles.Particle) =>\n          rainEmitter.manager.setDepth(Phaser.Math.RND.integerInRange(2, 50))\n      });\n\n    // Lighting.\n    const lightingTexture = this.textures.createCanvas('lighting', layer.displayWidth, layer.displayHeight);\n    lightingTexture.context.fillStyle = 'rgba(0, 0, 0, 0.75)';\n    lightingTexture.context.fillRect(0, 0, layer.displayWidth, layer.displayHeight);\n    lp1.castLighting(lightingTexture, 0.25);\n    lp2.castLighting(lightingTexture, 0.25);\n    lp3.castLighting(lightingTexture, 0.25);\n    this.add.image(0, 0, 'lighting').setOrigin(0).setDepth(100);\n\n    // Keyboard controls.\n    const cursors = this.input.keyboard.createCursorKeys();\n    this.controls = new Phaser.Cameras.Controls.FixedKeyControl({\n      camera: this.cameras.main,\n      left: cursors.left,\n      right: cursors.right,\n      up: cursors.up,\n      down: cursors.down,\n      speed: 0.5,\n      // TODO: weird - see Phaser.Cameras.Controls.FixedKeyControl zoom logic. Follow up with Phaser 3 maintainers...\n      zoomIn: this.input.keyboard.addKey('MINUS'),\n      zoomOut: this.input.keyboard.addKey('PLUS'),\n      maxZoom: 3,\n      minZoom: 0.5\n    });\n    this.add\n      .text(0, 0, ['Cursor keys to move camera.', 'Zoom In: +', 'Zoom Out: -'], { fontSize: '32px', color: '#ff00ff' })\n      .setDepth(1000)\n      .setScrollFactor(0);\n\n    // Set camera bounds to tilemap's current display dimensions.\n    this.cameras.main.setBounds(0, 0, layer.displayWidth, layer.displayHeight);\n    this.cameras.main.centerOn(layer.displayWidth / 2, layer.displayHeight / 2);\n  }\n\n  public update(time: number, delta: number): void {\n    this.controls.update(delta);\n  }\n}\n","import { Lightpost } from '../gameobjects';\nimport { MainScene } from './main-scene';\n\n/**\n * Preload scene.\n */\nexport class PreloadScene extends Phaser.Scene {\n  /**\n   * Scene key.\n   */\n  public static readonly key = 'Preload';\n\n  /**\n   * Instantiate load scene.\n   */\n  public constructor() {\n    super(PreloadScene.key);\n  }\n\n  /**\n   * Lifecycle method called after init & before create.\n   */\n  public preload(): void {\n    // Tileset.\n    this.load.image('roguelikeCity_transparent', 'assets/roguelikeCity_transparent.png');\n\n    // Tilemap data.\n    this.load.tilemapTiledJSON('background', 'assets/background.json');\n    this.load.tilemapTiledJSON('lightpost', 'assets/lightpost.json');\n\n    // Rain particle.\n    this.load.image('blue', 'assets/blue.png');\n  }\n\n  /**\n   * Lifecycle method called after init & preload.\n   */\n  public create(): void {\n    Lightpost.generateTexture(this);\n\n    this.scene.transition({\n      target: MainScene.key,\n      duration: 1500,\n      sleep: false,\n      allowInput: false,\n      onUpdate: (progress: number) => {\n        const style = document.getElementById('splashContainer').style;\n\n        style.opacity = (1 - progress).toString();\n\n        if (progress === 1) {\n          style.display = 'none';\n          style.opacity = '1';\n        }\n      }\n    });\n  }\n}\n","import { LightpostPlugin } from './plugins';\nimport { MainScene, PreloadScene } from './scenes';\n\nexport function app(): void {\n  new Phaser.Game({\n    title: 'agogpixel/phaser3-demo',\n    version: '0.0.0',\n    type: Phaser.AUTO,\n    parent: 'body',\n    pixelArt: true,\n    dom: {\n      createContainer: true\n    },\n    scale: {\n      mode: Phaser.Scale.FIT,\n      autoCenter: Phaser.Scale.CENTER_BOTH,\n      width: 1600,\n      height: 900\n    },\n    plugins: {\n      global: [{ key: LightpostPlugin.key, plugin: LightpostPlugin, start: true }]\n    },\n    scene: [PreloadScene, MainScene]\n  });\n}\n"],"names":["scene","x","y","facing","origin","Lightpost","textureKey","originRightFacing","originLeftFacing","setOrigin","generateTexture","tilemap","make","key","tilemapKey","tileset","addTilesetImage","tilesetName","layer","createLayer","tilemapLayerID","children","remove","renderTexture","width","height","texture","draw","saveTexture","frames","JSON","parse","properties","find","value","tilemapLayerPropertyName","Object","entries","w","h","add","destroy","castLighting","ambient","minMagnitude","maxMagnitude","Phaser","Math","Clamp","lightbar","this","calculateLightbar","castLightbar","castRays","castForeground","refresh","lightbarOriginRightFacing","lightbarOriginLeftFacing","dimensions","lightbarDimensions","topLeft","getTopLeft","undefined","floor","displayWidth","displayHeight","scaleX","scaleY","Geom","Rectangle","imageData","context","getImageData","ix","data","putImageData","beginY","bottom","numSteps","getBottomCenter","step","maxMagStep","maxMagWidthDelta","maxMagWidth","grdMagStep","grdMagWidthDelta","sx","left","sy","sw","magnitude","maxHeight","lightbarCastForegroundMagnitude","Vector2","creator","config","addToScene","lightpost","GameObjects","BuildGameObject","factory","displayList","Image","pluginManager","registerGameObject","Plugins","BasePlugin","MainScene","init","input","keyboard","enabled","create","cameras","main","setAlpha","events","once","Scenes","Events","TRANSITION_START","fromScene","duration","tweens","targets","alpha","delay","onComplete","scaleFactor","insertNull","setScale","cx","tileWidth","cy","tileHeight","v","tileToWorldXY","lp1","setDepth","lp2","lp3","rainEmitter","particles","createEmitter","min","max","lifespan","speedY","quantity","blendMode","emitCallback","particle","manager","RND","integerInRange","lightingTexture","textures","createCanvas","fillStyle","fillRect","image","cursors","createCursorKeys","controls","Cameras","Controls","FixedKeyControl","camera","right","up","down","speed","zoomIn","addKey","zoomOut","maxZoom","minZoom","text","fontSize","color","setScrollFactor","setBounds","centerOn","update","time","delta","Scene","PreloadScene","preload","load","tilemapTiledJSON","transition","target","sleep","allowInput","onUpdate","progress","style","document","getElementById","opacity","toString","display","Game","title","version","type","AUTO","parent","pixelArt","dom","createContainer","scale","mode","Scale","FIT","autoCenter","CENTER_BOTH","plugins","global","LightpostPlugin","plugin","start"],"sourceRoot":""}