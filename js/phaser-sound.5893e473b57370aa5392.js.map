{"version":3,"file":"js/phaser-sound.5893e473b57370aa5392.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/eventemitter3/index.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/BLUR_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/BOOT_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/CONTEXT_LOST_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/CONTEXT_RESTORED_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/DESTROY_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/FOCUS_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/HIDDEN_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/PAUSE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/POST_RENDER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/POST_STEP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/PRE_RENDER_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/PRE_STEP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/READY_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/RESUME_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/STEP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/VISIBLE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/core/events/index.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Clamp.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/BaseSound.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/BaseSoundManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/SoundManagerCreator.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/COMPLETE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/DECODED_ALL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/DECODED_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/DESTROY_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/DETUNE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/GLOBAL_DETUNE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/GLOBAL_MUTE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/GLOBAL_RATE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/GLOBAL_VOLUME_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/LOOPED_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/LOOP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/MUTE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/PAN_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/PAUSE_ALL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/PAUSE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/PLAY_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/RATE_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/RESUME_ALL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/RESUME_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/SEEK_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/STOP_ALL_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/STOP_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/UNLOCKED_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/VOLUME_EVENT.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/events/index.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/html5/HTML5AudioSound.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/html5/HTML5AudioSoundManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/index.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/noaudio/NoAudioSound.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/noaudio/NoAudioSoundManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/webaudio/WebAudioSound.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/sound/webaudio/WebAudioSoundManager.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/Class.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/NOOP.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/GetAll.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/GetFirst.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/array/SafeRange.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/base64/Base64ToArrayBuffer.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/object/Clone.js"],"sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Blur Event.\r\n * \r\n * This event is dispatched by the Game Visibility Handler when the window in which the Game instance is embedded\r\n * enters a blurred state. The blur event is raised when the window loses focus. This can happen if a user swaps\r\n * tab, or if they simply remove focus from the browser to another app.\r\n *\r\n * @event Phaser.Core.Events#BLUR\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'blur';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Boot Event.\r\n * \r\n * This event is dispatched when the Phaser Game instance has finished booting, but before it is ready to start running.\r\n * The global systems use this event to know when to set themselves up, dispatching their own `ready` events as required.\r\n *\r\n * @event Phaser.Core.Events#BOOT\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'boot';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Context Lost Event.\r\n * \r\n * This event is dispatched by the Game if the WebGL Renderer it is using encounters a WebGL Context Lost event from the browser.\r\n * \r\n * The partner event is `CONTEXT_RESTORED`.\r\n *\r\n * @event Phaser.Core.Events#CONTEXT_LOST\r\n * @since 3.19.0\r\n */\r\nmodule.exports = 'contextlost';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Context Restored Event.\r\n * \r\n * This event is dispatched by the Game if the WebGL Renderer it is using encounters a WebGL Context Restored event from the browser.\r\n * \r\n * The partner event is `CONTEXT_LOST`.\r\n *\r\n * @event Phaser.Core.Events#CONTEXT_RESTORED\r\n * @since 3.19.0\r\n */\r\nmodule.exports = 'contextrestored';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Destroy Event.\r\n * \r\n * This event is dispatched when the game instance has been told to destroy itself.\r\n * Lots of internal systems listen to this event in order to clear themselves out.\r\n * Custom plugins and game code should also do the same.\r\n *\r\n * @event Phaser.Core.Events#DESTROY\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'destroy';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Focus Event.\r\n * \r\n * This event is dispatched by the Game Visibility Handler when the window in which the Game instance is embedded\r\n * enters a focused state. The focus event is raised when the window re-gains focus, having previously lost it.\r\n *\r\n * @event Phaser.Core.Events#FOCUS\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'focus';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Hidden Event.\r\n * \r\n * This event is dispatched by the Game Visibility Handler when the document in which the Game instance is embedded\r\n * enters a hidden state. Only browsers that support the Visibility API will cause this event to be emitted.\r\n * \r\n * In most modern browsers, when the document enters a hidden state, the Request Animation Frame and setTimeout, which\r\n * control the main game loop, will automatically pause. There is no way to stop this from happening. It is something\r\n * your game should account for in its own code, should the pause be an issue (i.e. for multiplayer games)\r\n *\r\n * @event Phaser.Core.Events#HIDDEN\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'hidden';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Pause Event.\r\n * \r\n * This event is dispatched when the Game loop enters a paused state, usually as a result of the Visibility Handler.\r\n *\r\n * @event Phaser.Core.Events#PAUSE\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'pause';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Post-Render Event.\r\n * \r\n * This event is dispatched right at the end of the render process.\r\n * \r\n * Every Scene will have rendered and been drawn to the canvas by the time this event is fired.\r\n * Use it for any last minute post-processing before the next game step begins.\r\n *\r\n * @event Phaser.Core.Events#POST_RENDER\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)} renderer - A reference to the current renderer being used by the Game instance.\r\n */\r\nmodule.exports = 'postrender';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Post-Step Event.\r\n * \r\n * This event is dispatched after the Scene Manager has updated.\r\n * Hook into it from plugins or systems that need to do things before the render starts.\r\n *\r\n * @event Phaser.Core.Events#POST_STEP\r\n * @since 3.0.0\r\n * \r\n * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n */\r\nmodule.exports = 'poststep';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Pre-Render Event.\r\n * \r\n * This event is dispatched immediately before any of the Scenes have started to render.\r\n * \r\n * The renderer will already have been initialized this frame, clearing itself and preparing to receive the Scenes for rendering, but it won't have actually drawn anything yet.\r\n *\r\n * @event Phaser.Core.Events#PRE_RENDER\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)} renderer - A reference to the current renderer being used by the Game instance.\r\n */\r\nmodule.exports = 'prerender';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Pre-Step Event.\r\n * \r\n * This event is dispatched before the main Game Step starts. By this point in the game cycle none of the Scene updates have yet happened.\r\n * Hook into it from plugins or systems that need to update before the Scene Manager does.\r\n *\r\n * @event Phaser.Core.Events#PRE_STEP\r\n * @since 3.0.0\r\n * \r\n * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n */\r\nmodule.exports = 'prestep';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Ready Event.\r\n * \r\n * This event is dispatched when the Phaser Game instance has finished booting, the Texture Manager is fully ready,\r\n * and all local systems are now able to start.\r\n *\r\n * @event Phaser.Core.Events#READY\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'ready';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Resume Event.\r\n * \r\n * This event is dispatched when the game loop leaves a paused state and resumes running.\r\n *\r\n * @event Phaser.Core.Events#RESUME\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'resume';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Step Event.\r\n * \r\n * This event is dispatched after the Game Pre-Step and before the Scene Manager steps.\r\n * Hook into it from plugins or systems that need to update before the Scene Manager does, but after the core Systems have.\r\n *\r\n * @event Phaser.Core.Events#STEP\r\n * @since 3.0.0\r\n * \r\n * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n */\r\nmodule.exports = 'step';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Game Visible Event.\r\n * \r\n * This event is dispatched by the Game Visibility Handler when the document in which the Game instance is embedded\r\n * enters a visible state, previously having been hidden.\r\n * \r\n * Only browsers that support the Visibility API will cause this event to be emitted.\r\n *\r\n * @event Phaser.Core.Events#VISIBLE\r\n * @since 3.0.0\r\n */\r\nmodule.exports = 'visible';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Core.Events\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    BLUR: require('./BLUR_EVENT'),\r\n    BOOT: require('./BOOT_EVENT'),\r\n    CONTEXT_LOST: require('./CONTEXT_LOST_EVENT'),\r\n    CONTEXT_RESTORED: require('./CONTEXT_RESTORED_EVENT'),\r\n    DESTROY: require('./DESTROY_EVENT'),\r\n    FOCUS: require('./FOCUS_EVENT'),\r\n    HIDDEN: require('./HIDDEN_EVENT'),\r\n    PAUSE: require('./PAUSE_EVENT'),\r\n    POST_RENDER: require('./POST_RENDER_EVENT'),\r\n    POST_STEP: require('./POST_STEP_EVENT'),\r\n    PRE_RENDER: require('./PRE_RENDER_EVENT'),\r\n    PRE_STEP: require('./PRE_STEP_EVENT'),\r\n    READY: require('./READY_EVENT'),\r\n    RESUME: require('./RESUME_EVENT'),\r\n    STEP: require('./STEP_EVENT'),\r\n    VISIBLE: require('./VISIBLE_EVENT')\r\n\r\n};\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\r\n *\r\n * @function Phaser.Math.Clamp\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to be clamped.\r\n * @param {number} min - The minimum bounds.\r\n * @param {number} max - The maximum bounds.\r\n *\r\n * @return {number} The clamped value.\r\n */\r\nvar Clamp = function (value, min, max)\r\n{\r\n    return Math.max(min, Math.min(max, value));\r\n};\r\n\r\nmodule.exports = Clamp;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar Extend = require('../utils/object/Extend');\r\nvar NOOP = require('../utils/NOOP');\r\n\r\n/**\r\n * @classdesc\r\n * Class containing all the shared state and behavior of a sound object, independent of the implementation.\r\n *\r\n * @class BaseSound\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Sound.BaseSoundManager} manager - Reference to the current sound manager instance.\r\n * @param {string} key - Asset key for the sound.\r\n * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n */\r\nvar BaseSound = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function BaseSound (manager, key, config)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * Local reference to the sound manager.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#manager\r\n         * @type {Phaser.Sound.BaseSoundManager}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * Asset key for the sound.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#key\r\n         * @type {string}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.key = key;\r\n\r\n        /**\r\n         * Flag indicating if sound is currently playing.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#isPlaying\r\n         * @type {boolean}\r\n         * @default false\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isPlaying = false;\r\n\r\n        /**\r\n         * Flag indicating if sound is currently paused.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#isPaused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isPaused = false;\r\n\r\n        /**\r\n         * A property that holds the value of sound's actual playback rate,\r\n         * after its rate and detune values has been combined with global\r\n         * rate and detune values.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#totalRate\r\n         * @type {number}\r\n         * @default 1\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.totalRate = 1;\r\n\r\n        /**\r\n         * A value representing the duration, in seconds.\r\n         * It could be total sound duration or a marker duration.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#duration\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.duration = this.duration || 0;\r\n\r\n        /**\r\n         * The total duration of the sound in seconds.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#totalDuration\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.totalDuration = this.totalDuration || 0;\r\n\r\n        /**\r\n         * A config object used to store default sound settings' values.\r\n         * Default values will be set by properties' setters.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#config\r\n         * @type {Phaser.Types.Sound.SoundConfig}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.config = {\r\n\r\n            mute: false,\r\n            volume: 1,\r\n            rate: 1,\r\n            detune: 0,\r\n            seek: 0,\r\n            loop: false,\r\n            delay: 0,\r\n            pan: 0\r\n\r\n        };\r\n\r\n        /**\r\n         * Reference to the currently used config.\r\n         * It could be default config or marker config.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#currentConfig\r\n         * @type {Phaser.Types.Sound.SoundConfig}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.currentConfig = this.config;\r\n\r\n        this.config = Extend(this.config, config);\r\n\r\n        /**\r\n         * Object containing markers definitions.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#markers\r\n         * @type {Object.<string, Phaser.Types.Sound.SoundMarker>}\r\n         * @default {}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.markers = {};\r\n\r\n        /**\r\n         * Currently playing marker.\r\n         * 'null' if whole sound is playing.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#currentMarker\r\n         * @type {Phaser.Types.Sound.SoundMarker}\r\n         * @default null\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.currentMarker = null;\r\n\r\n        /**\r\n         * Flag indicating if destroy method was called on this sound.\r\n         *\r\n         * @name Phaser.Sound.BaseSound#pendingRemove\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.pendingRemove = false;\r\n    },\r\n\r\n    /**\r\n     * Adds a marker into the current sound. A marker is represented by name, start time, duration, and optionally config object.\r\n     * This allows you to bundle multiple sounds together into a single audio file and use markers to jump between them for playback.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#addMarker\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Sound.SoundMarker} marker - Marker object.\r\n     *\r\n     * @return {boolean} Whether the marker was added successfully.\r\n     */\r\n    addMarker: function (marker)\r\n    {\r\n        if (!marker || !marker.name || typeof marker.name !== 'string')\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (this.markers[marker.name])\r\n        {\r\n            // eslint-disable-next-line no-console\r\n            console.error('addMarker ' + marker.name + ' already exists in Sound');\r\n\r\n            return false;\r\n        }\r\n\r\n        marker = Extend(true, {\r\n            name: '',\r\n            start: 0,\r\n            duration: this.totalDuration - (marker.start || 0),\r\n            config: {\r\n                mute: false,\r\n                volume: 1,\r\n                rate: 1,\r\n                detune: 0,\r\n                seek: 0,\r\n                loop: false,\r\n                delay: 0,\r\n                pan: 0\r\n            }\r\n        }, marker);\r\n\r\n        this.markers[marker.name] = marker;\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Updates previously added marker.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#updateMarker\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Sound.SoundMarker} marker - Marker object with updated values.\r\n     *\r\n     * @return {boolean} Whether the marker was updated successfully.\r\n     */\r\n    updateMarker: function (marker)\r\n    {\r\n        if (!marker || !marker.name || typeof marker.name !== 'string')\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!this.markers[marker.name])\r\n        {\r\n            // eslint-disable-next-line no-console\r\n            console.warn('Audio Marker: ' + marker.name + ' missing in Sound: ' + this.key);\r\n\r\n            return false;\r\n        }\r\n\r\n        this.markers[marker.name] = Extend(true, this.markers[marker.name], marker);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Removes a marker from the sound.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#removeMarker\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} markerName - The name of the marker to remove.\r\n     *\r\n     * @return {?Phaser.Types.Sound.SoundMarker} Removed marker object or 'null' if there was no marker with provided name.\r\n     */\r\n    removeMarker: function (markerName)\r\n    {\r\n        var marker = this.markers[markerName];\r\n\r\n        if (!marker)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        this.markers[markerName] = null;\r\n\r\n        return marker;\r\n    },\r\n\r\n    /**\r\n     * Play this sound, or a marked section of it.\r\n     * It always plays the sound from the start. If you want to start playback from a specific time\r\n     * you can set 'seek' setting of the config object, provided to this call, to that value.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#play\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Sound.SoundConfig)} [markerName=''] - If you want to play a marker then provide the marker name here. Alternatively, this parameter can be a SoundConfig object.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.\r\n     *\r\n     * @return {boolean} Whether the sound started playing successfully.\r\n     */\r\n    play: function (markerName, config)\r\n    {\r\n        if (markerName === undefined) { markerName = ''; }\r\n\r\n        if (typeof markerName === 'object')\r\n        {\r\n            config = markerName;\r\n            markerName = '';\r\n        }\r\n\r\n        if (typeof markerName !== 'string')\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!markerName)\r\n        {\r\n            this.currentMarker = null;\r\n            this.currentConfig = this.config;\r\n            this.duration = this.totalDuration;\r\n        }\r\n        else\r\n        {\r\n            if (!this.markers[markerName])\r\n            {\r\n                // eslint-disable-next-line no-console\r\n                console.warn('Marker: ' + markerName + ' missing in Sound: ' + this.key);\r\n\r\n                return false;\r\n            }\r\n\r\n            this.currentMarker = this.markers[markerName];\r\n            this.currentConfig = this.currentMarker.config;\r\n            this.duration = this.currentMarker.duration;\r\n        }\r\n\r\n        this.resetConfig();\r\n\r\n        this.currentConfig = Extend(this.currentConfig, config);\r\n\r\n        this.isPlaying = true;\r\n        this.isPaused = false;\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Pauses the sound.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was paused successfully.\r\n     */\r\n    pause: function ()\r\n    {\r\n        if (this.isPaused || !this.isPlaying)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        this.isPlaying = false;\r\n        this.isPaused = true;\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Resumes the sound.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was resumed successfully.\r\n     */\r\n    resume: function ()\r\n    {\r\n        if (!this.isPaused || this.isPlaying)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        this.isPlaying = true;\r\n        this.isPaused = false;\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Stop playing this sound.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was stopped successfully.\r\n     */\r\n    stop: function ()\r\n    {\r\n        if (!this.isPaused && !this.isPlaying)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        this.isPlaying = false;\r\n        this.isPaused = false;\r\n\r\n        this.resetConfig();\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Method used internally for applying config values to some of the sound properties.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#applyConfig\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    applyConfig: function ()\r\n    {\r\n        this.mute = this.currentConfig.mute;\r\n        this.volume = this.currentConfig.volume;\r\n        this.rate = this.currentConfig.rate;\r\n        this.detune = this.currentConfig.detune;\r\n        this.loop = this.currentConfig.loop;\r\n        this.pan = this.currentConfig.pan;\r\n    },\r\n\r\n    /**\r\n     * Method used internally for resetting values of some of the config properties.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#resetConfig\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    resetConfig: function ()\r\n    {\r\n        this.currentConfig.seek = 0;\r\n        this.currentConfig.delay = 0;\r\n    },\r\n\r\n    /**\r\n     * Update method called automatically by sound manager on every game step.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#update\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time elapsed since the last frame.\r\n     */\r\n    update: NOOP,\r\n\r\n    /**\r\n     * Method used internally to calculate total playback rate of the sound.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#calculateRate\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    calculateRate: function ()\r\n    {\r\n        var cent = 1.0005777895065548; // Math.pow(2, 1/1200);\r\n        var totalDetune = this.currentConfig.detune + this.manager.detune;\r\n        var detuneRate = Math.pow(cent, totalDetune);\r\n\r\n        this.totalRate = this.currentConfig.rate * this.manager.rate * detuneRate;\r\n    },\r\n\r\n    /**\r\n     * Destroys this sound and all associated events and marks it for removal from the sound manager.\r\n     *\r\n     * @method Phaser.Sound.BaseSound#destroy\r\n     * @fires Phaser.Sound.Events#DESTROY\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        if (this.pendingRemove)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.emit(Events.DESTROY, this);\r\n        this.pendingRemove = true;\r\n        this.manager = null;\r\n        this.key = '';\r\n        this.removeAllListeners();\r\n        this.isPlaying = false;\r\n        this.isPaused = false;\r\n        this.config = null;\r\n        this.currentConfig = null;\r\n        this.markers = null;\r\n        this.currentMarker = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseSound;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Clone = require('../utils/object/Clone');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar GameEvents = require('../core/events');\r\nvar NOOP = require('../utils/NOOP');\r\nvar GetAll = require('../utils/array/GetAll');\r\nvar GetFirst = require('../utils/array/GetFirst');\r\n\r\n/**\r\n * @classdesc\r\n * Base class for other Sound Manager classes.\r\n *\r\n * @class BaseSoundManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n *\r\n * @see Phaser.Sound.HTML5AudioSoundManager\r\n * @see Phaser.Sound.NoAudioSoundManager\r\n * @see Phaser.Sound.WebAudioSoundManager\r\n */\r\nvar BaseSoundManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function BaseSoundManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * Local reference to game.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#game\r\n         * @type {Phaser.Game}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * Local reference to the JSON Cache, as used by Audio Sprites.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#jsonCache\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @readonly\r\n         * @since 3.7.0\r\n         */\r\n        this.jsonCache = game.cache.json;\r\n\r\n        /**\r\n         * An array containing all added sounds.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#sounds\r\n         * @type {Phaser.Sound.BaseSound[]}\r\n         * @default []\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.sounds = [];\r\n\r\n        /**\r\n         * Global mute setting.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#mute\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.mute = false;\r\n\r\n        /**\r\n         * Global volume setting.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#volume\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.volume = 1;\r\n\r\n        /**\r\n         * Flag indicating if sounds should be paused when game looses focus,\r\n         * for instance when user switches to another tab/program/app.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#pauseOnBlur\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.pauseOnBlur = true;\r\n\r\n        /**\r\n         * Property that actually holds the value of global playback rate.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#_rate\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._rate = 1;\r\n\r\n        /**\r\n         * Property that actually holds the value of global detune.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#_detune\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._detune = 0;\r\n\r\n        /**\r\n         * Mobile devices require sounds to be triggered from an explicit user action,\r\n         * such as a tap, before any sound can be loaded/played on a web page.\r\n         * Set to true if the audio system is currently locked awaiting user interaction.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#locked\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.locked = this.locked || false;\r\n\r\n        /**\r\n         * Flag used internally for handling when the audio system\r\n         * has been unlocked, if there ever was a need for it.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#unlocked\r\n         * @type {boolean}\r\n         * @default false\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.unlocked = false;\r\n\r\n        game.events.on(GameEvents.BLUR, this.onGameBlur, this);\r\n        game.events.on(GameEvents.FOCUS, this.onGameFocus, this);\r\n        game.events.on(GameEvents.PRE_STEP, this.update, this);\r\n        game.events.once(GameEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound into the sound manager.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#add\r\n     * @override\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.BaseSound} The new sound instance.\r\n     */\r\n    add: NOOP,\r\n\r\n    /**\r\n     * Adds a new audio sprite sound into the sound manager.\r\n     * Audio Sprites are a combination of audio files and a JSON configuration.\r\n     * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#addAudioSprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {(Phaser.Sound.HTML5AudioSound|Phaser.Sound.WebAudioSound)} The new audio sprite sound instance.\r\n     */\r\n    addAudioSprite: function (key, config)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n\r\n        var sound = this.add(key, config);\r\n\r\n        sound.spritemap = this.jsonCache.get(key).spritemap;\r\n\r\n        for (var markerName in sound.spritemap)\r\n        {\r\n            if (!sound.spritemap.hasOwnProperty(markerName))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var markerConfig = Clone(config);\r\n\r\n            var marker = sound.spritemap[markerName];\r\n\r\n            markerConfig.loop = (marker.hasOwnProperty('loop')) ? marker.loop : false;\r\n\r\n            sound.addMarker({\r\n                name: markerName,\r\n                start: marker.start,\r\n                duration: marker.end - marker.start,\r\n                config: markerConfig\r\n            });\r\n        }\r\n\r\n        return sound;\r\n    },\r\n\r\n    /**\r\n     * Gets the first sound in the manager matching the given key, if any.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#get\r\n     * @since 3.23.0\r\n     *\r\n     * @param {string} key - Sound asset key.\r\n     *\r\n     * @return {?Phaser.Sound.BaseSound} - The sound, or null.\r\n     */\r\n    get: function (key)\r\n    {\r\n        return GetFirst(this.sounds, 'key', key);\r\n    },\r\n\r\n    /**\r\n     * Gets any sounds in the manager matching the given key.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#getAll\r\n     * @since 3.23.0\r\n     *\r\n     * @param {string} key - Sound asset key.\r\n     *\r\n     * @return {Phaser.Sound.BaseSound[]} - The sounds, or an empty array.\r\n     */\r\n    getAll: function (key)\r\n    {\r\n        return GetAll(this.sounds, 'key', key);\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound to the sound manager and plays it.\r\n     * The sound will be automatically removed (destroyed) once playback ends.\r\n     * This lets you play a new sound on the fly without the need to keep a reference to it.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#play\r\n     * @listens Phaser.Sound.Events#COMPLETE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {(Phaser.Types.Sound.SoundConfig|Phaser.Types.Sound.SoundMarker)} [extra] - An optional additional object containing settings to be applied to the sound. It could be either config or marker object.\r\n     *\r\n     * @return {boolean} Whether the sound started playing successfully.\r\n     */\r\n    play: function (key, extra)\r\n    {\r\n        var sound = this.add(key);\r\n\r\n        sound.once(Events.COMPLETE, sound.destroy, sound);\r\n\r\n        if (extra)\r\n        {\r\n            if (extra.name)\r\n            {\r\n                sound.addMarker(extra);\r\n\r\n                return sound.play(extra.name);\r\n            }\r\n            else\r\n            {\r\n                return sound.play(extra);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return sound.play();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds a new audio sprite sound to the sound manager and plays it.\r\n     * The sprite will be automatically removed (destroyed) once playback ends.\r\n     * This lets you play a new sound on the fly without the need to keep a reference to it.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#playAudioSprite\r\n     * @listens Phaser.Sound.Events#COMPLETE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {string} spriteName - The name of the sound sprite to play.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {boolean} Whether the audio sprite sound started playing successfully.\r\n     */\r\n    playAudioSprite: function (key, spriteName, config)\r\n    {\r\n        var sound = this.addAudioSprite(key);\r\n\r\n        sound.once(Events.COMPLETE, sound.destroy, sound);\r\n\r\n        return sound.play(spriteName, config);\r\n    },\r\n\r\n    /**\r\n     * Removes a sound from the sound manager.\r\n     * The removed sound is destroyed before removal.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Sound.BaseSound} sound - The sound object to remove.\r\n     *\r\n     * @return {boolean} True if the sound was removed successfully, otherwise false.\r\n     */\r\n    remove: function (sound)\r\n    {\r\n        var index = this.sounds.indexOf(sound);\r\n\r\n        if (index !== -1)\r\n        {\r\n            sound.destroy();\r\n\r\n            this.sounds.splice(index, 1);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n\r\n    /**\r\n     * Removes all sounds from the manager, destroying the sounds.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#removeAll\r\n     * @since 3.23.0\r\n     */\r\n    removeAll: function ()\r\n    {\r\n        this.sounds.forEach(function (sound)\r\n        {\r\n            sound.destroy();\r\n        });\r\n\r\n        this.sounds.length = 0;\r\n    },\r\n\r\n    /**\r\n     * Removes all sounds from the sound manager that have an asset key matching the given value.\r\n     * The removed sounds are destroyed before removal.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#removeByKey\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key to match when removing sound objects.\r\n     *\r\n     * @return {number} The number of matching sound objects that were removed.\r\n     */\r\n    removeByKey: function (key)\r\n    {\r\n        var removed = 0;\r\n\r\n        for (var i = this.sounds.length - 1; i >= 0; i--)\r\n        {\r\n            var sound = this.sounds[i];\r\n\r\n            if (sound.key === key)\r\n            {\r\n                sound.destroy();\r\n\r\n                this.sounds.splice(i, 1);\r\n\r\n                removed++;\r\n            }\r\n        }\r\n\r\n        return removed;\r\n    },\r\n\r\n    /**\r\n     * Pauses all the sounds in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#pauseAll\r\n     * @fires Phaser.Sound.Events#PAUSE_ALL\r\n     * @since 3.0.0\r\n     */\r\n    pauseAll: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.pause();\r\n        });\r\n\r\n        this.emit(Events.PAUSE_ALL, this);\r\n    },\r\n\r\n    /**\r\n     * Resumes all the sounds in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#resumeAll\r\n     * @fires Phaser.Sound.Events#RESUME_ALL\r\n     * @since 3.0.0\r\n     */\r\n    resumeAll: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.resume();\r\n        });\r\n\r\n        this.emit(Events.RESUME_ALL, this);\r\n    },\r\n\r\n    /**\r\n     * Stops all the sounds in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#stopAll\r\n     * @fires Phaser.Sound.Events#STOP_ALL\r\n     * @since 3.0.0\r\n     */\r\n    stopAll: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.stop();\r\n        });\r\n\r\n        this.emit(Events.STOP_ALL, this);\r\n    },\r\n\r\n\r\n    /**\r\n     * Stops any sounds matching the given key.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#stopByKey\r\n     * @since 3.23.0\r\n     *\r\n     * @param {string} key - Sound asset key.\r\n     *\r\n     * @return {number} - How many sounds were stopped.\r\n     */\r\n    stopByKey: function (key)\r\n    {\r\n        var stopped = 0;\r\n\r\n        this.getAll(key).forEach(function (sound)\r\n        {\r\n            if (sound.stop()) { stopped++; }\r\n        });\r\n\r\n        return stopped;\r\n    },\r\n\r\n    /**\r\n     * Method used internally for unlocking audio playback on devices that\r\n     * require user interaction before any sound can be played on a web page.\r\n     *\r\n     * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#unlock\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    unlock: NOOP,\r\n\r\n    /**\r\n     * Method used internally for pausing sound manager if\r\n     * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#onBlur\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: NOOP,\r\n\r\n    /**\r\n     * Method used internally for resuming sound manager if\r\n     * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#onFocus\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: NOOP,\r\n\r\n    /**\r\n     * Internal handler for Phaser.Core.Events#BLUR.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#onGameBlur\r\n     * @private\r\n     * @since 3.23.0\r\n     */\r\n    onGameBlur: function ()\r\n    {\r\n        if (this.pauseOnBlur)\r\n        {\r\n            this.onBlur();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal handler for Phaser.Core.Events#FOCUS.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#onGameFocus\r\n     * @private\r\n     * @since 3.23.0\r\n     */\r\n    onGameFocus: function ()\r\n    {\r\n        if (this.pauseOnBlur)\r\n        {\r\n            this.onFocus();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update method called on every game step.\r\n     * Removes destroyed sounds and updates every active sound in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#update\r\n     * @protected\r\n     * @fires Phaser.Sound.Events#UNLOCKED\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (this.unlocked)\r\n        {\r\n            this.unlocked = false;\r\n            this.locked = false;\r\n\r\n            this.emit(Events.UNLOCKED, this);\r\n        }\r\n\r\n        for (var i = this.sounds.length - 1; i >= 0; i--)\r\n        {\r\n            if (this.sounds[i].pendingRemove)\r\n            {\r\n                this.sounds.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.sounds.forEach(function (sound)\r\n        {\r\n            sound.update(time, delta);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Destroys all the sounds in the game and all associated events.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.game.events.off(GameEvents.BLUR, this.onGameBlur, this);\r\n        this.game.events.off(GameEvents.FOCUS, this.onGameFocus, this);\r\n        this.game.events.off(GameEvents.PRE_STEP, this.update, this);\r\n\r\n        this.removeAllListeners();\r\n\r\n        this.removeAll();\r\n\r\n        this.sounds.length = 0;\r\n        this.sounds = null;\r\n\r\n        this.game = null;\r\n    },\r\n\r\n    /**\r\n     * Method used internally for iterating only over active sounds and skipping sounds that are marked for removal.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#forEachActiveSound\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Sound.EachActiveSoundCallback} callback - Callback function. (manager: Phaser.Sound.BaseSoundManager, sound: Phaser.Sound.BaseSound, index: number, sounds: Phaser.Manager.BaseSound[]) => void\r\n     * @param {*} [scope] - Callback context.\r\n     */\r\n    forEachActiveSound: function (callback, scope)\r\n    {\r\n        var _this = this;\r\n\r\n        this.sounds.forEach(function (sound, index)\r\n        {\r\n            if (sound && !sound.pendingRemove)\r\n            {\r\n                callback.call(scope || _this, sound, index, _this.sounds);\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Sets the global playback rate at which all the sounds will be played.\r\n     *\r\n     * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audios playback speed.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#setRate\r\n     * @fires Phaser.Sound.Events#GLOBAL_RATE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - Global playback rate at which all the sounds will be played.\r\n     *\r\n     * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n     */\r\n    setRate: function (value)\r\n    {\r\n        this.rate = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Global playback rate at which all the sounds will be played.\r\n     * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audio's playback speed.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#rate\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    rate: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._rate;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._rate = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.calculateRate();\r\n            });\r\n\r\n            this.emit(Events.GLOBAL_RATE, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#setDetune\r\n     * @fires Phaser.Sound.Events#GLOBAL_DETUNE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n     */\r\n    setDetune: function (value)\r\n    {\r\n        this.detune = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#detune\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    detune: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._detune;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._detune = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.calculateRate();\r\n            });\r\n\r\n            this.emit(Events.GLOBAL_DETUNE, this, value);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseSoundManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar HTML5AudioSoundManager = require('./html5/HTML5AudioSoundManager');\r\nvar NoAudioSoundManager = require('./noaudio/NoAudioSoundManager');\r\nvar WebAudioSoundManager = require('./webaudio/WebAudioSoundManager');\r\n\r\n/**\r\n * Creates a Web Audio, HTML5 Audio or No Audio Sound Manager based on config and device settings.\r\n *\r\n * Be aware of https://developers.google.com/web/updates/2017/09/autoplay-policy-changes\r\n *\r\n * @function Phaser.Sound.SoundManagerCreator\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n *\r\n * @return {(Phaser.Sound.HTML5AudioSoundManager|Phaser.Sound.WebAudioSoundManager|Phaser.Sound.NoAudioSoundManager)} The Sound Manager instance that was created.\r\n */\r\nvar SoundManagerCreator = {\r\n\r\n    create: function (game)\r\n    {\r\n        var audioConfig = game.config.audio;\r\n        var deviceAudio = game.device.audio;\r\n\r\n        if (audioConfig.noAudio || (!deviceAudio.webAudio && !deviceAudio.audioData))\r\n        {\r\n            return new NoAudioSoundManager(game);\r\n        }\r\n\r\n        if (deviceAudio.webAudio && !audioConfig.disableWebAudio)\r\n        {\r\n            return new WebAudioSoundManager(game);\r\n        }\r\n\r\n        return new HTML5AudioSoundManager(game);\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = SoundManagerCreator;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Complete Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they complete playback.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('complete', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('complete', listener);\r\n * music.play();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#COMPLETE\r\n * @since 3.16.1\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'complete';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Audio Data Decoded All Event.\r\n * \r\n * This event is dispatched by the Web Audio Sound Manager as a result of calling the `decodeAudio` method,\r\n * once all files passed to the method have been decoded (or errored).\r\n * \r\n * Use `Phaser.Sound.Events#DECODED` to listen for single sounds being decoded, and `DECODED_ALL` to\r\n * listen for them all completing.\r\n * \r\n * Listen to it from the Sound Manager in a Scene using `this.sound.on('decodedall', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * this.sound.once('decodedall', handler);\r\n * this.sound.decodeAudio([ audioFiles ]);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#DECODED_ALL\r\n * @since 3.18.0\r\n */\r\nmodule.exports = 'decodedall';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Audio Data Decoded Event.\r\n * \r\n * This event is dispatched by the Web Audio Sound Manager as a result of calling the `decodeAudio` method.\r\n * \r\n * Listen to it from the Sound Manager in a Scene using `this.sound.on('decoded', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * this.sound.on('decoded', handler);\r\n * this.sound.decodeAudio(key, audioData);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#DECODED\r\n * @since 3.18.0\r\n * \r\n * @param {string} key - The key of the audio file that was decoded and added to the audio cache.\r\n */\r\nmodule.exports = 'decoded';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Destroy Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are destroyed, either\r\n * directly or via a Sound Manager.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('destroy', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('destroy', listener);\r\n * music.destroy();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#DESTROY\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'destroy';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Detune Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their detune value changes.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('detune', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('detune', listener);\r\n * music.play();\r\n * music.setDetune(200);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#DETUNE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} detune - The new detune value of the Sound.\r\n */\r\nmodule.exports = 'detune';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Global Detune Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `detune` property of the Sound Manager is changed, which globally\r\n * adjusts the detuning of all active sounds.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('rate', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#GLOBAL_DETUNE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n * @param {number} detune - The updated detune value.\r\n */\r\nmodule.exports = 'detune';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Global Mute Event.\r\n * \r\n * This event is dispatched by the Sound Manager when its `mute` property is changed, either directly\r\n * or via the `setMute` method. This changes the mute state of all active sounds.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('mute', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#GLOBAL_MUTE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSoundManager|Phaser.Sound.HTML5AudioSoundManager)} soundManager - A reference to the Sound Manager that emitted the event.\r\n * @param {boolean} mute - The mute value. `true` if the Sound Manager is now muted, otherwise `false`.\r\n */\r\nmodule.exports = 'mute';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Global Rate Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `rate` property of the Sound Manager is changed, which globally\r\n * adjusts the playback rate of all active sounds.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('rate', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#GLOBAL_RATE\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n * @param {number} rate - The updated rate value.\r\n */\r\nmodule.exports = 'rate';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Global Volume Event.\r\n * \r\n * This event is dispatched by the Sound Manager when its `volume` property is changed, either directly\r\n * or via the `setVolume` method. This changes the volume of all active sounds.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('volume', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#GLOBAL_VOLUME\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSoundManager|Phaser.Sound.HTML5AudioSoundManager)} soundManager - A reference to the sound manager that emitted the event.\r\n * @param {number} volume - The new global volume of the Sound Manager.\r\n */\r\nmodule.exports = 'volume';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Looped Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they loop during playback.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('looped', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('looped', listener);\r\n * music.setLoop(true);\r\n * music.play();\r\n * ```\r\n * \r\n * This is not to be confused with the [LOOP]{@linkcode Phaser.Sound.Events#event:LOOP} event, which only emits when the loop state of a Sound is changed.\r\n *\r\n * @event Phaser.Sound.Events#LOOPED\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'looped';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Loop Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their loop state is changed.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('loop', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('loop', listener);\r\n * music.setLoop(true);\r\n * ```\r\n * \r\n * This is not to be confused with the [LOOPED]{@linkcode Phaser.Sound.Events#event:LOOPED} event, which emits each time a Sound loops during playback.\r\n *\r\n * @event Phaser.Sound.Events#LOOP\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {boolean} loop - The new loop value. `true` if the Sound will loop, otherwise `false`.\r\n */\r\nmodule.exports = 'loop';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Mute Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their mute state changes.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('mute', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('mute', listener);\r\n * music.play();\r\n * music.setMute(true);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#MUTE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {boolean} mute - The mute value. `true` if the Sound is now muted, otherwise `false`.\r\n */\r\nmodule.exports = 'mute';\r\n","/**\r\n * @author       pi-kei\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Pan Event.\r\n *\r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their pan changes.\r\n *\r\n * Listen to it from a Sound instance using `Sound.on('pan', listener)`, i.e.:\r\n *\r\n * ```javascript\r\n * var sound = this.sound.add('key');\r\n * sound.on('pan', listener);\r\n * sound.play();\r\n * sound.setPan(0.5);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#PAN\r\n * @since 3.50.0\r\n *\r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} pan - The new pan of the Sound.\r\n */\r\nmodule.exports = 'pan';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Pause All Sounds Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `pauseAll` method is invoked and after all current Sounds\r\n * have been paused.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('pauseall', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#PAUSE_ALL\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n */\r\nmodule.exports = 'pauseall';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Pause Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are paused.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('pause', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('pause', listener);\r\n * music.play();\r\n * music.pause();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#PAUSE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'pause';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Play Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are played.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('play', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('play', listener);\r\n * music.play();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#PLAY\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'play';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Rate Change Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their rate changes.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('rate', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('rate', listener);\r\n * music.play();\r\n * music.setRate(0.5);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#RATE\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} rate - The new rate of the Sound.\r\n */\r\nmodule.exports = 'rate';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Resume All Sounds Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `resumeAll` method is invoked and after all current Sounds\r\n * have been resumed.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('resumeall', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#RESUME_ALL\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n */\r\nmodule.exports = 'resumeall';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Resume Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are resumed from a paused state.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('resume', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('resume', listener);\r\n * music.play();\r\n * music.pause();\r\n * music.resume();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#RESUME\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'resume';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Seek Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are seeked to a new position.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('seek', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('seek', listener);\r\n * music.play();\r\n * music.setSeek(5000);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#SEEK\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} detune - The new detune value of the Sound.\r\n */\r\nmodule.exports = 'seek';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Stop All Sounds Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched when the `stopAll` method is invoked and after all current Sounds\r\n * have been stopped.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('stopall', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#STOP_ALL\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n */\r\nmodule.exports = 'stopall';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Stop Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are stopped.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('stop', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('stop', listener);\r\n * music.play();\r\n * music.stop();\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#STOP\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n */\r\nmodule.exports = 'stop';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Manager Unlocked Event.\r\n * \r\n * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\r\n * or the HTML5 Audio Manager. It is dispatched during the update loop when the Sound Manager becomes unlocked. For\r\n * Web Audio this is on the first user gesture on the page.\r\n * \r\n * Listen to it from a Scene using: `this.sound.on('unlocked', listener)`.\r\n *\r\n * @event Phaser.Sound.Events#UNLOCKED\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Sound.BaseSoundManager} soundManager - A reference to the sound manager that emitted the event.\r\n */\r\nmodule.exports = 'unlocked';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Sound Volume Event.\r\n * \r\n * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their volume changes.\r\n * \r\n * Listen to it from a Sound instance using `Sound.on('volume', listener)`, i.e.:\r\n * \r\n * ```javascript\r\n * var music = this.sound.add('key');\r\n * music.on('volume', listener);\r\n * music.play();\r\n * music.setVolume(0.5);\r\n * ```\r\n *\r\n * @event Phaser.Sound.Events#VOLUME\r\n * @since 3.0.0\r\n * \r\n * @param {(Phaser.Sound.WebAudioSound|Phaser.Sound.HTML5AudioSound)} sound - A reference to the Sound that emitted the event.\r\n * @param {number} volume - The new volume of the Sound.\r\n */\r\nmodule.exports = 'volume';\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Sound.Events\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    COMPLETE: require('./COMPLETE_EVENT'),\r\n    DECODED: require('./DECODED_EVENT'),\r\n    DECODED_ALL: require('./DECODED_ALL_EVENT'),\r\n    DESTROY: require('./DESTROY_EVENT'),\r\n    DETUNE: require('./DETUNE_EVENT'),\r\n    GLOBAL_DETUNE: require('./GLOBAL_DETUNE_EVENT'),\r\n    GLOBAL_MUTE: require('./GLOBAL_MUTE_EVENT'),\r\n    GLOBAL_RATE: require('./GLOBAL_RATE_EVENT'),\r\n    GLOBAL_VOLUME: require('./GLOBAL_VOLUME_EVENT'),\r\n    LOOP: require('./LOOP_EVENT'),\r\n    LOOPED: require('./LOOPED_EVENT'),\r\n    MUTE: require('./MUTE_EVENT'),\r\n    PAN: require('./PAN_EVENT'),\r\n    PAUSE_ALL: require('./PAUSE_ALL_EVENT'),\r\n    PAUSE: require('./PAUSE_EVENT'),\r\n    PLAY: require('./PLAY_EVENT'),\r\n    RATE: require('./RATE_EVENT'),\r\n    RESUME_ALL: require('./RESUME_ALL_EVENT'),\r\n    RESUME: require('./RESUME_EVENT'),\r\n    SEEK: require('./SEEK_EVENT'),\r\n    STOP_ALL: require('./STOP_ALL_EVENT'),\r\n    STOP: require('./STOP_EVENT'),\r\n    UNLOCKED: require('./UNLOCKED_EVENT'),\r\n    VOLUME: require('./VOLUME_EVENT')\r\n\r\n};\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseSound = require('../BaseSound');\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('../events');\r\nvar Clamp = require('../../math/Clamp');\r\n\r\n/**\r\n * @classdesc\r\n * HTML5 Audio implementation of the sound.\r\n *\r\n * @class HTML5AudioSound\r\n * @extends Phaser.Sound.BaseSound\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Sound.HTML5AudioSoundManager} manager - Reference to the current sound manager instance.\r\n * @param {string} key - Asset key for the sound.\r\n * @param {Phaser.Types.Sound.SoundConfig} [config={}] - An optional config object containing default sound settings.\r\n */\r\nvar HTML5AudioSound = new Class({\r\n\r\n    Extends: BaseSound,\r\n\r\n    initialize:\r\n\r\n    function HTML5AudioSound (manager, key, config)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n\r\n        /**\r\n         * An array containing all HTML5 Audio tags that could be used for individual\r\n         * sound's playback. Number of instances depends on the config value passed\r\n         * to the Loader#audio method call, default is 1.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSound#tags\r\n         * @type {HTMLAudioElement[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.tags = manager.game.cache.audio.get(key);\r\n\r\n        if (!this.tags)\r\n        {\r\n            throw new Error('There is no audio asset with key \"' + key + '\" in the audio cache');\r\n        }\r\n\r\n        /**\r\n         * Reference to an HTML5 Audio tag used for playing sound.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSound#audio\r\n         * @type {HTMLAudioElement}\r\n         * @private\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.audio = null;\r\n\r\n        /**\r\n         * Timestamp as generated by the Request Animation Frame or SetTimeout\r\n         * representing the time at which the delayed sound playback should start.\r\n         * Set to 0 if sound playback is not delayed.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSound#startTime\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.startTime = 0;\r\n\r\n        /**\r\n         * Audio tag's playback position recorded on previous\r\n         * update method call. Set to 0 if sound is not playing.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSound#previousTime\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.previousTime = 0;\r\n\r\n        this.duration = this.tags[0].duration;\r\n\r\n        this.totalDuration = this.tags[0].duration;\r\n\r\n        BaseSound.call(this, manager, key, config);\r\n    },\r\n\r\n    /**\r\n     * Play this sound, or a marked section of it.\r\n     * It always plays the sound from the start. If you want to start playback from a specific time\r\n     * you can set 'seek' setting of the config object, provided to this call, to that value.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#play\r\n     * @fires Phaser.Sound.Events#PLAY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Sound.SoundConfig)} [markerName=''] - If you want to play a marker then provide the marker name here. Alternatively, this parameter can be a SoundConfig object.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.\r\n     *\r\n     * @return {boolean} Whether the sound started playing successfully.\r\n     */\r\n    play: function (markerName, config)\r\n    {\r\n        if (this.manager.isLocked(this, 'play', [ markerName, config ]))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.play.call(this, markerName, config))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = true, isPaused = false \\/\\/\\/\r\n        if (!this.pickAndPlayAudioTag())\r\n        {\r\n            return false;\r\n        }\r\n\r\n        this.emit(Events.PLAY, this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Pauses the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#pause\r\n     * @fires Phaser.Sound.Events#PAUSE\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was paused successfully.\r\n     */\r\n    pause: function ()\r\n    {\r\n        if (this.manager.isLocked(this, 'pause'))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (this.startTime > 0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.pause.call(this))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = false, isPaused = true \\/\\/\\/\r\n        this.currentConfig.seek = this.audio.currentTime - (this.currentMarker ? this.currentMarker.start : 0);\r\n\r\n        this.stopAndReleaseAudioTag();\r\n\r\n        this.emit(Events.PAUSE, this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Resumes the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#resume\r\n     * @fires Phaser.Sound.Events#RESUME\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was resumed successfully.\r\n     */\r\n    resume: function ()\r\n    {\r\n        if (this.manager.isLocked(this, 'resume'))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (this.startTime > 0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.resume.call(this))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = true, isPaused = false \\/\\/\\/\r\n        if (!this.pickAndPlayAudioTag())\r\n        {\r\n            return false;\r\n        }\r\n\r\n        this.emit(Events.RESUME, this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Stop playing this sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#stop\r\n     * @fires Phaser.Sound.Events#STOP\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was stopped successfully.\r\n     */\r\n    stop: function ()\r\n    {\r\n        if (this.manager.isLocked(this, 'stop'))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.stop.call(this))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = false, isPaused = false \\/\\/\\/\r\n        this.stopAndReleaseAudioTag();\r\n\r\n        this.emit(Events.STOP, this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Used internally to do what the name says.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#pickAndPlayAudioTag\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was assigned an audio tag successfully.\r\n     */\r\n    pickAndPlayAudioTag: function ()\r\n    {\r\n        if (!this.pickAudioTag())\r\n        {\r\n            this.reset();\r\n            return false;\r\n        }\r\n\r\n        var seek = this.currentConfig.seek;\r\n        var delay = this.currentConfig.delay;\r\n        var offset = (this.currentMarker ? this.currentMarker.start : 0) + seek;\r\n\r\n        this.previousTime = offset;\r\n        this.audio.currentTime = offset;\r\n        this.applyConfig();\r\n\r\n        if (delay === 0)\r\n        {\r\n            this.startTime = 0;\r\n\r\n            if (this.audio.paused)\r\n            {\r\n                this.playCatchPromise();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.startTime = window.performance.now() + delay * 1000;\r\n\r\n            if (!this.audio.paused)\r\n            {\r\n                this.audio.pause();\r\n            }\r\n        }\r\n\r\n        this.resetConfig();\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * This method performs the audio tag pooling logic. It first looks for\r\n     * unused audio tag to assign to this sound object. If there are no unused\r\n     * audio tags, based on HTML5AudioSoundManager#override property value, it\r\n     * looks for sound with most advanced playback and hijacks its audio tag or\r\n     * does nothing.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#pickAudioTag\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was assigned an audio tag successfully.\r\n     */\r\n    pickAudioTag: function ()\r\n    {\r\n        if (this.audio)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        for (var i = 0; i < this.tags.length; i++)\r\n        {\r\n            var audio = this.tags[i];\r\n\r\n            if (audio.dataset.used === 'false')\r\n            {\r\n                audio.dataset.used = 'true';\r\n                this.audio = audio;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.manager.override)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var otherSounds = [];\r\n\r\n        this.manager.forEachActiveSound(function (sound)\r\n        {\r\n            if (sound.key === this.key && sound.audio)\r\n            {\r\n                otherSounds.push(sound);\r\n            }\r\n        }, this);\r\n\r\n        otherSounds.sort(function (a1, a2)\r\n        {\r\n            if (a1.loop === a2.loop)\r\n            {\r\n                // sort by progress\r\n                return (a2.seek / a2.duration) - (a1.seek / a1.duration);\r\n            }\r\n            return a1.loop ? 1 : -1;\r\n        });\r\n\r\n        var selectedSound = otherSounds[0];\r\n\r\n        this.audio = selectedSound.audio;\r\n\r\n        selectedSound.reset();\r\n        selectedSound.audio = null;\r\n        selectedSound.startTime = 0;\r\n        selectedSound.previousTime = 0;\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Method used for playing audio tag and catching possible exceptions\r\n     * thrown from rejected Promise returned from play method call.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#playCatchPromise\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    playCatchPromise: function ()\r\n    {\r\n        var playPromise = this.audio.play();\r\n\r\n        if (playPromise)\r\n        {\r\n            // eslint-disable-next-line no-unused-vars\r\n            playPromise.catch(function (reason)\r\n            {\r\n                console.warn(reason);\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Used internally to do what the name says.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#stopAndReleaseAudioTag\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    stopAndReleaseAudioTag: function ()\r\n    {\r\n        this.startTime = 0;\r\n        this.previousTime = 0;\r\n\r\n        if (this.audio)\r\n        {\r\n            this.audio.pause();\r\n            this.audio.dataset.used = 'false';\r\n            this.audio = null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally to reset sound state, usually when stopping sound\r\n     * or when hijacking audio tag from another sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#reset\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        BaseSound.prototype.stop.call(this);\r\n    },\r\n\r\n    /**\r\n     * Method used internally by sound manager for pausing sound if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#onBlur\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        this.isPlaying = false;\r\n        this.isPaused = true;\r\n\r\n        this.currentConfig.seek = this.audio.currentTime - (this.currentMarker ? this.currentMarker.start : 0);\r\n\r\n        this.currentConfig.delay = Math.max(0, (this.startTime - window.performance.now()) / 1000);\r\n\r\n        this.stopAndReleaseAudioTag();\r\n    },\r\n\r\n    /**\r\n     * Method used internally by sound manager for resuming sound if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#onFocus\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        this.isPlaying = true;\r\n        this.isPaused = false;\r\n        this.pickAndPlayAudioTag();\r\n    },\r\n\r\n    /**\r\n     * Update method called automatically by sound manager on every game step.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#update\r\n     * @fires Phaser.Sound.Events#COMPLETE\r\n     * @fires Phaser.Sound.Events#LOOPED\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     */\r\n    update: function (time)\r\n    {\r\n        if (!this.isPlaying)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // handling delayed playback\r\n        if (this.startTime > 0)\r\n        {\r\n            if (this.startTime < time - this.manager.audioPlayDelay)\r\n            {\r\n                this.audio.currentTime += Math.max(0, time - this.startTime) / 1000;\r\n                this.startTime = 0;\r\n                this.previousTime = this.audio.currentTime;\r\n                this.playCatchPromise();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // handle looping and ending\r\n        var startTime = this.currentMarker ? this.currentMarker.start : 0;\r\n        var endTime = startTime + this.duration;\r\n        var currentTime = this.audio.currentTime;\r\n\r\n        if (this.currentConfig.loop)\r\n        {\r\n            if (currentTime >= endTime - this.manager.loopEndOffset)\r\n            {\r\n                this.audio.currentTime = startTime + Math.max(0, currentTime - endTime);\r\n                currentTime = this.audio.currentTime;\r\n            }\r\n            else if (currentTime < startTime)\r\n            {\r\n                this.audio.currentTime += startTime;\r\n                currentTime = this.audio.currentTime;\r\n            }\r\n\r\n            if (currentTime < this.previousTime)\r\n            {\r\n                this.emit(Events.LOOPED, this);\r\n            }\r\n        }\r\n        else if (currentTime >= endTime)\r\n        {\r\n            this.reset();\r\n\r\n            this.stopAndReleaseAudioTag();\r\n\r\n            this.emit(Events.COMPLETE, this);\r\n\r\n            return;\r\n        }\r\n\r\n        this.previousTime = currentTime;\r\n    },\r\n\r\n    /**\r\n     * Calls Phaser.Sound.BaseSound#destroy method\r\n     * and cleans up all HTML5 Audio related stuff.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        BaseSound.prototype.destroy.call(this);\r\n\r\n        this.tags = null;\r\n\r\n        if (this.audio)\r\n        {\r\n            this.stopAndReleaseAudioTag();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally to determine mute setting of the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#updateMute\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    updateMute: function ()\r\n    {\r\n        if (this.audio)\r\n        {\r\n            this.audio.muted = this.currentConfig.mute || this.manager.mute;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally to calculate total volume of the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#updateVolume\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    updateVolume: function ()\r\n    {\r\n        if (this.audio)\r\n        {\r\n            this.audio.volume = Clamp(this.currentConfig.volume * this.manager.volume, 0, 1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally to calculate total playback rate of the sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#calculateRate\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    calculateRate: function ()\r\n    {\r\n        BaseSound.prototype.calculateRate.call(this);\r\n\r\n        if (this.audio)\r\n        {\r\n            this.audio.playbackRate = this.totalRate;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Boolean indicating whether the sound is muted or not.\r\n     * Gets or sets the muted state of this sound.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#mute\r\n     * @type {boolean}\r\n     * @default false\r\n     * @fires Phaser.Sound.Events#MUTE\r\n     * @since 3.0.0\r\n     */\r\n    mute: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.mute;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.mute = value;\r\n\r\n            if (this.manager.isLocked(this, 'mute', value))\r\n            {\r\n                return;\r\n            }\r\n\r\n            this.updateMute();\r\n\r\n            this.emit(Events.MUTE, this, value);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the muted state of this Sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setMute\r\n     * @fires Phaser.Sound.Events#MUTE\r\n     * @since 3.4.0\r\n     *\r\n     * @param {boolean} value - `true` to mute this sound, `false` to unmute it.\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setMute: function (value)\r\n    {\r\n        this.mute = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets or sets the volume of this sound, a value between 0 (silence) and 1 (full volume).\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#volume\r\n     * @type {number}\r\n     * @default 1\r\n     * @fires Phaser.Sound.Events#VOLUME\r\n     * @since 3.0.0\r\n     */\r\n    volume: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.volume;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.volume = value;\r\n\r\n            if (this.manager.isLocked(this, 'volume', value))\r\n            {\r\n                return;\r\n            }\r\n\r\n            this.updateVolume();\r\n\r\n            this.emit(Events.VOLUME, this, value);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the volume of this Sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setVolume\r\n     * @fires Phaser.Sound.Events#VOLUME\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - The volume of the sound.\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setVolume: function (value)\r\n    {\r\n        this.volume = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rate at which this Sound will be played.\r\n     * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audios playback speed.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#rate\r\n     * @type {number}\r\n     * @default 1\r\n     * @fires Phaser.Sound.Events#RATE\r\n     * @since 3.0.0\r\n     */\r\n    rate: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.rate;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.rate = value;\r\n\r\n            if (this.manager.isLocked(this, Events.RATE, value))\r\n            {\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                this.calculateRate();\r\n\r\n                this.emit(Events.RATE, this, value);\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the playback rate of this Sound.\r\n     *\r\n     * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audios playback speed.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setRate\r\n     * @fires Phaser.Sound.Events#RATE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The playback rate at of this Sound.\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setRate: function (value)\r\n    {\r\n        this.rate = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#detune\r\n     * @type {number}\r\n     * @default 0\r\n     * @fires Phaser.Sound.Events#DETUNE\r\n     * @since 3.0.0\r\n     */\r\n    detune: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.detune;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.detune = value;\r\n\r\n            if (this.manager.isLocked(this, Events.DETUNE, value))\r\n            {\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                this.calculateRate();\r\n\r\n                this.emit(Events.DETUNE, this, value);\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setDetune\r\n     * @fires Phaser.Sound.Events#DETUNE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setDetune: function (value)\r\n    {\r\n        this.detune = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Property representing the position of playback for this sound, in seconds.\r\n     * Setting it to a specific value moves current playback to that position.\r\n     * The value given is clamped to the range 0 to current marker duration.\r\n     * Setting seek of a stopped sound has no effect.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#seek\r\n     * @type {number}\r\n     * @fires Phaser.Sound.Events#SEEK\r\n     * @since 3.0.0\r\n     */\r\n    seek: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.isPlaying)\r\n            {\r\n                return this.audio.currentTime - (this.currentMarker ? this.currentMarker.start : 0);\r\n            }\r\n            else if (this.isPaused)\r\n            {\r\n                return this.currentConfig.seek;\r\n            }\r\n            else\r\n            {\r\n                return 0;\r\n            }\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.manager.isLocked(this, 'seek', value))\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (this.startTime > 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (this.isPlaying || this.isPaused)\r\n            {\r\n                value = Math.min(Math.max(0, value), this.duration);\r\n\r\n                if (this.isPlaying)\r\n                {\r\n                    this.previousTime = value;\r\n                    this.audio.currentTime = value;\r\n                }\r\n                else if (this.isPaused)\r\n                {\r\n                    this.currentConfig.seek = value;\r\n                }\r\n\r\n                this.emit(Events.SEEK, this, value);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Seeks to a specific point in this sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setSeek\r\n     * @fires Phaser.Sound.Events#SEEK\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - The point in the sound to seek to.\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setSeek: function (value)\r\n    {\r\n        this.seek = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Flag indicating whether or not the sound or current sound marker will loop.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#loop\r\n     * @type {boolean}\r\n     * @default false\r\n     * @fires Phaser.Sound.Events#LOOP\r\n     * @since 3.0.0\r\n     */\r\n    loop: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.loop;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.loop = value;\r\n\r\n            if (this.manager.isLocked(this, 'loop', value))\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (this.audio)\r\n            {\r\n                this.audio.loop = value;\r\n            }\r\n\r\n            this.emit(Events.LOOP, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the loop state of this Sound.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setLoop\r\n     * @fires Phaser.Sound.Events#LOOP\r\n     * @since 3.4.0\r\n     *\r\n     * @param {boolean} value - `true` to loop this sound, `false` to not loop it.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} This Sound instance.\r\n     */\r\n    setLoop: function (value)\r\n    {\r\n        this.loop = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets or sets the pan of this sound, a value between -1 (full left pan) and 1 (full right pan).\r\n     *\r\n     * Has no audible effect on HTML5 Audio Sound, but still generates the PAN Event.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSound#pan\r\n     * @type {number}\r\n     * @default 0\r\n     * @fires Phaser.Sound.Events#PAN\r\n     * @since 3.50.0\r\n     */\r\n    pan: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.pan;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.pan = value;\r\n\r\n            this.emit(Events.PAN, this, value);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the pan of this sound, a value between -1 (full left pan) and 1 (full right pan).\r\n     *\r\n     * Has no audible effect on HTML5 Audio Sound, but still generates the PAN Event.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSound#setPan\r\n     * @fires Phaser.Sound.Events#PAN\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} value - The pan of the sound. A value between -1 (full left pan) and 1 (full right pan).\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setPan: function (value)\r\n    {\r\n        this.pan = value;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = HTML5AudioSound;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseSoundManager = require('../BaseSoundManager');\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('../events');\r\nvar HTML5AudioSound = require('./HTML5AudioSound');\r\n\r\n/**\r\n * HTML5 Audio implementation of the Sound Manager.\r\n *\r\n * To play multiple instances of the same HTML5 Audio sound, you need to provide an `instances` value when\r\n * loading the sound with the Loader:\r\n *\r\n * ```javascript\r\n * this.load.audio('explosion', 'explosion.mp3', {\r\n *     instances: 2\r\n * });\r\n * ```\r\n *\r\n * Not all browsers can play all audio formats.\r\n *\r\n * There is a good guide to what's supported: [Cross-browser audio basics: Audio codec support](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).\r\n *\r\n * @class HTML5AudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar HTML5AudioSoundManager = new Class({\r\n\r\n    Extends: BaseSoundManager,\r\n\r\n    initialize:\r\n\r\n    function HTML5AudioSoundManager (game)\r\n    {\r\n        /**\r\n         * Flag indicating whether if there are no idle instances of HTML5 Audio tag,\r\n         * for any particular sound, if one of the used tags should be hijacked and used\r\n         * for succeeding playback or if succeeding Phaser.Sound.HTML5AudioSound#play\r\n         * call should be ignored.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#override\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.override = true;\r\n\r\n        /**\r\n         * Value representing time difference, in seconds, between calling\r\n         * play method on an audio tag and when it actually starts playing.\r\n         * It is used to achieve more accurate delayed sound playback.\r\n         *\r\n         * You might need to tweak this value to get the desired results\r\n         * since audio play delay varies depending on the browser/platform.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#audioPlayDelay\r\n         * @type {number}\r\n         * @default 0.1\r\n         * @since 3.0.0\r\n         */\r\n        this.audioPlayDelay = 0.1;\r\n\r\n        /**\r\n         * A value by which we should offset the loop end marker of the\r\n         * looping sound to compensate for lag, caused by changing audio\r\n         * tag playback position, in order to achieve gapless looping.\r\n         *\r\n         * You might need to tweak this value to get the desired results\r\n         * since loop lag varies depending on the browser/platform.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#loopEndOffset\r\n         * @type {number}\r\n         * @default 0.05\r\n         * @since 3.0.0\r\n         */\r\n        this.loopEndOffset = 0.05;\r\n\r\n        /**\r\n         * An array for keeping track of all the sounds\r\n         * that were paused when game lost focus.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#onBlurPausedSounds\r\n         * @type {Phaser.Sound.HTML5AudioSound[]}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.onBlurPausedSounds = [];\r\n\r\n        this.locked = 'ontouchstart' in window;\r\n\r\n        /**\r\n         * A queue of all actions performed on sound objects while audio was locked.\r\n         * Once the audio gets unlocked, after an explicit user interaction,\r\n         * all actions will be performed in chronological order.\r\n         * Array of object types: { sound: Phaser.Sound.HTML5AudioSound, name: string, value?: * }\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#lockedActionsQueue\r\n         * @type {array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.lockedActionsQueue = this.locked ? [] : null;\r\n\r\n        /**\r\n         * Property that actually holds the value of global mute\r\n         * for HTML5 Audio sound manager implementation.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#_mute\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._mute = false;\r\n\r\n        /**\r\n         * Property that actually holds the value of global volume\r\n         * for HTML5 Audio sound manager implementation.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#_volume\r\n         * @type {boolean}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._volume = 1;\r\n\r\n        BaseSoundManager.call(this, game);\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound into the sound manager.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} The new sound instance.\r\n     */\r\n    add: function (key, config)\r\n    {\r\n        var sound = new HTML5AudioSound(this, key, config);\r\n\r\n        this.sounds.push(sound);\r\n\r\n        return sound;\r\n    },\r\n\r\n    /**\r\n     * Unlocks HTML5 Audio loading and playback on mobile\r\n     * devices on the initial explicit user interaction.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#unlock\r\n     * @since 3.0.0\r\n     */\r\n    unlock: function ()\r\n    {\r\n        this.locked = false;\r\n\r\n        var _this = this;\r\n\r\n        this.game.cache.audio.entries.each(function (key, tags)\r\n        {\r\n            for (var i = 0; i < tags.length; i++)\r\n            {\r\n                if (tags[i].dataset.locked === 'true')\r\n                {\r\n                    _this.locked = true;\r\n\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        if (!this.locked)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var moved = false;\r\n\r\n        var detectMove = function ()\r\n        {\r\n            moved = true;\r\n        };\r\n\r\n        var unlock = function ()\r\n        {\r\n            if (moved)\r\n            {\r\n                moved = false;\r\n                return;\r\n            }\r\n\r\n            document.body.removeEventListener('touchmove', detectMove);\r\n            document.body.removeEventListener('touchend', unlock);\r\n\r\n            var lockedTags = [];\r\n\r\n            _this.game.cache.audio.entries.each(function (key, tags)\r\n            {\r\n                for (var i = 0; i < tags.length; i++)\r\n                {\r\n                    var tag = tags[i];\r\n\r\n                    if (tag.dataset.locked === 'true')\r\n                    {\r\n                        lockedTags.push(tag);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            if (lockedTags.length === 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            var lastTag = lockedTags[lockedTags.length - 1];\r\n\r\n            lastTag.oncanplaythrough = function ()\r\n            {\r\n                lastTag.oncanplaythrough = null;\r\n\r\n                lockedTags.forEach(function (tag)\r\n                {\r\n                    tag.dataset.locked = 'false';\r\n                });\r\n\r\n                _this.unlocked = true;\r\n            };\r\n\r\n            lockedTags.forEach(function (tag)\r\n            {\r\n                tag.load();\r\n            });\r\n        };\r\n\r\n        this.once(Events.UNLOCKED, function ()\r\n        {\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                if (sound.currentMarker === null && sound.duration === 0)\r\n                {\r\n                    sound.duration = sound.tags[0].duration;\r\n                }\r\n\r\n                sound.totalDuration = sound.tags[0].duration;\r\n            });\r\n\r\n            while (this.lockedActionsQueue.length)\r\n            {\r\n                var lockedAction = this.lockedActionsQueue.shift();\r\n\r\n                if (lockedAction.sound[lockedAction.prop].apply)\r\n                {\r\n                    lockedAction.sound[lockedAction.prop].apply(lockedAction.sound, lockedAction.value || []);\r\n                }\r\n                else\r\n                {\r\n                    lockedAction.sound[lockedAction.prop] = lockedAction.value;\r\n                }\r\n            }\r\n\r\n        }, this);\r\n\r\n        document.body.addEventListener('touchmove', detectMove, false);\r\n        document.body.addEventListener('touchend', unlock, false);\r\n    },\r\n\r\n    /**\r\n     * Method used internally for pausing sound manager if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#onBlur\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            if (sound.isPlaying)\r\n            {\r\n                this.onBlurPausedSounds.push(sound);\r\n                sound.onBlur();\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Method used internally for resuming sound manager if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#onFocus\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        this.onBlurPausedSounds.forEach(function (sound)\r\n        {\r\n            sound.onFocus();\r\n        });\r\n\r\n        this.onBlurPausedSounds.length = 0;\r\n    },\r\n\r\n    /**\r\n     * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n     * and cleans up all HTML5 Audio related stuff.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        BaseSoundManager.prototype.destroy.call(this);\r\n\r\n        this.onBlurPausedSounds.length = 0;\r\n        this.onBlurPausedSounds = null;\r\n    },\r\n\r\n    /**\r\n     * Method used internally by Phaser.Sound.HTML5AudioSound class methods and property setters\r\n     * to check if sound manager is locked and then either perform action immediately or queue it\r\n     * to be performed once the sound manager gets unlocked.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#isLocked\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Sound object on which to perform queued action.\r\n     * @param {string} prop - Name of the method to be called or property to be assigned a value to.\r\n     * @param {*} [value] - An optional parameter that either holds an array of arguments to be passed to the method call or value to be set to the property.\r\n     *\r\n     * @return {boolean} Whether the sound manager is locked.\r\n     */\r\n    isLocked: function (sound, prop, value)\r\n    {\r\n        if (sound.tags[0].dataset.locked === 'true')\r\n        {\r\n            this.lockedActionsQueue.push({\r\n                sound: sound,\r\n                prop: prop,\r\n                value: value\r\n            });\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Sets the muted state of all this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#setMute\r\n     * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n     */\r\n    setMute: function (value)\r\n    {\r\n        this.mute = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#mute\r\n     * @type {boolean}\r\n     * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n     * @since 3.0.0\r\n     */\r\n    mute: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._mute;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._mute = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.updateMute();\r\n            });\r\n\r\n            this.emit(Events.GLOBAL_MUTE, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the volume of this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#setVolume\r\n     * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The global volume of this Sound Manager.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n     */\r\n    setVolume: function (value)\r\n    {\r\n        this.volume = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#volume\r\n     * @type {number}\r\n     * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n     * @since 3.0.0\r\n     */\r\n    volume: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._volume;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._volume = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.updateVolume();\r\n            });\r\n\r\n            this.emit(Events.GLOBAL_VOLUME, this, value);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = HTML5AudioSoundManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Sound\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    SoundManagerCreator: require('./SoundManagerCreator'),\r\n\r\n    Events: require('./events'),\r\n\r\n    BaseSound: require('./BaseSound'),\r\n    BaseSoundManager: require('./BaseSoundManager'),\r\n\r\n    WebAudioSound: require('./webaudio/WebAudioSound'),\r\n    WebAudioSoundManager: require('./webaudio/WebAudioSoundManager'),\r\n\r\n    HTML5AudioSound: require('./html5/HTML5AudioSound'),\r\n    HTML5AudioSoundManager: require('./html5/HTML5AudioSoundManager'),\r\n\r\n    NoAudioSound: require('./noaudio/NoAudioSound'),\r\n    NoAudioSoundManager: require('./noaudio/NoAudioSoundManager')\r\n\r\n};\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseSound = require('../BaseSound');\r\nvar Class = require('../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Extend = require('../../utils/object/Extend');\r\n\r\nvar returnFalse = function ()\r\n{\r\n    return false;\r\n};\r\n\r\nvar returnNull = function ()\r\n{\r\n    return null;\r\n};\r\n\r\nvar returnThis = function ()\r\n{\r\n    return this;\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * No audio implementation of the sound. It is used if audio has been\r\n * disabled in the game config or the device doesn't support any audio.\r\n *\r\n * It represents a graceful degradation of sound logic that provides\r\n * minimal functionality and prevents Phaser projects that use audio from\r\n * breaking on devices that don't support any audio playback technologies.\r\n *\r\n * @class NoAudioSound\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Sound.NoAudioSoundManager} manager - Reference to the current sound manager instance.\r\n * @param {string} key - Asset key for the sound.\r\n * @param {Phaser.Types.Sound.SoundConfig} [config={}] - An optional config object containing default sound settings.\r\n */\r\nvar NoAudioSound = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function NoAudioSound (manager, key, config)\r\n    {\r\n        if (config === void 0) { config = {}; }\r\n\r\n        EventEmitter.call(this);\r\n\r\n        this.manager = manager;\r\n        this.key = key;\r\n        this.isPlaying = false;\r\n        this.isPaused = false;\r\n        this.totalRate = 1;\r\n        this.duration = 0;\r\n        this.totalDuration = 0;\r\n\r\n        this.config = Extend({\r\n            mute: false,\r\n            volume: 1,\r\n            rate: 1,\r\n            detune: 0,\r\n            seek: 0,\r\n            loop: false,\r\n            delay: 0,\r\n            pan: 0\r\n        }, config);\r\n\r\n        this.currentConfig = this.config;\r\n        this.mute = false;\r\n        this.volume = 1;\r\n        this.rate = 1;\r\n        this.detune = 0;\r\n        this.seek = 0;\r\n        this.loop = false;\r\n        this.pan = 0;\r\n        this.markers = {};\r\n        this.currentMarker = null;\r\n        this.pendingRemove = false;\r\n    },\r\n\r\n    /**\r\n     * @method Phaser.Sound.NoAudioSound#addMarker\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Sound.SoundMarker} marker - Marker object.\r\n     *\r\n     * @return {boolean} false\r\n     */\r\n    addMarker: returnFalse,\r\n\r\n    /**\r\n     * @method Phaser.Sound.NoAudioSound#updateMarker\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Sound.SoundMarker} marker - Marker object with updated values.\r\n     *\r\n     * @return {boolean} false\r\n     */\r\n    updateMarker: returnFalse,\r\n\r\n    /**\r\n     * @method Phaser.Sound.NoAudioSound#removeMarker\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} markerName - The name of the marker to remove.\r\n     *\r\n     * @return {null} null\r\n     */\r\n    removeMarker: returnNull,\r\n\r\n    /**\r\n     * @method Phaser.Sound.NoAudioSound#play\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Sound.SoundConfig)} [markerName=''] - If you want to play a marker then provide the marker name here. Alternatively, this parameter can be a SoundConfig object.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.\r\n     *\r\n     * @return {boolean} false\r\n     */\r\n    play: returnFalse,\r\n\r\n    /**\r\n     * @method Phaser.Sound.NoAudioSound#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} false\r\n     */\r\n    pause: returnFalse,\r\n\r\n    /**\r\n     * Resumes the sound.\r\n     *\r\n     * @method Phaser.Sound.NoAudioSound#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} false\r\n     */\r\n    resume: returnFalse,\r\n\r\n    /**\r\n     * Stop playing this sound.\r\n     *\r\n     * @method Phaser.Sound.NoAudioSound#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} false\r\n     */\r\n    stop: returnFalse,\r\n\r\n    /**\r\n     * Destroys this sound and all associated events and marks it for removal from the sound manager.\r\n     *\r\n     * @method Phaser.Sound.NoAudioSound#destroy\r\n     * @fires Phaser.Sound.Events#DESTROY\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        BaseSound.prototype.destroy.call(this);\r\n    },\r\n\r\n    setMute: returnThis,\r\n\r\n    setVolume: returnThis,\r\n\r\n    setRate: returnThis,\r\n\r\n    setDetune: returnThis,\r\n\r\n    setSeek: returnThis,\r\n\r\n    setLoop: returnThis,\r\n\r\n    setPan: returnThis\r\n\r\n});\r\n\r\nmodule.exports = NoAudioSound;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseSoundManager = require('../BaseSoundManager');\r\nvar Class = require('../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar NoAudioSound = require('./NoAudioSound');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n/**\r\n * @classdesc\r\n * No-audio implementation of the Sound Manager. It is used if audio has been\r\n * disabled in the game config or the device doesn't support any audio.\r\n *\r\n * It represents a graceful degradation of Sound Manager logic that provides\r\n * minimal functionality and prevents Phaser projects that use audio from\r\n * breaking on devices that don't support any audio playback technologies.\r\n *\r\n * @class NoAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar NoAudioSoundManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function NoAudioSoundManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        this.game = game;\r\n        this.sounds = [];\r\n        this.mute = false;\r\n        this.volume = 1;\r\n        this.rate = 1;\r\n        this.detune = 0;\r\n        this.pauseOnBlur = true;\r\n        this.locked = false;\r\n    },\r\n\r\n    add: function (key, config)\r\n    {\r\n        var sound = new NoAudioSound(this, key, config);\r\n\r\n        this.sounds.push(sound);\r\n\r\n        return sound;\r\n    },\r\n\r\n    addAudioSprite: function (key, config)\r\n    {\r\n        var sound = this.add(key, config);\r\n\r\n        sound.spritemap = {};\r\n\r\n        return sound;\r\n    },\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    play: function (key, extra)\r\n    {\r\n        return false;\r\n    },\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    playAudioSprite: function (key, spriteName, config)\r\n    {\r\n        return false;\r\n    },\r\n\r\n    remove: function (sound)\r\n    {\r\n        return BaseSoundManager.prototype.remove.call(this, sound);\r\n    },\r\n\r\n    removeByKey: function (key)\r\n    {\r\n        return BaseSoundManager.prototype.removeByKey.call(this, key);\r\n    },\r\n\r\n    pauseAll: NOOP,\r\n    resumeAll: NOOP,\r\n    stopAll: NOOP,\r\n    update: NOOP,\r\n    setRate: NOOP,\r\n    setDetune: NOOP,\r\n    setMute: NOOP,\r\n    setVolume: NOOP,\r\n\r\n    forEachActiveSound: function (callbackfn, scope)\r\n    {\r\n        BaseSoundManager.prototype.forEachActiveSound.call(this, callbackfn, scope);\r\n    },\r\n\r\n    destroy: function ()\r\n    {\r\n        BaseSoundManager.prototype.destroy.call(this);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = NoAudioSoundManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseSound = require('../BaseSound');\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('../events');\r\n\r\n/**\r\n * @classdesc\r\n * Web Audio API implementation of the sound.\r\n *\r\n * @class WebAudioSound\r\n * @extends Phaser.Sound.BaseSound\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Sound.WebAudioSoundManager} manager - Reference to the current sound manager instance.\r\n * @param {string} key - Asset key for the sound.\r\n * @param {Phaser.Types.Sound.SoundConfig} [config={}] - An optional config object containing default sound settings.\r\n */\r\nvar WebAudioSound = new Class({\r\n\r\n    Extends: BaseSound,\r\n\r\n    initialize:\r\n\r\n    function WebAudioSound (manager, key, config)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n\r\n        /**\r\n         * Audio buffer containing decoded data of the audio asset to be played.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#audioBuffer\r\n         * @type {AudioBuffer}\r\n         * @since 3.0.0\r\n         */\r\n        this.audioBuffer = manager.game.cache.audio.get(key);\r\n\r\n        if (!this.audioBuffer)\r\n        {\r\n            throw new Error('Audio key \"' + key + '\" missing from cache');\r\n        }\r\n\r\n        /**\r\n         * A reference to an audio source node used for playing back audio from\r\n         * audio data stored in Phaser.Sound.WebAudioSound#audioBuffer.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#source\r\n         * @type {AudioBufferSourceNode}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.source = null;\r\n\r\n        /**\r\n         * A reference to a second audio source used for gapless looped playback.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#loopSource\r\n         * @type {AudioBufferSourceNode}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.loopSource = null;\r\n\r\n        /**\r\n         * Gain node responsible for controlling this sound's muting.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#muteNode\r\n         * @type {GainNode}\r\n         * @since 3.0.0\r\n         */\r\n        this.muteNode = manager.context.createGain();\r\n\r\n        /**\r\n         * Gain node responsible for controlling this sound's volume.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#volumeNode\r\n         * @type {GainNode}\r\n         * @since 3.0.0\r\n         */\r\n        this.volumeNode = manager.context.createGain();\r\n\r\n        /**\r\n         * Panner node responsible for controlling this sound's pan.\r\n         *\r\n         * Doesn't work on iOS / Safari.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#pannerNode\r\n         * @type {StereoPannerNode}\r\n         * @since 3.50.0\r\n         */\r\n        this.pannerNode = null;\r\n\r\n        /**\r\n         * The time at which the sound should have started playback from the beginning.\r\n         * Based on BaseAudioContext.currentTime value.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#playTime\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.playTime = 0;\r\n\r\n        /**\r\n         * The time at which the sound source should have actually started playback.\r\n         * Based on BaseAudioContext.currentTime value.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#startTime\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.startTime = 0;\r\n\r\n        /**\r\n         * The time at which the sound loop source should actually start playback.\r\n         * Based on BaseAudioContext.currentTime value.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#loopTime\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.loopTime = 0;\r\n\r\n        /**\r\n         * An array where we keep track of all rate updates during playback.\r\n         * Array of object types: { time: number, rate: number }\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#rateUpdates\r\n         * @type {array}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.rateUpdates = [];\r\n\r\n        /**\r\n         * Used for keeping track when sound source playback has ended\r\n         * so its state can be updated accordingly.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#hasEnded\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.hasEnded = false;\r\n\r\n        /**\r\n         * Used for keeping track when sound source has looped\r\n         * so its state can be updated accordingly.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSound#hasLooped\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.hasLooped = false;\r\n\r\n        this.muteNode.connect(this.volumeNode);\r\n\r\n        if (manager.context.createStereoPanner)\r\n        {\r\n            this.pannerNode = manager.context.createStereoPanner();\r\n\r\n            this.volumeNode.connect(this.pannerNode);\r\n\r\n            this.pannerNode.connect(manager.destination);\r\n        }\r\n        else\r\n        {\r\n            this.volumeNode.connect(manager.destination);\r\n        }\r\n\r\n        this.duration = this.audioBuffer.duration;\r\n\r\n        this.totalDuration = this.audioBuffer.duration;\r\n\r\n        BaseSound.call(this, manager, key, config);\r\n    },\r\n\r\n    /**\r\n     * Play this sound, or a marked section of it.\r\n     *\r\n     * It always plays the sound from the start. If you want to start playback from a specific time\r\n     * you can set 'seek' setting of the config object, provided to this call, to that value.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#play\r\n     * @fires Phaser.Sound.Events#PLAY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Sound.SoundConfig)} [markerName=''] - If you want to play a marker then provide the marker name here. Alternatively, this parameter can be a SoundConfig object.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.\r\n     *\r\n     * @return {boolean} Whether the sound started playing successfully.\r\n     */\r\n    play: function (markerName, config)\r\n    {\r\n        if (!BaseSound.prototype.play.call(this, markerName, config))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = true, isPaused = false \\/\\/\\/\r\n        this.stopAndRemoveBufferSource();\r\n        this.createAndStartBufferSource();\r\n\r\n        this.emit(Events.PLAY, this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Pauses the sound.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#pause\r\n     * @fires Phaser.Sound.Events#PAUSE\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was paused successfully.\r\n     */\r\n    pause: function ()\r\n    {\r\n        if (this.manager.context.currentTime < this.startTime)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.pause.call(this))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = false, isPaused = true \\/\\/\\/\r\n        this.currentConfig.seek = this.getCurrentTime(); // Equivalent to setting paused time\r\n        this.stopAndRemoveBufferSource();\r\n\r\n        this.emit(Events.PAUSE, this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Resumes the sound.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#resume\r\n     * @fires Phaser.Sound.Events#RESUME\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was resumed successfully.\r\n     */\r\n    resume: function ()\r\n    {\r\n        if (this.manager.context.currentTime < this.startTime)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!BaseSound.prototype.resume.call(this))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = true, isPaused = false \\/\\/\\/\r\n        this.createAndStartBufferSource();\r\n\r\n        this.emit(Events.RESUME, this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Stop playing this sound.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#stop\r\n     * @fires Phaser.Sound.Events#STOP\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether the sound was stopped successfully.\r\n     */\r\n    stop: function ()\r\n    {\r\n        if (!BaseSound.prototype.stop.call(this))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  \\/\\/\\/ isPlaying = false, isPaused = false \\/\\/\\/\r\n        this.stopAndRemoveBufferSource();\r\n\r\n        this.emit(Events.STOP, this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Used internally.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#createAndStartBufferSource\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    createAndStartBufferSource: function ()\r\n    {\r\n        var seek = this.currentConfig.seek;\r\n        var delay = this.currentConfig.delay;\r\n        var when = this.manager.context.currentTime + delay;\r\n        var offset = (this.currentMarker ? this.currentMarker.start : 0) + seek;\r\n        var duration = this.duration - seek;\r\n\r\n        this.playTime = when - seek;\r\n        this.startTime = when;\r\n        this.source = this.createBufferSource();\r\n\r\n        this.applyConfig();\r\n\r\n        this.source.start(Math.max(0, when), Math.max(0, offset), Math.max(0, duration));\r\n\r\n        this.resetConfig();\r\n    },\r\n\r\n    /**\r\n     * Used internally.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#createAndStartLoopBufferSource\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    createAndStartLoopBufferSource: function ()\r\n    {\r\n        var when = this.getLoopTime();\r\n        var offset = this.currentMarker ? this.currentMarker.start : 0;\r\n        var duration = this.duration;\r\n\r\n        this.loopTime = when;\r\n        this.loopSource = this.createBufferSource();\r\n        this.loopSource.playbackRate.setValueAtTime(this.totalRate, 0);\r\n        this.loopSource.start(Math.max(0, when), Math.max(0, offset), Math.max(0, duration));\r\n    },\r\n\r\n    /**\r\n     * Used internally.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#createBufferSource\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {AudioBufferSourceNode}\r\n     */\r\n    createBufferSource: function ()\r\n    {\r\n        var _this = this;\r\n        var source = this.manager.context.createBufferSource();\r\n\r\n        source.buffer = this.audioBuffer;\r\n\r\n        source.connect(this.muteNode);\r\n\r\n        source.onended = function (ev)\r\n        {\r\n            if (ev.target === _this.source)\r\n            {\r\n                // sound ended\r\n                if (_this.currentConfig.loop)\r\n                {\r\n                    _this.hasLooped = true;\r\n                }\r\n                else\r\n                {\r\n                    _this.hasEnded = true;\r\n                }\r\n            }\r\n\r\n            // else was stopped\r\n        };\r\n\r\n        return source;\r\n    },\r\n\r\n    /**\r\n     * Used internally.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#stopAndRemoveBufferSource\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    stopAndRemoveBufferSource: function ()\r\n    {\r\n        if (this.source)\r\n        {\r\n            this.source.stop();\r\n            this.source.disconnect();\r\n            this.source = null;\r\n        }\r\n\r\n        this.playTime = 0;\r\n        this.startTime = 0;\r\n\r\n        this.stopAndRemoveLoopBufferSource();\r\n    },\r\n\r\n    /**\r\n     * Used internally.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#stopAndRemoveLoopBufferSource\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    stopAndRemoveLoopBufferSource: function ()\r\n    {\r\n        if (this.loopSource)\r\n        {\r\n            this.loopSource.stop();\r\n            this.loopSource.disconnect();\r\n            this.loopSource = null;\r\n        }\r\n\r\n        this.loopTime = 0;\r\n    },\r\n\r\n    /**\r\n     * Method used internally for applying config values to some of the sound properties.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#applyConfig\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    applyConfig: function ()\r\n    {\r\n        this.rateUpdates.length = 0;\r\n\r\n        this.rateUpdates.push({\r\n            time: 0,\r\n            rate: 1\r\n        });\r\n\r\n        BaseSound.prototype.applyConfig.call(this);\r\n    },\r\n\r\n    /**\r\n     * Update method called automatically by sound manager on every game step.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#update\r\n     * @fires Phaser.Sound.Events#COMPLETE\r\n     * @fires Phaser.Sound.Events#LOOPED\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    update: function ()\r\n    {\r\n        if (this.hasEnded)\r\n        {\r\n            this.hasEnded = false;\r\n\r\n            BaseSound.prototype.stop.call(this);\r\n\r\n            this.stopAndRemoveBufferSource();\r\n\r\n            this.emit(Events.COMPLETE, this);\r\n        }\r\n        else if (this.hasLooped)\r\n        {\r\n            this.hasLooped = false;\r\n            this.source = this.loopSource;\r\n            this.loopSource = null;\r\n            this.playTime = this.startTime = this.loopTime;\r\n            this.rateUpdates.length = 0;\r\n\r\n            this.rateUpdates.push({\r\n                time: 0,\r\n                rate: this.totalRate\r\n            });\r\n\r\n            this.createAndStartLoopBufferSource();\r\n\r\n            this.emit(Events.LOOPED, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Calls Phaser.Sound.BaseSound#destroy method\r\n     * and cleans up all Web Audio API related stuff.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        BaseSound.prototype.destroy.call(this);\r\n\r\n        this.audioBuffer = null;\r\n        this.stopAndRemoveBufferSource();\r\n        this.muteNode.disconnect();\r\n        this.muteNode = null;\r\n        this.volumeNode.disconnect();\r\n        this.volumeNode = null;\r\n\r\n        if (this.pannerNode)\r\n        {\r\n            this.pannerNode.disconnect();\r\n            this.pannerNode = null;\r\n        }\r\n\r\n        this.rateUpdates.length = 0;\r\n        this.rateUpdates = null;\r\n    },\r\n\r\n    /**\r\n     * Method used internally to calculate total playback rate of the sound.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#calculateRate\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    calculateRate: function ()\r\n    {\r\n        BaseSound.prototype.calculateRate.call(this);\r\n\r\n        var now = this.manager.context.currentTime;\r\n\r\n        if (this.source && typeof this.totalRate === 'number')\r\n        {\r\n            this.source.playbackRate.setValueAtTime(this.totalRate, now);\r\n        }\r\n\r\n        if (this.isPlaying)\r\n        {\r\n            this.rateUpdates.push({\r\n                time: Math.max(this.startTime, now) - this.playTime,\r\n                rate: this.totalRate\r\n            });\r\n\r\n            if (this.loopSource)\r\n            {\r\n                this.stopAndRemoveLoopBufferSource();\r\n                this.createAndStartLoopBufferSource();\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally for calculating current playback time of a playing sound.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#getCurrentTime\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    getCurrentTime: function ()\r\n    {\r\n        var currentTime = 0;\r\n\r\n        for (var i = 0; i < this.rateUpdates.length; i++)\r\n        {\r\n            var nextTime = 0;\r\n\r\n            if (i < this.rateUpdates.length - 1)\r\n            {\r\n                nextTime = this.rateUpdates[i + 1].time;\r\n            }\r\n            else\r\n            {\r\n                nextTime = this.manager.context.currentTime - this.playTime;\r\n            }\r\n\r\n            currentTime += (nextTime - this.rateUpdates[i].time) * this.rateUpdates[i].rate;\r\n        }\r\n\r\n        return currentTime;\r\n    },\r\n\r\n    /**\r\n     * Method used internally for calculating the time\r\n     * at witch the loop source should start playing.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#getLoopTime\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    getLoopTime: function ()\r\n    {\r\n        var lastRateUpdateCurrentTime = 0;\r\n\r\n        for (var i = 0; i < this.rateUpdates.length - 1; i++)\r\n        {\r\n            lastRateUpdateCurrentTime += (this.rateUpdates[i + 1].time - this.rateUpdates[i].time) * this.rateUpdates[i].rate;\r\n        }\r\n\r\n        var lastRateUpdate = this.rateUpdates[this.rateUpdates.length - 1];\r\n\r\n        return this.playTime + lastRateUpdate.time + (this.duration - lastRateUpdateCurrentTime) / lastRateUpdate.rate;\r\n    },\r\n\r\n    /**\r\n     * Rate at which this Sound will be played.\r\n     * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audios playback speed.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSound#rate\r\n     * @type {number}\r\n     * @default 1\r\n     * @fires Phaser.Sound.Events#RATE\r\n     * @since 3.0.0\r\n     */\r\n    rate: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.rate;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.rate = value;\r\n\r\n            this.calculateRate();\r\n\r\n            this.emit(Events.RATE, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the playback rate of this Sound.\r\n     *\r\n     * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audios playback speed.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#setRate\r\n     * @fires Phaser.Sound.Events#RATE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The playback rate at of this Sound.\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setRate: function (value)\r\n    {\r\n        this.rate = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @name Phaser.Sound.WebAudioSound#detune\r\n     * @type {number}\r\n     * @default 0\r\n     * @fires Phaser.Sound.Events#DETUNE\r\n     * @since 3.0.0\r\n     */\r\n    detune: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.detune;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.detune = value;\r\n\r\n            this.calculateRate();\r\n\r\n            this.emit(Events.DETUNE, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#setDetune\r\n     * @fires Phaser.Sound.Events#DETUNE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setDetune: function (value)\r\n    {\r\n        this.detune = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Boolean indicating whether the sound is muted or not.\r\n     * Gets or sets the muted state of this sound.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSound#mute\r\n     * @type {boolean}\r\n     * @default false\r\n     * @fires Phaser.Sound.Events#MUTE\r\n     * @since 3.0.0\r\n     */\r\n    mute: {\r\n\r\n        get: function ()\r\n        {\r\n            return (this.muteNode.gain.value === 0);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.mute = value;\r\n            this.muteNode.gain.setValueAtTime(value ? 0 : 1, 0);\r\n\r\n            this.emit(Events.MUTE, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the muted state of this Sound.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#setMute\r\n     * @fires Phaser.Sound.Events#MUTE\r\n     * @since 3.4.0\r\n     *\r\n     * @param {boolean} value - `true` to mute this sound, `false` to unmute it.\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setMute: function (value)\r\n    {\r\n        this.mute = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets or sets the volume of this sound, a value between 0 (silence) and 1 (full volume).\r\n     *\r\n     * @name Phaser.Sound.WebAudioSound#volume\r\n     * @type {number}\r\n     * @default 1\r\n     * @fires Phaser.Sound.Events#VOLUME\r\n     * @since 3.0.0\r\n     */\r\n    volume: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.volumeNode.gain.value;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.volume = value;\r\n            this.volumeNode.gain.setValueAtTime(value, 0);\r\n\r\n            this.emit(Events.VOLUME, this, value);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the volume of this Sound.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#setVolume\r\n     * @fires Phaser.Sound.Events#VOLUME\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - The volume of the sound.\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setVolume: function (value)\r\n    {\r\n        this.volume = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Property representing the position of playback for this sound, in seconds.\r\n     * Setting it to a specific value moves current playback to that position.\r\n     * The value given is clamped to the range 0 to current marker duration.\r\n     * Setting seek of a stopped sound has no effect.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSound#seek\r\n     * @type {number}\r\n     * @fires Phaser.Sound.Events#SEEK\r\n     * @since 3.0.0\r\n     */\r\n    seek: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.isPlaying)\r\n            {\r\n                if (this.manager.context.currentTime < this.startTime)\r\n                {\r\n                    return this.startTime - this.playTime;\r\n                }\r\n\r\n                return this.getCurrentTime();\r\n            }\r\n            else if (this.isPaused)\r\n            {\r\n                return this.currentConfig.seek;\r\n            }\r\n            else\r\n            {\r\n                return 0;\r\n            }\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.manager.context.currentTime < this.startTime)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (this.isPlaying || this.isPaused)\r\n            {\r\n                value = Math.min(Math.max(0, value), this.duration);\r\n\r\n                this.currentConfig.seek = value;\r\n\r\n                if (this.isPlaying)\r\n                {\r\n                    this.stopAndRemoveBufferSource();\r\n                    this.createAndStartBufferSource();\r\n                }\r\n\r\n                this.emit(Events.SEEK, this, value);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Seeks to a specific point in this sound.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#setSeek\r\n     * @fires Phaser.Sound.Events#SEEK\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - The point in the sound to seek to.\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setSeek: function (value)\r\n    {\r\n        this.seek = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Flag indicating whether or not the sound or current sound marker will loop.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSound#loop\r\n     * @type {boolean}\r\n     * @default false\r\n     * @fires Phaser.Sound.Events#LOOP\r\n     * @since 3.0.0\r\n     */\r\n    loop: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.currentConfig.loop;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.loop = value;\r\n\r\n            if (this.isPlaying)\r\n            {\r\n                this.stopAndRemoveLoopBufferSource();\r\n\r\n                if (value)\r\n                {\r\n                    this.createAndStartLoopBufferSource();\r\n                }\r\n            }\r\n\r\n            this.emit(Events.LOOP, this, value);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the loop state of this Sound.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#setLoop\r\n     * @fires Phaser.Sound.Events#LOOP\r\n     * @since 3.4.0\r\n     *\r\n     * @param {boolean} value - `true` to loop this sound, `false` to not loop it.\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setLoop: function (value)\r\n    {\r\n        this.loop = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets or sets the pan of this sound, a value between -1 (full left pan) and 1 (full right pan).\r\n     *\r\n     * Always returns zero on iOS / Safari as it doesn't support the stereo panner node.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSound#pan\r\n     * @type {number}\r\n     * @default 0\r\n     * @fires Phaser.Sound.Events#PAN\r\n     * @since 3.50.0\r\n     */\r\n    pan: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.pannerNode)\r\n            {\r\n                return this.pannerNode.pan.value;\r\n            }\r\n            else\r\n            {\r\n                return 0;\r\n            }\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.currentConfig.pan = value;\r\n\r\n            if (this.pannerNode)\r\n            {\r\n                this.pannerNode.pan.setValueAtTime(value, this.manager.context.currentTime);\r\n            }\r\n\r\n            this.emit(Events.PAN, this, value);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the pan of this sound, a value between -1 (full left pan) and 1 (full right pan).\r\n     *\r\n     * Note: iOS / Safari doesn't support the stereo panner node.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSound#setPan\r\n     * @fires Phaser.Sound.Events#PAN\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} value - The pan of the sound. A value between -1 (full left pan) and 1 (full right pan).\r\n     *\r\n     * @return {this} This Sound instance.\r\n     */\r\n    setPan: function (value)\r\n    {\r\n        this.pan = value;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = WebAudioSound;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Base64ToArrayBuffer = require('../../utils/base64/Base64ToArrayBuffer');\r\nvar BaseSoundManager = require('../BaseSoundManager');\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('../events');\r\nvar GameEvents = require('../../core/events');\r\nvar WebAudioSound = require('./WebAudioSound');\r\n\r\n/**\r\n * @classdesc\r\n * Web Audio API implementation of the Sound Manager.\r\n *\r\n * Not all browsers can play all audio formats.\r\n *\r\n * There is a good guide to what's supported: [Cross-browser audio basics: Audio codec support](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).\r\n *\r\n * @class WebAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar WebAudioSoundManager = new Class({\r\n\r\n    Extends: BaseSoundManager,\r\n\r\n    initialize:\r\n\r\n    function WebAudioSoundManager (game)\r\n    {\r\n        /**\r\n         * The AudioContext being used for playback.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#context\r\n         * @type {AudioContext}\r\n         * @since 3.0.0\r\n         */\r\n        this.context = this.createAudioContext(game);\r\n\r\n        /**\r\n         * Gain node responsible for controlling global muting.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#masterMuteNode\r\n         * @type {GainNode}\r\n         * @since 3.0.0\r\n         */\r\n        this.masterMuteNode = this.context.createGain();\r\n\r\n        /**\r\n         * Gain node responsible for controlling global volume.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#masterVolumeNode\r\n         * @type {GainNode}\r\n         * @since 3.0.0\r\n         */\r\n        this.masterVolumeNode = this.context.createGain();\r\n\r\n        this.masterMuteNode.connect(this.masterVolumeNode);\r\n\r\n        this.masterVolumeNode.connect(this.context.destination);\r\n\r\n        /**\r\n         * Destination node for connecting individual sounds to.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#destination\r\n         * @type {AudioNode}\r\n         * @since 3.0.0\r\n         */\r\n        this.destination = this.masterMuteNode;\r\n\r\n        this.locked = this.context.state === 'suspended' && ('ontouchstart' in window || 'onclick' in window);\r\n\r\n        BaseSoundManager.call(this, game);\r\n\r\n        if (this.locked && game.isBooted)\r\n        {\r\n            this.unlock();\r\n        }\r\n        else\r\n        {\r\n            game.events.once(GameEvents.BOOT, this.unlock, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method responsible for instantiating and returning AudioContext instance.\r\n     * If an instance of an AudioContext class was provided through the game config,\r\n     * that instance will be returned instead. This can come in handy if you are reloading\r\n     * a Phaser game on a page that never properly refreshes (such as in an SPA project)\r\n     * and you want to reuse already instantiated AudioContext.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#createAudioContext\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Game} game - Reference to the current game instance.\r\n     *\r\n     * @return {AudioContext} The AudioContext instance to be used for playback.\r\n     */\r\n    createAudioContext: function (game)\r\n    {\r\n        var audioConfig = game.config.audio;\r\n\r\n        if (audioConfig.context)\r\n        {\r\n            audioConfig.context.resume();\r\n\r\n            return audioConfig.context;\r\n        }\r\n\r\n        if (window.hasOwnProperty('AudioContext'))\r\n        {\r\n            return new AudioContext();\r\n        }\r\n        else if (window.hasOwnProperty('webkitAudioContext'))\r\n        {\r\n            return new window.webkitAudioContext();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * This method takes a new AudioContext reference and then sets\r\n     * this Sound Manager to use that context for all playback.\r\n     *\r\n     * As part of this call it also disconnects the master mute and volume\r\n     * nodes and then re-creates them on the new given context.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#setAudioContext\r\n     * @since 3.21.0\r\n     *\r\n     * @param {AudioContext} context - Reference to an already created AudioContext instance.\r\n     *\r\n     * @return {this} The WebAudioSoundManager instance.\r\n     */\r\n    setAudioContext: function (context)\r\n    {\r\n        if (this.context)\r\n        {\r\n            this.context.close();\r\n        }\r\n\r\n        if (this.masterMuteNode)\r\n        {\r\n            this.masterMuteNode.disconnect();\r\n        }\r\n\r\n        if (this.masterVolumeNode)\r\n        {\r\n            this.masterVolumeNode.disconnect();\r\n        }\r\n\r\n        this.context = context;\r\n\r\n        this.masterMuteNode = context.createGain();\r\n        this.masterVolumeNode = context.createGain();\r\n\r\n        this.masterMuteNode.connect(this.masterVolumeNode);\r\n        this.masterVolumeNode.connect(context.destination);\r\n\r\n        this.destination = this.masterMuteNode;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound into the sound manager.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.WebAudioSound} The new sound instance.\r\n     */\r\n    add: function (key, config)\r\n    {\r\n        var sound = new WebAudioSound(this, key, config);\r\n\r\n        this.sounds.push(sound);\r\n\r\n        return sound;\r\n    },\r\n\r\n    /**\r\n     * Decode audio data into a format ready for playback via Web Audio.\r\n     *\r\n     * The audio data can be a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.\r\n     *\r\n     * The `audioKey` is the key that will be used to save the decoded audio to the audio cache.\r\n     *\r\n     * Instead of passing a single entry you can instead pass an array of `Phaser.Types.Sound.DecodeAudioConfig`\r\n     * objects as the first and only argument.\r\n     *\r\n     * Decoding is an async process, so be sure to listen for the events to know when decoding has completed.\r\n     *\r\n     * Once the audio has decoded it can be added to the Sound Manager or played via its key.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#decodeAudio\r\n     * @fires Phaser.Sound.Events#DECODED\r\n     * @fires Phaser.Sound.Events#DECODED_ALL\r\n     * @since 3.18.0\r\n     *\r\n     * @param {(Phaser.Types.Sound.DecodeAudioConfig[]|string)} [audioKey] - The string-based key to be used to reference the decoded audio in the audio cache, or an array of audio config objects.\r\n     * @param {(ArrayBuffer|string)} [audioData] - The audio data, either a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.\r\n     */\r\n    decodeAudio: function (audioKey, audioData)\r\n    {\r\n        var audioFiles;\r\n\r\n        if (!Array.isArray(audioKey))\r\n        {\r\n            audioFiles = [ { key: audioKey, data: audioData } ];\r\n        }\r\n        else\r\n        {\r\n            audioFiles = audioKey;\r\n        }\r\n\r\n        var cache = this.game.cache.audio;\r\n        var remaining = audioFiles.length;\r\n\r\n        for (var i = 0; i < audioFiles.length; i++)\r\n        {\r\n            var entry = audioFiles[i];\r\n\r\n            var key = entry.key;\r\n            var data = entry.data;\r\n\r\n            if (typeof data === 'string')\r\n            {\r\n                data = Base64ToArrayBuffer(data);\r\n            }\r\n\r\n            var success = function (key, audioBuffer)\r\n            {\r\n                cache.add(key, audioBuffer);\r\n\r\n                this.emit(Events.DECODED, key);\r\n\r\n                remaining--;\r\n\r\n                if (remaining === 0)\r\n                {\r\n                    this.emit(Events.DECODED_ALL);\r\n                }\r\n            }.bind(this, key);\r\n\r\n            var failure = function (key, error)\r\n            {\r\n                //  eslint-disable-next-line no-console\r\n                console.error('Error decoding audio: ' + key + ' - ', error ? error.message : '');\r\n\r\n                remaining--;\r\n\r\n                if (remaining === 0)\r\n                {\r\n                    this.emit(Events.DECODED_ALL);\r\n                }\r\n            }.bind(this, key);\r\n\r\n            this.context.decodeAudioData(data, success, failure);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Unlocks Web Audio API on the initial input event.\r\n     *\r\n     * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#unlock\r\n     * @since 3.0.0\r\n     */\r\n    unlock: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        var body = document.body;\r\n\r\n        var unlockHandler = function unlockHandler ()\r\n        {\r\n            if (_this.context && body)\r\n            {\r\n                var bodyRemove = body.removeEventListener;\r\n\r\n                _this.context.resume().then(function ()\r\n                {\r\n                    bodyRemove('touchstart', unlockHandler);\r\n                    bodyRemove('touchend', unlockHandler);\r\n                    bodyRemove('click', unlockHandler);\r\n                    bodyRemove('keydown', unlockHandler);\r\n\r\n                    _this.unlocked = true;\r\n                }, function ()\r\n                {\r\n                    bodyRemove('touchstart', unlockHandler);\r\n                    bodyRemove('touchend', unlockHandler);\r\n                    bodyRemove('click', unlockHandler);\r\n                    bodyRemove('keydown', unlockHandler);\r\n                });\r\n            }\r\n        };\r\n\r\n        if (body)\r\n        {\r\n            body.addEventListener('touchstart', unlockHandler, false);\r\n            body.addEventListener('touchend', unlockHandler, false);\r\n            body.addEventListener('click', unlockHandler, false);\r\n            body.addEventListener('keydown', unlockHandler, false);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally for pausing sound manager if\r\n     * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#onBlur\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        if (!this.locked)\r\n        {\r\n            this.context.suspend();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally for resuming sound manager if\r\n     * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#onFocus\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        var context = this.context;\r\n\r\n        if ((context.state === 'suspended' || context.state === 'interrupted') && !this.locked)\r\n        {\r\n            context.resume();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update method called on every game step.\r\n     * Removes destroyed sounds and updates every active sound in the game.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#update\r\n     * @protected\r\n     * @fires Phaser.Sound.Events#UNLOCKED\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        BaseSoundManager.prototype.update.call(this, time, delta);\r\n\r\n        var context = this.context;\r\n\r\n        //  Resume interrupted audio on iOS\r\n        if (context && context.state === 'interrupted')\r\n        {\r\n            context.resume();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n     * and cleans up all Web Audio API related stuff.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.destination = null;\r\n        this.masterVolumeNode.disconnect();\r\n        this.masterVolumeNode = null;\r\n        this.masterMuteNode.disconnect();\r\n        this.masterMuteNode = null;\r\n\r\n        if (this.game.config.audio.context)\r\n        {\r\n            this.context.suspend();\r\n        }\r\n        else\r\n        {\r\n            var _this = this;\r\n\r\n            this.context.close().then(function ()\r\n            {\r\n                _this.context = null;\r\n            });\r\n        }\r\n\r\n        BaseSoundManager.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Sets the muted state of all this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#setMute\r\n     * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n     *\r\n     * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n     */\r\n    setMute: function (value)\r\n    {\r\n        this.mute = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.WebAudioSoundManager#mute\r\n     * @type {boolean}\r\n     * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n     * @since 3.0.0\r\n     */\r\n    mute: {\r\n\r\n        get: function ()\r\n        {\r\n            return (this.masterMuteNode.gain.value === 0);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.masterMuteNode.gain.setValueAtTime(value ? 0 : 1, 0);\r\n\r\n            this.emit(Events.GLOBAL_MUTE, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the volume of this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#setVolume\r\n     * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The global volume of this Sound Manager.\r\n     *\r\n     * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n     */\r\n    setVolume: function (value)\r\n    {\r\n        this.volume = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.WebAudioSoundManager#volume\r\n     * @type {number}\r\n     * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n     * @since 3.0.0\r\n     */\r\n    volume: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.masterVolumeNode.gain.value;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.masterVolumeNode.gain.setValueAtTime(value, 0);\r\n\r\n            this.emit(Events.GLOBAL_VOLUME, this, value);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = WebAudioSoundManager;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Taken from klasse by mattdesl https://github.com/mattdesl/klasse\r\n\r\nfunction hasGetterOrSetter (def)\r\n{\r\n    return (!!def.get && typeof def.get === 'function') || (!!def.set && typeof def.set === 'function');\r\n}\r\n\r\nfunction getProperty (definition, k, isClassDescriptor)\r\n{\r\n    //  This may be a lightweight object, OR it might be a property that was defined previously.\r\n\r\n    //  For simple class descriptors we can just assume its NOT previously defined.\r\n    var def = (isClassDescriptor) ? definition[k] : Object.getOwnPropertyDescriptor(definition, k);\r\n\r\n    if (!isClassDescriptor && def.value && typeof def.value === 'object')\r\n    {\r\n        def = def.value;\r\n    }\r\n\r\n    //  This might be a regular property, or it may be a getter/setter the user defined in a class.\r\n    if (def && hasGetterOrSetter(def))\r\n    {\r\n        if (typeof def.enumerable === 'undefined')\r\n        {\r\n            def.enumerable = true;\r\n        }\r\n\r\n        if (typeof def.configurable === 'undefined')\r\n        {\r\n            def.configurable = true;\r\n        }\r\n\r\n        return def;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction hasNonConfigurable (obj, k)\r\n{\r\n    var prop = Object.getOwnPropertyDescriptor(obj, k);\r\n\r\n    if (!prop)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    if (prop.value && typeof prop.value === 'object')\r\n    {\r\n        prop = prop.value;\r\n    }\r\n\r\n    if (prop.configurable === false)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Extends the given `myClass` object's prototype with the properties of `definition`.\r\n *\r\n * @function extend\r\n * @ignore\r\n * @param {Object} ctor The constructor object to mix into.\r\n * @param {Object} definition A dictionary of functions for the class.\r\n * @param {boolean} isClassDescriptor Is the definition a class descriptor?\r\n * @param {Object} [extend] The parent constructor object.\r\n */\r\nfunction extend (ctor, definition, isClassDescriptor, extend)\r\n{\r\n    for (var k in definition)\r\n    {\r\n        if (!definition.hasOwnProperty(k))\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var def = getProperty(definition, k, isClassDescriptor);\r\n\r\n        if (def !== false)\r\n        {\r\n            //  If Extends is used, we will check its prototype to see if the final variable exists.\r\n\r\n            var parent = extend || ctor;\r\n\r\n            if (hasNonConfigurable(parent.prototype, k))\r\n            {\r\n                //  Just skip the final property\r\n                if (Class.ignoreFinals)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                //  We cannot re-define a property that is configurable=false.\r\n                //  So we will consider them final and throw an error. This is by\r\n                //  default so it is clear to the developer what is happening.\r\n                //  You can set ignoreFinals to true if you need to extend a class\r\n                //  which has configurable=false; it will simply not re-define final properties.\r\n                throw new Error('cannot override final property \\'' + k + '\\', set Class.ignoreFinals = true to skip');\r\n            }\r\n\r\n            Object.defineProperty(ctor.prototype, k, def);\r\n        }\r\n        else\r\n        {\r\n            ctor.prototype[k] = definition[k];\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Applies the given `mixins` to the prototype of `myClass`.\r\n *\r\n * @function mixin\r\n * @ignore\r\n * @param {Object} myClass The constructor object to mix into.\r\n * @param {Object|Array<Object>} mixins The mixins to apply to the constructor.\r\n */\r\nfunction mixin (myClass, mixins)\r\n{\r\n    if (!mixins)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if (!Array.isArray(mixins))\r\n    {\r\n        mixins = [ mixins ];\r\n    }\r\n\r\n    for (var i = 0; i < mixins.length; i++)\r\n    {\r\n        extend(myClass, mixins[i].prototype || mixins[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a new class with the given descriptor.\r\n * The constructor, defined by the name `initialize`,\r\n * is an optional function. If unspecified, an anonymous\r\n * function will be used which calls the parent class (if\r\n * one exists).\r\n *\r\n * You can also use `Extends` and `Mixins` to provide subclassing\r\n * and inheritance.\r\n *\r\n * @class Phaser.Class\r\n * @constructor\r\n * @param {Object} definition a dictionary of functions for the class\r\n * @example\r\n *\r\n *      var MyClass = new Phaser.Class({\r\n *\r\n *          initialize: function() {\r\n *              this.foo = 2.0;\r\n *          },\r\n *\r\n *          bar: function() {\r\n *              return this.foo + 5;\r\n *          }\r\n *      });\r\n */\r\nfunction Class (definition)\r\n{\r\n    if (!definition)\r\n    {\r\n        definition = {};\r\n    }\r\n\r\n    //  The variable name here dictates what we see in Chrome debugger\r\n    var initialize;\r\n    var Extends;\r\n\r\n    if (definition.initialize)\r\n    {\r\n        if (typeof definition.initialize !== 'function')\r\n        {\r\n            throw new Error('initialize must be a function');\r\n        }\r\n\r\n        initialize = definition.initialize;\r\n\r\n        //  Usually we should avoid 'delete' in V8 at all costs.\r\n        //  However, its unlikely to make any performance difference\r\n        //  here since we only call this on class creation (i.e. not object creation).\r\n        delete definition.initialize;\r\n    }\r\n    else if (definition.Extends)\r\n    {\r\n        var base = definition.Extends;\r\n\r\n        initialize = function ()\r\n        {\r\n            base.apply(this, arguments);\r\n        };\r\n    }\r\n    else\r\n    {\r\n        initialize = function () {};\r\n    }\r\n\r\n    if (definition.Extends)\r\n    {\r\n        initialize.prototype = Object.create(definition.Extends.prototype);\r\n        initialize.prototype.constructor = initialize;\r\n\r\n        //  For getOwnPropertyDescriptor to work, we need to act directly on the Extends (or Mixin)\r\n\r\n        Extends = definition.Extends;\r\n\r\n        delete definition.Extends;\r\n    }\r\n    else\r\n    {\r\n        initialize.prototype.constructor = initialize;\r\n    }\r\n\r\n    //  Grab the mixins, if they are specified...\r\n    var mixins = null;\r\n\r\n    if (definition.Mixins)\r\n    {\r\n        mixins = definition.Mixins;\r\n        delete definition.Mixins;\r\n    }\r\n\r\n    //  First, mixin if we can.\r\n    mixin(initialize, mixins);\r\n\r\n    //  Now we grab the actual definition which defines the overrides.\r\n    extend(initialize, definition, true, Extends);\r\n\r\n    return initialize;\r\n}\r\n\r\nClass.extend = extend;\r\nClass.mixin = mixin;\r\nClass.ignoreFinals = false;\r\n\r\nmodule.exports = Class;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A NOOP (No Operation) callback function.\r\n *\r\n * Used internally by Phaser when it's more expensive to determine if a callback exists\r\n * than it is to just invoke an empty function.\r\n *\r\n * @function Phaser.Utils.NOOP\r\n * @since 3.0.0\r\n */\r\nvar NOOP = function ()\r\n{\r\n    //  NOOP\r\n};\r\n\r\nmodule.exports = NOOP;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns all elements in the array.\r\n *\r\n * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n *\r\n * For example: `getAll('visible', true)` would return only elements that have their visible property set.\r\n *\r\n * Optionally you can specify a start and end index. For example if the array had 100 elements,\r\n * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\r\n * the first 50 elements.\r\n *\r\n * @function Phaser.Utils.Array.GetAll\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} [property] - The property to test on each array element.\r\n * @param {*} [value] - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {number} [startIndex] - An optional start index to search from.\r\n * @param {number} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {array} All matching elements from the array.\r\n */\r\nvar GetAll = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    var output = [];\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (!property ||\r\n                (property && value === undefined && child.hasOwnProperty(property)) ||\r\n                (property && value !== undefined && child[property] === value))\r\n            {\r\n                output.push(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = GetAll;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns the first element in the array.\r\n *\r\n * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n *\r\n * For example: `getAll('visible', true)` would return the first element that had its `visible` property set.\r\n *\r\n * Optionally you can specify a start and end index. For example if the array had 100 elements,\r\n * and you set `startIndex` to 0 and `endIndex` to 50, it would search only the first 50 elements.\r\n *\r\n * @function Phaser.Utils.Array.GetFirst\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} [property] - The property to test on each array element.\r\n * @param {*} [value] - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {number} [startIndex=0] - An optional start index to search from.\r\n * @param {number} [endIndex=array.length] - An optional end index to search up to (but not included)\r\n *\r\n * @return {object} The first matching element from the array, or `null` if no element could be found in the range given.\r\n */\r\nvar GetFirst = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (!property ||\r\n                (property && value === undefined && child.hasOwnProperty(property)) ||\r\n                (property && value !== undefined && child[property] === value))\r\n            {\r\n                return child;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nmodule.exports = GetFirst;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Tests if the start and end indexes are a safe range for the given array.\r\n * \r\n * @function Phaser.Utils.Array.SafeRange\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to check.\r\n * @param {number} startIndex - The start index.\r\n * @param {number} endIndex - The end index.\r\n * @param {boolean} [throwError=true] - Throw an error if the range is out of bounds.\r\n *\r\n * @return {boolean} True if the range is safe, otherwise false.\r\n */\r\nvar SafeRange = function (array, startIndex, endIndex, throwError)\r\n{\r\n    var len = array.length;\r\n\r\n    if (startIndex < 0 ||\r\n        startIndex > len ||\r\n        startIndex >= endIndex ||\r\n        endIndex > len ||\r\n        startIndex + endIndex > len)\r\n    {\r\n        if (throwError)\r\n        {\r\n            throw new Error('Range Error: Values outside acceptable range');\r\n        }\r\n\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        return true;\r\n    }\r\n};\r\n\r\nmodule.exports = SafeRange;\r\n","/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n//  Use a lookup table to find the index.\r\nvar lookup = new Uint8Array(256);\r\n\r\nfor (var i = 0; i < chars.length; i++)\r\n{\r\n    lookup[chars.charCodeAt(i)] = i;\r\n}\r\n\r\n/**\r\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\r\n *\r\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\r\n * @since 3.18.0\r\n * \r\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\r\n * \r\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\r\n */\r\nvar Base64ToArrayBuffer = function (base64)\r\n{\r\n    //  Is it a data uri? if so, strip the header away\r\n    base64 = base64.substr(base64.indexOf(',') + 1);\r\n\r\n    var len = base64.length;\r\n    var bufferLength = len * 0.75;\r\n    var p = 0;\r\n    var encoded1;\r\n    var encoded2;\r\n    var encoded3;\r\n    var encoded4;\r\n\r\n    if (base64[len - 1] === '=')\r\n    {\r\n        bufferLength--;\r\n\r\n        if (base64[len - 2] === '=')\r\n        {\r\n            bufferLength--;\r\n        }\r\n    }\r\n\r\n    var arrayBuffer = new ArrayBuffer(bufferLength);\r\n    var bytes = new Uint8Array(arrayBuffer);\r\n\r\n    for (var i = 0; i < len; i += 4)\r\n    {\r\n        encoded1 = lookup[base64.charCodeAt(i)];\r\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\r\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\r\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\r\n\r\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\r\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\r\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\r\n    }\r\n\r\n    return arrayBuffer;\r\n};\r\n\r\nmodule.exports = Base64ToArrayBuffer;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Shallow Object Clone. Will not clone nested objects.\r\n *\r\n * @function Phaser.Utils.Objects.Clone\r\n * @since 3.0.0\r\n *\r\n * @param {object} obj - The object to clone.\r\n *\r\n * @return {object} A new object with the same properties as the input object.\r\n */\r\nvar Clone = function (obj)\r\n{\r\n    var clone = {};\r\n\r\n    for (var key in obj)\r\n    {\r\n        if (Array.isArray(obj[key]))\r\n        {\r\n            clone[key] = obj[key].slice(0);\r\n        }\r\n        else\r\n        {\r\n            clone[key] = obj[key];\r\n        }\r\n    }\r\n\r\n    return clone;\r\n};\r\n\r\nmodule.exports = Clone;\r\n"],"names":["has","Object","prototype","hasOwnProperty","prefix","Events","EE","fn","context","once","this","addListener","emitter","event","TypeError","listener","evt","_events","push","_eventsCount","clearEvent","EventEmitter","create","__proto__","eventNames","events","name","names","call","slice","getOwnPropertySymbols","concat","listeners","handlers","i","l","length","ee","Array","listenerCount","emit","a1","a2","a3","a4","a5","args","len","arguments","removeListener","undefined","apply","j","on","removeAllListeners","off","prefixed","module","exports","BLUR","BOOT","CONTEXT_LOST","CONTEXT_RESTORED","DESTROY","FOCUS","HIDDEN","PAUSE","POST_RENDER","POST_STEP","PRE_RENDER","PRE_STEP","READY","RESUME","STEP","VISIBLE","value","min","max","Math","Class","Extend","NOOP","BaseSound","Extends","initialize","manager","key","config","isPlaying","isPaused","totalRate","duration","totalDuration","mute","volume","rate","detune","seek","loop","delay","pan","currentConfig","markers","currentMarker","pendingRemove","addMarker","marker","console","error","start","updateMarker","warn","removeMarker","markerName","play","resetConfig","pause","resume","stop","applyConfig","update","calculateRate","totalDetune","detuneRate","pow","destroy","Clone","GameEvents","GetAll","GetFirst","BaseSoundManager","game","jsonCache","cache","json","sounds","pauseOnBlur","_rate","_detune","locked","unlocked","onGameBlur","onGameFocus","add","addAudioSprite","sound","spritemap","get","markerConfig","end","getAll","extra","COMPLETE","playAudioSprite","spriteName","remove","index","indexOf","splice","removeAll","forEach","removeByKey","removed","pauseAll","forEachActiveSound","PAUSE_ALL","resumeAll","RESUME_ALL","stopAll","STOP_ALL","stopByKey","stopped","unlock","onBlur","onFocus","time","delta","UNLOCKED","callback","scope","_this","setRate","set","GLOBAL_RATE","setDetune","GLOBAL_DETUNE","HTML5AudioSoundManager","NoAudioSoundManager","WebAudioSoundManager","SoundManagerCreator","audioConfig","audio","deviceAudio","device","noAudio","webAudio","audioData","disableWebAudio","DECODED","DECODED_ALL","DETUNE","GLOBAL_MUTE","GLOBAL_VOLUME","LOOP","LOOPED","MUTE","PAN","PLAY","RATE","SEEK","STOP","VOLUME","Clamp","HTML5AudioSound","tags","Error","startTime","previousTime","isLocked","pickAndPlayAudioTag","currentTime","stopAndReleaseAudioTag","pickAudioTag","reset","offset","paused","playCatchPromise","window","performance","now","dataset","used","override","otherSounds","sort","selectedSound","playPromise","catch","reason","audioPlayDelay","endTime","loopEndOffset","updateMute","muted","updateVolume","playbackRate","setMute","setVolume","setSeek","setLoop","setPan","onBlurPausedSounds","lockedActionsQueue","_mute","_volume","entries","each","moved","detectMove","document","body","removeEventListener","lockedTags","tag","lastTag","oncanplaythrough","load","lockedAction","shift","prop","addEventListener","WebAudioSound","NoAudioSound","returnFalse","returnThis","callbackfn","audioBuffer","source","loopSource","muteNode","createGain","volumeNode","pannerNode","playTime","loopTime","rateUpdates","hasEnded","hasLooped","connect","createStereoPanner","destination","stopAndRemoveBufferSource","createAndStartBufferSource","getCurrentTime","when","createBufferSource","createAndStartLoopBufferSource","getLoopTime","setValueAtTime","buffer","onended","ev","target","disconnect","stopAndRemoveLoopBufferSource","lastRateUpdateCurrentTime","lastRateUpdate","gain","Base64ToArrayBuffer","createAudioContext","masterMuteNode","masterVolumeNode","state","isBooted","AudioContext","webkitAudioContext","setAudioContext","close","decodeAudio","audioKey","audioFiles","isArray","data","remaining","entry","success","bind","failure","message","decodeAudioData","unlockHandler","bodyRemove","then","suspend","getProperty","definition","k","isClassDescriptor","def","getOwnPropertyDescriptor","hasGetterOrSetter","enumerable","configurable","hasNonConfigurable","obj","extend","ctor","ignoreFinals","defineProperty","mixin","myClass","mixins","base","constructor","Mixins","SafeRange","array","property","startIndex","endIndex","output","child","throwError","chars","lookup","Uint8Array","charCodeAt","base64","encoded1","encoded2","encoded3","encoded4","substr","bufferLength","p","arrayBuffer","ArrayBuffer","bytes","clone"],"sourceRoot":""}