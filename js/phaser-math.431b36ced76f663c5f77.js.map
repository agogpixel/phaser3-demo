{"version":3,"file":"js/phaser-math.431b36ced76f663c5f77.js","mappings":";gHAqCAA,EAAOC,QAdY,SAAUC,EAAOC,EAAGC,EAAGC,GAEtC,IAAIC,EAAIC,KAAKC,IAAIH,GACbI,EAAIF,KAAKG,IAAIL,GAEbM,EAAKT,EAAMC,EAAIA,EACfS,EAAKV,EAAME,EAAIA,EAKnB,OAHAF,EAAMC,EAAIQ,EAAKL,EAAIM,EAAKH,EAAIN,EAC5BD,EAAME,EAAIO,EAAKF,EAAIG,EAAKN,EAAIF,EAErBF,I,gBC5BX,IAAIW,EAAU,EAAQ,OA0CtBb,EAAOC,QAtBW,SAAUE,EAAGC,EAAGU,EAAWC,EAAWC,EAAUC,EAAQC,EAAQC,QAE/DC,IAAXD,IAAwBA,EAAS,IAAIN,GAEzC,IAAIQ,EAAYd,KAAKG,IAAIM,GACrBM,EAAYf,KAAKC,IAAIQ,GAGrBO,EAAID,EAAYL,EAChBO,EAAIH,EAAYJ,EAChBX,GAAKe,EAAYH,EACjBO,EAAIH,EAAYJ,EAGhBQ,EAAK,GAAMH,EAAIE,EAAMnB,GAAKkB,GAK9B,OAHAL,EAAOhB,EAAKsB,EAAIC,EAAKvB,GAAOG,EAAIoB,EAAKtB,GAAQW,EAAYT,EAAMQ,EAAYW,GAAMC,EACjFP,EAAOf,EAAKmB,EAAIG,EAAKtB,GAAOoB,EAAIE,EAAKvB,IAASY,EAAYQ,EAAMT,EAAYU,GAAME,EAE3EP,I,gBCvCX,IAAIQ,EAAW,EAAQ,MAmBvB3B,EAAOC,QALI,SAAUI,GAEjB,OAAOsB,EAAStB,GAAQE,KAAKqB,GAAIrB,KAAKqB,M,eChB1C,IAAIC,EAAO,EAAQ,MAmBnB7B,EAAOC,QALW,SAAUI,GAExB,OAAOwB,EAAKxB,GAAQ,IAAK,O,UChB7B,IAAIyB,EAAa,CASbC,IAAe,EAAVxB,KAAKqB,GASVI,IAAe,GAAVzB,KAAKqB,GASVK,QAAS,KASTC,WAAY3B,KAAKqB,GAAK,IAStBO,WAAY,IAAM5B,KAAKqB,GAUvBQ,IAAK,KAULC,iBAAkBC,OAAOD,mBAAqB,iBAU9CE,iBAAkBD,OAAOC,kBAAoB,kBAIjDvC,EAAOC,QAAU6B,M","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/RotateAround.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/TransformXY.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/angle/Wrap.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/angle/WrapDegrees.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/const.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Rotate a `point` around `x` and `y` to the given `angle`, at the same distance.\r\n *\r\n * In polar notation, this maps a point from (r, t) to (r, angle), vs. the origin (x, y).\r\n *\r\n * @function Phaser.Math.RotateAround\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Types.Math.Vector2Like} T - [point,$return]\r\n *\r\n * @param {(Phaser.Geom.Point|object)} point - The point to be rotated.\r\n * @param {number} x - The horizontal coordinate to rotate around.\r\n * @param {number} y - The vertical coordinate to rotate around.\r\n * @param {number} angle - The angle of rotation in radians.\r\n *\r\n * @return {Phaser.Types.Math.Vector2Like} The given point.\r\n */\r\nvar RotateAround = function (point, x, y, angle)\r\n{\r\n    var c = Math.cos(angle);\r\n    var s = Math.sin(angle);\r\n\r\n    var tx = point.x - x;\r\n    var ty = point.y - y;\r\n\r\n    point.x = tx * c - ty * s + x;\r\n    point.y = tx * s + ty * c + y;\r\n\r\n    return point;\r\n};\r\n\r\nmodule.exports = RotateAround;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Vector2 = require('./Vector2');\r\n\r\n/**\r\n * Takes the `x` and `y` coordinates and transforms them into the same space as\r\n * defined by the position, rotation and scale values.\r\n *\r\n * @function Phaser.Math.TransformXY\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The x coordinate to be transformed.\r\n * @param {number} y - The y coordinate to be transformed.\r\n * @param {number} positionX - Horizontal position of the transform point.\r\n * @param {number} positionY - Vertical position of the transform point.\r\n * @param {number} rotation - Rotation of the transform point, in radians.\r\n * @param {number} scaleX - Horizontal scale of the transform point.\r\n * @param {number} scaleY - Vertical scale of the transform point.\r\n * @param {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} [output] - The output vector, point or object for the translated coordinates.\r\n *\r\n * @return {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} The translated point.\r\n */\r\nvar TransformXY = function (x, y, positionX, positionY, rotation, scaleX, scaleY, output)\r\n{\r\n    if (output === undefined) { output = new Vector2(); }\r\n\r\n    var radianSin = Math.sin(rotation);\r\n    var radianCos = Math.cos(rotation);\r\n\r\n    // Rotate and Scale\r\n    var a = radianCos * scaleX;\r\n    var b = radianSin * scaleX;\r\n    var c = -radianSin * scaleY;\r\n    var d = radianCos * scaleY;\r\n\r\n    //  Invert\r\n    var id = 1 / ((a * d) + (c * -b));\r\n\r\n    output.x = (d * id * x) + (-c * id * y) + (((positionY * c) - (positionX * d)) * id);\r\n    output.y = (a * id * y) + (-b * id * x) + (((-positionY * a) + (positionX * b)) * id);\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = TransformXY;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar MathWrap = require('../Wrap');\r\n\r\n/**\r\n * Wrap an angle.\r\n *\r\n * Wraps the angle to a value in the range of -PI to PI.\r\n *\r\n * @function Phaser.Math.Angle.Wrap\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to wrap, in radians.\r\n *\r\n * @return {number} The wrapped angle, in radians.\r\n */\r\nvar Wrap = function (angle)\r\n{\r\n    return MathWrap(angle, -Math.PI, Math.PI);\r\n};\r\n\r\nmodule.exports = Wrap;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Wrap = require('../Wrap');\r\n\r\n/**\r\n * Wrap an angle in degrees.\r\n *\r\n * Wraps the angle to a value in the range of -180 to 180.\r\n *\r\n * @function Phaser.Math.Angle.WrapDegrees\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to wrap, in degrees.\r\n *\r\n * @return {number} The wrapped angle, in degrees.\r\n */\r\nvar WrapDegrees = function (angle)\r\n{\r\n    return Wrap(angle, -180, 180);\r\n};\r\n\r\nmodule.exports = WrapDegrees;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar MATH_CONST = {\r\n\r\n    /**\r\n     * The value of PI * 2.\r\n     * \r\n     * @name Phaser.Math.PI2\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PI2: Math.PI * 2,\r\n\r\n    /**\r\n     * The value of PI * 0.5.\r\n     * \r\n     * @name Phaser.Math.TAU\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    TAU: Math.PI * 0.5,\r\n\r\n    /**\r\n     * An epsilon value (1.0e-6)\r\n     * \r\n     * @name Phaser.Math.EPSILON\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    EPSILON: 1.0e-6,\r\n\r\n    /**\r\n     * For converting degrees to radians (PI / 180)\r\n     * \r\n     * @name Phaser.Math.DEG_TO_RAD\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    DEG_TO_RAD: Math.PI / 180,\r\n\r\n    /**\r\n     * For converting radians to degrees (180 / PI)\r\n     * \r\n     * @name Phaser.Math.RAD_TO_DEG\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    RAD_TO_DEG: 180 / Math.PI,\r\n\r\n    /**\r\n     * An instance of the Random Number Generator.\r\n     * This is not set until the Game boots.\r\n     * \r\n     * @name Phaser.Math.RND\r\n     * @type {Phaser.Math.RandomDataGenerator}\r\n     * @since 3.0.0\r\n     */\r\n    RND: null,\r\n\r\n    /**\r\n     * The minimum safe integer this browser supports.\r\n     * We use a const for backward compatibility with Internet Explorer.\r\n     * \r\n     * @name Phaser.Math.MIN_SAFE_INTEGER\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n\r\n    /**\r\n     * The maximum safe integer this browser supports.\r\n     * We use a const for backward compatibility with Internet Explorer.\r\n     * \r\n     * @name Phaser.Math.MAX_SAFE_INTEGER\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991\r\n\r\n};\r\n\r\nmodule.exports = MATH_CONST;\r\n"],"names":["module","exports","point","x","y","angle","c","Math","cos","s","sin","tx","ty","Vector2","positionX","positionY","rotation","scaleX","scaleY","output","undefined","radianSin","radianCos","a","b","d","id","MathWrap","PI","Wrap","MATH_CONST","PI2","TAU","EPSILON","DEG_TO_RAD","RAD_TO_DEG","RND","MIN_SAFE_INTEGER","Number","MAX_SAFE_INTEGER"],"sourceRoot":""}