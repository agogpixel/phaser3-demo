{"version":3,"file":"js/app.f7241d60897dd25463c8.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./src/app/scenes/main-scene.ts","webpack://@agogpixel/phaser3-demo/./src/app/scenes/preload-scene.ts","webpack://@agogpixel/phaser3-demo/./src/app/index.ts"],"sourcesContent":["/**\n * Main scene.\n */\nexport class MainScene extends Phaser.Scene {\n  /**\n   * Scene key.\n   */\n  public static readonly key = 'Main';\n\n  /**\n   * Keyboard controls.\n   */\n  private controls: Phaser.Cameras.Controls.FixedKeyControl;\n\n  /**\n   * Instantiate main scene.\n   */\n  public constructor() {\n    super(MainScene.key);\n  }\n\n  /**\n   * Lifecycle method called before all others.\n   */\n  public init(): void {\n    // Initially disable input.\n    this.input.keyboard.enabled = false;\n  }\n\n  /**\n   * Lifecycle method called after init & preload.\n   */\n  public create(): void {\n    // Scene fade in.\n    this.cameras.main.setAlpha(0);\n    this.events.once(Phaser.Scenes.Events.TRANSITION_START, (fromScene, duration) => {\n      this.tweens.add({\n        targets: this.cameras.main,\n        alpha: 1,\n        duration,\n        delay: 1000,\n        // Allow input after fade in complete.\n        onComplete: () => (this.input.keyboard.enabled = true)\n      });\n    });\n\n    const scaleFactor = 4;\n\n    // Background.\n    const tilemap = this.make.tilemap({ key: 'mapA', insertNull: true });\n    const tileset = tilemap.addTilesetImage('roguelikeCity_transparent');\n    const layer = tilemap.createLayer('Tile Layer 1', tileset).setScale(scaleFactor);\n    tilemap.createLayer('Tile Layer 2', tileset).setScale(scaleFactor);\n\n    // Lightposts.\n    const cx = (tilemap.tileWidth / 2) * scaleFactor;\n    const cy = (tilemap.tileHeight / 2) * scaleFactor;\n    const v = new Phaser.Math.Vector2();\n    layer.tileToWorldXY(7, 9, v);\n    const lp1 = this.add.image(v.x + cx, v.y + cy + (cy / 2), 'lightpost', 'right').setScale(scaleFactor).setOrigin(0.2, 1).setDepth(9);\n    layer.tileToWorldXY(23, 9, v);\n    const lp2 = this.add.image(v.x + cx, v.y + cy + (cy / 2), 'lightpost', 'right').setScale(scaleFactor).setOrigin(0.2, 1).setDepth(9);\n    layer.tileToWorldXY(15, 15, v);\n    const lp3 = this.add.image(v.x + cx, v.y + cy - (cy / 2), 'lightpost', 'left').setScale(scaleFactor).setOrigin(0.8, 1).setDepth(15);\n\n    // Rain particle emitter.\n    const rain = this.add.particles('blue').createEmitter({\n      x: { min: 0, max: layer.displayWidth },\n      y: 0,\n      lifespan: 1000,\n      speedY: 1500,\n      scaleY: { min: 1, max: 4 },\n      scaleX: .01,\n      quantity: 1,\n      blendMode: 'SCREEN',\n    });\n\n    // Lighting.\n    const shadow = this.add.graphics();\n    shadow.depth = 1000;\n    shadow.fillStyle(0x000000, 0.75);\n    shadow.fillRect(0, 0, layer.displayWidth, layer.displayHeight);\n\n    // TODO: Lighting.\n    /*const t1 = this.make.graphics({});\n    t1.fillStyle(0xffffff, 1);\n    t1.beginPath();\n    t1.moveTo(585, 825);\n    t1.lineTo(435, 1000);\n    t1.lineTo(735, 1000);\n    t1.fill();\n    const mask = t1.createGeometryMask();\n    mask.invertAlpha = true;\n    shadow.setMask(mask);*/\n\n    // Keyboard controls.\n    const cursors = this.input.keyboard.createCursorKeys();\n    this.controls = new Phaser.Cameras.Controls.FixedKeyControl({\n      camera: this.cameras.main,\n      left: cursors.left,\n      right: cursors.right,\n      up: cursors.up,\n      down: cursors.down,\n      speed: 0.5,\n      // TODO: weird\n      zoomIn: this.input.keyboard.addKey('MINUS'),\n      zoomOut: this.input.keyboard.addKey('PLUS'),\n      maxZoom: 3,\n      minZoom: 0.5\n    });\n\n    // Set camera bounds to tilemap's current display dimensions.\n    this.cameras.main.setBounds(0, 0, layer.displayWidth, layer.displayHeight);\n  }\n\n  public update(time: number, delta: number): void {\n    this.controls.update(delta);\n  }\n}\n","import { MainScene } from './main-scene';\n\n/**\n * Preload scene.\n */\nexport class PreloadScene extends Phaser.Scene {\n  /**\n   * Scene key.\n   */\n  public static readonly key = 'Preload';\n\n  /**\n   * Instantiate load scene.\n   */\n  public constructor() {\n    super(PreloadScene.key);\n  }\n\n  /**\n   * Lifecycle method called after init & before create.\n   */\n  public preload(): void {\n    // Tileset.\n    this.load.image('roguelikeCity_transparent', 'assets/roguelikeCity_transparent.png');\n\n    // Tilemap data.\n    this.load.tilemapTiledJSON('mapA', 'assets/mapA.json');\n\n    // Rain particle.\n    this.load.image('blue', 'assets/blue.png');\n  }\n\n  /**\n   * Lifecycle method called after init & preload.\n   */\n  public create(): void {\n    this.createLightpostTexture();\n\n    this.scene.transition({\n      target: MainScene.key,\n      duration: 1500,\n      sleep: false,\n      allowInput: false,\n      onUpdate: (progress: number) => {\n        const style = document.getElementById('splashContainer').style;\n\n        style.opacity = (1 - progress).toString();\n\n        if (progress === 1) {\n          style.display = 'none';\n          style.opacity = '1';\n        }\n      }\n    });\n  }\n\n  /**\n   * Create lightpost texture sheet from tileset.\n   */\n  private createLightpostTexture(): void {\n    const tilemap = this.make.tilemap({ tileWidth: 16, tileHeight: 16, width: 2, height: 3 });\n    const tileset = tilemap.addTilesetImage('roguelikeCity_transparent', 'roguelikeCity_transparent', 16, 16, 0, 1);\n\n    const layer = tilemap.createBlankLayer('layer', tileset);\n    this.children.remove(layer);\n\n    const renderTexture = this.make.renderTexture({ x: 0, y: 0, width: layer.width * 2, height: layer.height }, false);\n\n    // Left facing.\n    layer.putTileAt(593, 0, 0);\n    layer.putTileAt(630, 0, 1);\n    layer.putTileAt(667, 0, 2);\n\n    // Right facing.\n    layer.putTileAt(594, 1, 0);\n    layer.putTileAt(631, 1, 1);\n    layer.putTileAt(668, 1, 2);\n\n    const texture = renderTexture.draw(layer).saveTexture('lightpost');\n\n    texture.add('left', 0, 0, 0, 16, 48)\n    texture.add('right', 0, 16, 0, 16, 48)\n  }\n}\n","import { MainScene, PreloadScene } from './scenes'\n\nexport function app(): void {\n  new Phaser.Game({\n    title: 'agogpixel/phaser3-demo',\n    version: '0.0.0',\n    type: Phaser.AUTO,\n    parent: 'body',\n    pixelArt: true,\n    dom: {\n      createContainer: true\n    },\n    scale: {\n      mode: Phaser.Scale.FIT,\n      autoCenter: Phaser.Scale.CENTER_BOTH,\n      width: '100%',\n      height: '100%'\n    },\n    plugins: {\n      global: []\n    },\n    scene: [PreloadScene, MainScene]\n  });\n}\n"],"names":["MainScene","key","init","this","input","keyboard","enabled","create","cameras","main","setAlpha","events","once","Phaser","Scenes","Events","TRANSITION_START","fromScene","duration","tweens","add","targets","alpha","delay","onComplete","tilemap","make","insertNull","tileset","addTilesetImage","layer","createLayer","setScale","cx","tileWidth","cy","tileHeight","v","Math","Vector2","tileToWorldXY","image","x","y","setOrigin","setDepth","particles","createEmitter","min","max","displayWidth","lifespan","speedY","scaleY","scaleX","quantity","blendMode","shadow","graphics","depth","fillStyle","fillRect","displayHeight","cursors","createCursorKeys","controls","Cameras","Controls","FixedKeyControl","camera","left","right","up","down","speed","zoomIn","addKey","zoomOut","maxZoom","minZoom","setBounds","update","time","delta","Scene","PreloadScene","preload","load","tilemapTiledJSON","createLightpostTexture","scene","transition","target","sleep","allowInput","onUpdate","progress","style","document","getElementById","opacity","toString","display","width","height","createBlankLayer","children","remove","renderTexture","putTileAt","texture","draw","saveTexture","Game","title","version","type","AUTO","parent","pixelArt","dom","createContainer","scale","mode","Scale","FIT","autoCenter","CENTER_BOTH","plugins","global"],"sourceRoot":""}