{"version":3,"file":"js/4259.bd9ff3532354f7a9bf3b.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Matrix4.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Vector3.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Vector3 = require('./Vector3');\r\n\r\n/**\r\n * @ignore\r\n */\r\nvar EPSILON = 0.000001;\r\n\r\n/**\r\n * @classdesc\r\n * A four-dimensional matrix.\r\n *\r\n * Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n * and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n *\r\n * @class Matrix4\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Matrix4} [m] - Optional Matrix4 to copy values from.\r\n */\r\nvar Matrix4 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Matrix4 (m)\r\n    {\r\n        /**\r\n         * The matrix values.\r\n         *\r\n         * @name Phaser.Math.Matrix4#val\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.val = new Float32Array(16);\r\n\r\n        if (m)\r\n        {\r\n            //  Assume Matrix4 with val:\r\n            this.copy(m);\r\n        }\r\n        else\r\n        {\r\n            //  Default to identity\r\n            this.identity();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Matrix4.\r\n     *\r\n     * @method Phaser.Math.Matrix4#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix4} A clone of this Matrix4.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Matrix4(this);\r\n    },\r\n\r\n    /**\r\n     * This method is an alias for `Matrix4.copy`.\r\n     *\r\n     * @method Phaser.Math.Matrix4#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} src - The Matrix to set the values of this Matrix's from.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    set: function (src)\r\n    {\r\n        return this.copy(src);\r\n    },\r\n\r\n    /**\r\n     * Sets all values of this Matrix4.\r\n     *\r\n     * @method Phaser.Math.Matrix4#setValues\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} m00 - The m00 value.\r\n     * @param {number} m01 - The m01 value.\r\n     * @param {number} m02 - The m02 value.\r\n     * @param {number} m03 - The m03 value.\r\n     * @param {number} m10 - The m10 value.\r\n     * @param {number} m11 - The m11 value.\r\n     * @param {number} m12 - The m12 value.\r\n     * @param {number} m13 - The m13 value.\r\n     * @param {number} m20 - The m20 value.\r\n     * @param {number} m21 - The m21 value.\r\n     * @param {number} m22 - The m22 value.\r\n     * @param {number} m23 - The m23 value.\r\n     * @param {number} m30 - The m30 value.\r\n     * @param {number} m31 - The m31 value.\r\n     * @param {number} m32 - The m32 value.\r\n     * @param {number} m33 - The m33 value.\r\n     *\r\n     * @return {this} This Matrix4 instance.\r\n     */\r\n    setValues: function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33)\r\n    {\r\n        var out = this.val;\r\n\r\n        out[0] = m00;\r\n        out[1] = m01;\r\n        out[2] = m02;\r\n        out[3] = m03;\r\n        out[4] = m10;\r\n        out[5] = m11;\r\n        out[6] = m12;\r\n        out[7] = m13;\r\n        out[8] = m20;\r\n        out[9] = m21;\r\n        out[10] = m22;\r\n        out[11] = m23;\r\n        out[12] = m30;\r\n        out[13] = m31;\r\n        out[14] = m32;\r\n        out[15] = m33;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Copy the values of a given Matrix into this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} src - The Matrix to copy the values from.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        var a = src.val;\r\n\r\n        return this.setValues(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix from the given array.\r\n     *\r\n     * @method Phaser.Math.Matrix4#fromArray\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number[]} a - The array to copy the values from. Must have at least 16 elements.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    fromArray: function (a)\r\n    {\r\n        return this.setValues(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\r\n    },\r\n\r\n    /**\r\n     * Reset this Matrix.\r\n     *\r\n     * Sets all values to `0`.\r\n     *\r\n     * @method Phaser.Math.Matrix4#zero\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix4} This Matrix4.\r\n     */\r\n    zero: function ()\r\n    {\r\n        return this.setValues(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n    },\r\n\r\n    /**\r\n     * Generates a transform matrix based on the given position, scale and rotation.\r\n     *\r\n     * @method Phaser.Math.Matrix4#transform\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} position - The position vector.\r\n     * @param {Phaser.Math.Vector3} scale - The scale vector.\r\n     * @param {Phaser.Math.Quaternion} rotation - The rotation quaternion.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    transform: function (position, scale, rotation)\r\n    {\r\n        var rotMatrix = _tempMat1.fromQuat(rotation);\r\n\r\n        var rm = rotMatrix.val;\r\n\r\n        var sx = scale.x;\r\n        var sy = scale.y;\r\n        var sz = scale.z;\r\n\r\n        return this.setValues(\r\n            rm[0] * sx,\r\n            rm[1] * sx,\r\n            rm[2] * sx,\r\n            0,\r\n\r\n            rm[4] * sy,\r\n            rm[5] * sy,\r\n            rm[6] * sy,\r\n            0,\r\n\r\n            rm[8] * sz,\r\n            rm[9] * sz,\r\n            rm[10] * sz,\r\n            0,\r\n\r\n            position.x,\r\n            position.y,\r\n            position.z,\r\n            1\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Set the `x`, `y` and `z` values of this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#xyz\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x value.\r\n     * @param {number} y - The y value.\r\n     * @param {number} z - The z value.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    xyz: function (x, y, z)\r\n    {\r\n        this.identity();\r\n\r\n        var out = this.val;\r\n\r\n        out[12] = x;\r\n        out[13] = y;\r\n        out[14] = z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the scaling values of this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#scaling\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x scaling value.\r\n     * @param {number} y - The y scaling value.\r\n     * @param {number} z - The z scaling value.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    scaling: function (x, y, z)\r\n    {\r\n        this.zero();\r\n\r\n        var out = this.val;\r\n\r\n        out[0] = x;\r\n        out[5] = y;\r\n        out[10] = z;\r\n        out[15] = 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Reset this Matrix to an identity (default) matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#identity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    identity: function ()\r\n    {\r\n        return this.setValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\r\n    },\r\n\r\n    /**\r\n     * Transpose this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#transpose\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    transpose: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n        var a23 = a[11];\r\n\r\n        a[1] = a[4];\r\n        a[2] = a[8];\r\n        a[3] = a[12];\r\n        a[4] = a01;\r\n        a[6] = a[9];\r\n        a[7] = a[13];\r\n        a[8] = a02;\r\n        a[9] = a12;\r\n        a[11] = a[14];\r\n        a[12] = a03;\r\n        a[13] = a13;\r\n        a[14] = a23;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Copies the given Matrix4 into this Matrix and then inverses it.\r\n     *\r\n     * @method Phaser.Math.Matrix4#getInverse\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} m - The Matrix4 to invert into this Matrix4.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    getInverse: function (m)\r\n    {\r\n        this.copy(m);\r\n\r\n        return this.invert();\r\n    },\r\n\r\n    /**\r\n     * Invert this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#invert\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    invert: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n\r\n        var a30 = a[12];\r\n        var a31 = a[13];\r\n        var a32 = a[14];\r\n        var a33 = a[15];\r\n\r\n        var b00 = a00 * a11 - a01 * a10;\r\n        var b01 = a00 * a12 - a02 * a10;\r\n        var b02 = a00 * a13 - a03 * a10;\r\n        var b03 = a01 * a12 - a02 * a11;\r\n\r\n        var b04 = a01 * a13 - a03 * a11;\r\n        var b05 = a02 * a13 - a03 * a12;\r\n        var b06 = a20 * a31 - a21 * a30;\r\n        var b07 = a20 * a32 - a22 * a30;\r\n\r\n        var b08 = a20 * a33 - a23 * a30;\r\n        var b09 = a21 * a32 - a22 * a31;\r\n        var b10 = a21 * a33 - a23 * a31;\r\n        var b11 = a22 * a33 - a23 * a32;\r\n\r\n        //  Calculate the determinant\r\n        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        det = 1 / det;\r\n\r\n        return this.setValues(\r\n            (a11 * b11 - a12 * b10 + a13 * b09) * det,\r\n            (a02 * b10 - a01 * b11 - a03 * b09) * det,\r\n            (a31 * b05 - a32 * b04 + a33 * b03) * det,\r\n            (a22 * b04 - a21 * b05 - a23 * b03) * det,\r\n            (a12 * b08 - a10 * b11 - a13 * b07) * det,\r\n            (a00 * b11 - a02 * b08 + a03 * b07) * det,\r\n            (a32 * b02 - a30 * b05 - a33 * b01) * det,\r\n            (a20 * b05 - a22 * b02 + a23 * b01) * det,\r\n            (a10 * b10 - a11 * b08 + a13 * b06) * det,\r\n            (a01 * b08 - a00 * b10 - a03 * b06) * det,\r\n            (a30 * b04 - a31 * b02 + a33 * b00) * det,\r\n            (a21 * b02 - a20 * b04 - a23 * b00) * det,\r\n            (a11 * b07 - a10 * b09 - a12 * b06) * det,\r\n            (a00 * b09 - a01 * b07 + a02 * b06) * det,\r\n            (a31 * b01 - a30 * b03 - a32 * b00) * det,\r\n            (a20 * b03 - a21 * b01 + a22 * b00) * det\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Calculate the adjoint, or adjugate, of this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#adjoint\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    adjoint: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n\r\n        var a30 = a[12];\r\n        var a31 = a[13];\r\n        var a32 = a[14];\r\n        var a33 = a[15];\r\n\r\n        return this.setValues(\r\n            (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22)),\r\n            -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22)),\r\n            (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12)),\r\n            -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12)),\r\n            -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22)),\r\n            (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22)),\r\n            -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12)),\r\n            (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12)),\r\n            (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21)),\r\n            -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21)),\r\n            (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11)),\r\n            -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11)),\r\n            -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21)),\r\n            (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21)),\r\n            -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11)),\r\n            (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11))\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Calculate the determinant of this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#determinant\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The determinant of this Matrix.\r\n     */\r\n    determinant: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n\r\n        var a30 = a[12];\r\n        var a31 = a[13];\r\n        var a32 = a[14];\r\n        var a33 = a[15];\r\n\r\n        var b00 = a00 * a11 - a01 * a10;\r\n        var b01 = a00 * a12 - a02 * a10;\r\n        var b02 = a00 * a13 - a03 * a10;\r\n        var b03 = a01 * a12 - a02 * a11;\r\n        var b04 = a01 * a13 - a03 * a11;\r\n        var b05 = a02 * a13 - a03 * a12;\r\n        var b06 = a20 * a31 - a21 * a30;\r\n        var b07 = a20 * a32 - a22 * a30;\r\n        var b08 = a20 * a33 - a23 * a30;\r\n        var b09 = a21 * a32 - a22 * a31;\r\n        var b10 = a21 * a33 - a23 * a31;\r\n        var b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n    },\r\n\r\n    /**\r\n     * Multiply this Matrix by the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} src - The Matrix to multiply this Matrix by.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    multiply: function (src)\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n\r\n        var a30 = a[12];\r\n        var a31 = a[13];\r\n        var a32 = a[14];\r\n        var a33 = a[15];\r\n\r\n        var b = src.val;\r\n\r\n        // Cache only the current line of the second matrix\r\n        var b0 = b[0];\r\n        var b1 = b[1];\r\n        var b2 = b[2];\r\n        var b3 = b[3];\r\n\r\n        a[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        a[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        a[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        a[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[4];\r\n        b1 = b[5];\r\n        b2 = b[6];\r\n        b3 = b[7];\r\n\r\n        a[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        a[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        a[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        a[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[8];\r\n        b1 = b[9];\r\n        b2 = b[10];\r\n        b3 = b[11];\r\n\r\n        a[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        a[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        a[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        a[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[12];\r\n        b1 = b[13];\r\n        b2 = b[14];\r\n        b3 = b[15];\r\n\r\n        a[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        a[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        a[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        a[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiply the values of this Matrix4 by those given in the `src` argument.\r\n     *\r\n     * @method Phaser.Math.Matrix4#multiplyLocal\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} src - The source Matrix4 that this Matrix4 is multiplied by.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    multiplyLocal: function (src)\r\n    {\r\n        var a = this.val;\r\n        var b = src.val;\r\n\r\n        return this.setValues(\r\n            a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12],\r\n            a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13],\r\n            a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14],\r\n            a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15],\r\n\r\n            a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12],\r\n            a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13],\r\n            a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14],\r\n            a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15],\r\n\r\n            a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12],\r\n            a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13],\r\n            a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14],\r\n            a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15],\r\n\r\n            a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12],\r\n            a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13],\r\n            a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14],\r\n            a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15]\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Multiplies the given Matrix4 object with this Matrix.\r\n     *\r\n     * This is the same as calling `multiplyMatrices(m, this)`.\r\n     *\r\n     * @method Phaser.Math.Matrix4#premultiply\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} m - The Matrix4 to multiply with this one.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    premultiply: function (m)\r\n    {\r\n        return this.multiplyMatrices(m, this);\r\n    },\r\n\r\n    /**\r\n     * Multiplies the two given Matrix4 objects and stores the results in this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#multiplyMatrices\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} a - The first Matrix4 to multiply.\r\n     * @param {Phaser.Math.Matrix4} b - The second Matrix4 to multiply.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    multiplyMatrices: function (a, b)\r\n    {\r\n        var am = a.val;\r\n        var bm = b.val;\r\n\r\n        var a11 = am[0];\r\n        var a12 = am[4];\r\n        var a13 = am[8];\r\n        var a14 = am[12];\r\n        var a21 = am[1];\r\n        var a22 = am[5];\r\n        var a23 = am[9];\r\n        var a24 = am[13];\r\n        var a31 = am[2];\r\n        var a32 = am[6];\r\n        var a33 = am[10];\r\n        var a34 = am[14];\r\n        var a41 = am[3];\r\n        var a42 = am[7];\r\n        var a43 = am[11];\r\n        var a44 = am[15];\r\n\r\n        var b11 = bm[0];\r\n        var b12 = bm[4];\r\n        var b13 = bm[8];\r\n        var b14 = bm[12];\r\n        var b21 = bm[1];\r\n        var b22 = bm[5];\r\n        var b23 = bm[9];\r\n        var b24 = bm[13];\r\n        var b31 = bm[2];\r\n        var b32 = bm[6];\r\n        var b33 = bm[10];\r\n        var b34 = bm[14];\r\n        var b41 = bm[3];\r\n        var b42 = bm[7];\r\n        var b43 = bm[11];\r\n        var b44 = bm[15];\r\n\r\n        return this.setValues(\r\n            a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41,\r\n            a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41,\r\n            a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41,\r\n            a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41,\r\n            a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42,\r\n            a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42,\r\n            a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42,\r\n            a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42,\r\n            a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43,\r\n            a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43,\r\n            a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43,\r\n            a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43,\r\n            a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44,\r\n            a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44,\r\n            a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44,\r\n            a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Translate this Matrix using the given Vector.\r\n     *\r\n     * @method Phaser.Math.Matrix4#translate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to translate this Matrix with.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    translate: function (v)\r\n    {\r\n        return this.translateXYZ(v.x, v.y, v.z);\r\n    },\r\n\r\n    /**\r\n     * Translate this Matrix using the given values.\r\n     *\r\n     * @method Phaser.Math.Matrix4#translateXYZ\r\n     * @since 3.16.0\r\n     *\r\n     * @param {number} x - The x component.\r\n     * @param {number} y - The y component.\r\n     * @param {number} z - The z component.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    translateXYZ: function (x, y, z)\r\n    {\r\n        var a = this.val;\r\n\r\n        a[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n        a[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n        a[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n        a[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply a scale transformation to this Matrix.\r\n     *\r\n     * Uses the `x`, `y` and `z` components of the given Vector to scale the Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to scale this Matrix with.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    scale: function (v)\r\n    {\r\n        return this.scaleXYZ(v.x, v.y, v.z);\r\n    },\r\n\r\n    /**\r\n     * Apply a scale transformation to this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#scaleXYZ\r\n     * @since 3.16.0\r\n     *\r\n     * @param {number} x - The x component.\r\n     * @param {number} y - The y component.\r\n     * @param {number} z - The z component.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    scaleXYZ: function (x, y, z)\r\n    {\r\n        var a = this.val;\r\n\r\n        a[0] = a[0] * x;\r\n        a[1] = a[1] * x;\r\n        a[2] = a[2] * x;\r\n        a[3] = a[3] * x;\r\n\r\n        a[4] = a[4] * y;\r\n        a[5] = a[5] * y;\r\n        a[6] = a[6] * y;\r\n        a[7] = a[7] * y;\r\n\r\n        a[8] = a[8] * z;\r\n        a[9] = a[9] * z;\r\n        a[10] = a[10] * z;\r\n        a[11] = a[11] * z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Derive a rotation matrix around the given axis.\r\n     *\r\n     * @method Phaser.Math.Matrix4#makeRotationAxis\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector3|Phaser.Math.Vector4)} axis - The rotation axis.\r\n     * @param {number} angle - The rotation angle in radians.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    makeRotationAxis: function (axis, angle)\r\n    {\r\n        // Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n        var c = Math.cos(angle);\r\n        var s = Math.sin(angle);\r\n        var t = 1 - c;\r\n        var x = axis.x;\r\n        var y = axis.y;\r\n        var z = axis.z;\r\n        var tx = t * x;\r\n        var ty = t * y;\r\n\r\n        return this.setValues(\r\n            tx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n            tx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n            tx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Apply a rotation transformation to this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#rotate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The angle in radians to rotate by.\r\n     * @param {Phaser.Math.Vector3} axis - The axis to rotate upon.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    rotate: function (rad, axis)\r\n    {\r\n        var a = this.val;\r\n        var x = axis.x;\r\n        var y = axis.y;\r\n        var z = axis.z;\r\n        var len = Math.sqrt(x * x + y * y + z * z);\r\n\r\n        if (Math.abs(len) < EPSILON)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        var s = Math.sin(rad);\r\n        var c = Math.cos(rad);\r\n        var t = 1 - c;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n\r\n        var a30 = a[12];\r\n        var a31 = a[13];\r\n        var a32 = a[14];\r\n        var a33 = a[15];\r\n\r\n        //  Construct the elements of the rotation matrix\r\n        var b00 = x * x * t + c;\r\n        var b01 = y * x * t + z * s;\r\n        var b02 = z * x * t - y * s;\r\n\r\n        var b10 = x * y * t - z * s;\r\n        var b11 = y * y * t + c;\r\n        var b12 = z * y * t + x * s;\r\n\r\n        var b20 = x * z * t + y * s;\r\n        var b21 = y * z * t - x * s;\r\n        var b22 = z * z * t + c;\r\n\r\n        //  Perform rotation-specific matrix multiplication\r\n        return this.setValues(\r\n            a00 * b00 + a10 * b01 + a20 * b02,\r\n            a01 * b00 + a11 * b01 + a21 * b02,\r\n            a02 * b00 + a12 * b01 + a22 * b02,\r\n            a03 * b00 + a13 * b01 + a23 * b02,\r\n            a00 * b10 + a10 * b11 + a20 * b12,\r\n            a01 * b10 + a11 * b11 + a21 * b12,\r\n            a02 * b10 + a12 * b11 + a22 * b12,\r\n            a03 * b10 + a13 * b11 + a23 * b12,\r\n            a00 * b20 + a10 * b21 + a20 * b22,\r\n            a01 * b20 + a11 * b21 + a21 * b22,\r\n            a02 * b20 + a12 * b21 + a22 * b22,\r\n            a03 * b20 + a13 * b21 + a23 * b22,\r\n            a30, a31, a32, a33\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Rotate this matrix on its X axis.\r\n     *\r\n     * @method Phaser.Math.Matrix4#rotateX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The angle in radians to rotate by.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    rotateX: function (rad)\r\n    {\r\n        var a = this.val;\r\n        var s = Math.sin(rad);\r\n        var c = Math.cos(rad);\r\n\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        a[4] = a10 * c + a20 * s;\r\n        a[5] = a11 * c + a21 * s;\r\n        a[6] = a12 * c + a22 * s;\r\n        a[7] = a13 * c + a23 * s;\r\n        a[8] = a20 * c - a10 * s;\r\n        a[9] = a21 * c - a11 * s;\r\n        a[10] = a22 * c - a12 * s;\r\n        a[11] = a23 * c - a13 * s;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate this matrix on its Y axis.\r\n     *\r\n     * @method Phaser.Math.Matrix4#rotateY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The angle to rotate by, in radians.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    rotateY: function (rad)\r\n    {\r\n        var a = this.val;\r\n        var s = Math.sin(rad);\r\n        var c = Math.cos(rad);\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        a[0] = a00 * c - a20 * s;\r\n        a[1] = a01 * c - a21 * s;\r\n        a[2] = a02 * c - a22 * s;\r\n        a[3] = a03 * c - a23 * s;\r\n        a[8] = a00 * s + a20 * c;\r\n        a[9] = a01 * s + a21 * c;\r\n        a[10] = a02 * s + a22 * c;\r\n        a[11] = a03 * s + a23 * c;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate this matrix on its Z axis.\r\n     *\r\n     * @method Phaser.Math.Matrix4#rotateZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The angle to rotate by, in radians.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    rotateZ: function (rad)\r\n    {\r\n        var a = this.val;\r\n        var s = Math.sin(rad);\r\n        var c = Math.cos(rad);\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        a[0] = a00 * c + a10 * s;\r\n        a[1] = a01 * c + a11 * s;\r\n        a[2] = a02 * c + a12 * s;\r\n        a[3] = a03 * c + a13 * s;\r\n        a[4] = a10 * c - a00 * s;\r\n        a[5] = a11 * c - a01 * s;\r\n        a[6] = a12 * c - a02 * s;\r\n        a[7] = a13 * c - a03 * s;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix from the given rotation Quaternion and translation Vector.\r\n     *\r\n     * @method Phaser.Math.Matrix4#fromRotationTranslation\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to set rotation from.\r\n     * @param {Phaser.Math.Vector3} v - The Vector to set translation from.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    fromRotationTranslation: function (q, v)\r\n    {\r\n        //  Quaternion math\r\n        var x = q.x;\r\n        var y = q.y;\r\n        var z = q.z;\r\n        var w = q.w;\r\n\r\n        var x2 = x + x;\r\n        var y2 = y + y;\r\n        var z2 = z + z;\r\n\r\n        var xx = x * x2;\r\n        var xy = x * y2;\r\n        var xz = x * z2;\r\n\r\n        var yy = y * y2;\r\n        var yz = y * z2;\r\n        var zz = z * z2;\r\n\r\n        var wx = w * x2;\r\n        var wy = w * y2;\r\n        var wz = w * z2;\r\n\r\n        return this.setValues(\r\n            1 - (yy + zz),\r\n            xy + wz,\r\n            xz - wy,\r\n            0,\r\n\r\n            xy - wz,\r\n            1 - (xx + zz),\r\n            yz + wx,\r\n            0,\r\n\r\n            xz + wy,\r\n            yz - wx,\r\n            1 - (xx + yy),\r\n            0,\r\n\r\n            v.x,\r\n            v.y,\r\n            v.z,\r\n            1\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix from the given Quaternion.\r\n     *\r\n     * @method Phaser.Math.Matrix4#fromQuat\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to set the values of this Matrix from.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    fromQuat: function (q)\r\n    {\r\n        var x = q.x;\r\n        var y = q.y;\r\n        var z = q.z;\r\n        var w = q.w;\r\n\r\n        var x2 = x + x;\r\n        var y2 = y + y;\r\n        var z2 = z + z;\r\n\r\n        var xx = x * x2;\r\n        var xy = x * y2;\r\n        var xz = x * z2;\r\n\r\n        var yy = y * y2;\r\n        var yz = y * z2;\r\n        var zz = z * z2;\r\n\r\n        var wx = w * x2;\r\n        var wy = w * y2;\r\n        var wz = w * z2;\r\n\r\n        return this.setValues(\r\n            1 - (yy + zz),\r\n            xy + wz,\r\n            xz - wy,\r\n            0,\r\n\r\n            xy - wz,\r\n            1 - (xx + zz),\r\n            yz + wx,\r\n            0,\r\n\r\n            xz + wy,\r\n            yz - wx,\r\n            1 - (xx + yy),\r\n            0,\r\n\r\n            0,\r\n            0,\r\n            0,\r\n            1\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Generate a frustum matrix with the given bounds.\r\n     *\r\n     * @method Phaser.Math.Matrix4#frustum\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} left - The left bound of the frustum.\r\n     * @param {number} right - The right bound of the frustum.\r\n     * @param {number} bottom - The bottom bound of the frustum.\r\n     * @param {number} top - The top bound of the frustum.\r\n     * @param {number} near - The near bound of the frustum.\r\n     * @param {number} far - The far bound of the frustum.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    frustum: function (left, right, bottom, top, near, far)\r\n    {\r\n        var rl = 1 / (right - left);\r\n        var tb = 1 / (top - bottom);\r\n        var nf = 1 / (near - far);\r\n\r\n        return this.setValues(\r\n            (near * 2) * rl,\r\n            0,\r\n            0,\r\n            0,\r\n\r\n            0,\r\n            (near * 2) * tb,\r\n            0,\r\n            0,\r\n\r\n            (right + left) * rl,\r\n            (top + bottom) * tb,\r\n            (far + near) * nf,\r\n            -1,\r\n\r\n            0,\r\n            0,\r\n            (far * near * 2) * nf,\r\n            0\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Generate a perspective projection matrix with the given bounds.\r\n     *\r\n     * @method Phaser.Math.Matrix4#perspective\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} fovy - Vertical field of view in radians\r\n     * @param {number} aspect - Aspect ratio. Typically viewport width  /height.\r\n     * @param {number} near - Near bound of the frustum.\r\n     * @param {number} far - Far bound of the frustum.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    perspective: function (fovy, aspect, near, far)\r\n    {\r\n        var f = 1.0 / Math.tan(fovy / 2);\r\n        var nf = 1 / (near - far);\r\n\r\n        return this.setValues(\r\n            f / aspect,\r\n            0,\r\n            0,\r\n            0,\r\n\r\n            0,\r\n            f,\r\n            0,\r\n            0,\r\n\r\n            0,\r\n            0,\r\n            (far + near) * nf,\r\n            -1,\r\n\r\n            0,\r\n            0,\r\n            (2 * far * near) * nf,\r\n            0\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Generate a perspective projection matrix with the given bounds.\r\n     *\r\n     * @method Phaser.Math.Matrix4#perspectiveLH\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of the frustum.\r\n     * @param {number} height - The height of the frustum.\r\n     * @param {number} near - Near bound of the frustum.\r\n     * @param {number} far - Far bound of the frustum.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    perspectiveLH: function (width, height, near, far)\r\n    {\r\n        return this.setValues(\r\n            (2 * near) / width,\r\n            0,\r\n            0,\r\n            0,\r\n\r\n            0,\r\n            (2 * near) / height,\r\n            0,\r\n            0,\r\n\r\n            0,\r\n            0,\r\n            -far / (near - far),\r\n            1,\r\n\r\n            0,\r\n            0,\r\n            (near * far) / (near - far),\r\n            0\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Generate an orthogonal projection matrix with the given bounds.\r\n     *\r\n     * @method Phaser.Math.Matrix4#ortho\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} left - The left bound of the frustum.\r\n     * @param {number} right - The right bound of the frustum.\r\n     * @param {number} bottom - The bottom bound of the frustum.\r\n     * @param {number} top - The top bound of the frustum.\r\n     * @param {number} near - The near bound of the frustum.\r\n     * @param {number} far - The far bound of the frustum.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    ortho: function (left, right, bottom, top, near, far)\r\n    {\r\n        var lr = left - right;\r\n        var bt = bottom - top;\r\n        var nf = near - far;\r\n\r\n        //  Avoid division by zero\r\n        lr = (lr === 0) ? lr : 1 / lr;\r\n        bt = (bt === 0) ? bt : 1 / bt;\r\n        nf = (nf === 0) ? nf : 1 / nf;\r\n\r\n        return this.setValues(\r\n            -2 * lr,\r\n            0,\r\n            0,\r\n            0,\r\n\r\n            0,\r\n            -2 * bt,\r\n            0,\r\n            0,\r\n\r\n            0,\r\n            0,\r\n            2 * nf,\r\n            0,\r\n\r\n            (left + right) * lr,\r\n            (top + bottom) * bt,\r\n            (far + near) * nf,\r\n            1\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Generate a right-handed look-at matrix with the given eye position, target and up axis.\r\n     *\r\n     * @method Phaser.Math.Matrix4#lookAtRH\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} eye - Position of the viewer.\r\n     * @param {Phaser.Math.Vector3} target - Point the viewer is looking at.\r\n     * @param {Phaser.Math.Vector3} up - vec3 pointing up.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    lookAtRH: function (eye, target, up)\r\n    {\r\n        var m = this.val;\r\n\r\n        _z.subVectors(eye, target);\r\n\r\n        if (_z.getLengthSquared() === 0)\r\n        {\r\n            // eye and target are in the same position\r\n            _z.z = 1;\r\n        }\r\n\r\n        _z.normalize();\r\n        _x.crossVectors(up, _z);\r\n\r\n        if (_x.getLengthSquared() === 0)\r\n        {\r\n            // up and z are parallel\r\n\r\n            if (Math.abs(up.z) === 1)\r\n            {\r\n                _z.x += 0.0001;\r\n            }\r\n            else\r\n            {\r\n                _z.z += 0.0001;\r\n            }\r\n\r\n            _z.normalize();\r\n            _x.crossVectors(up, _z);\r\n        }\r\n\r\n        _x.normalize();\r\n        _y.crossVectors(_z, _x);\r\n\r\n        m[0] = _x.x;\r\n        m[1] = _x.y;\r\n        m[2] = _x.z;\r\n        m[4] = _y.x;\r\n        m[5] = _y.y;\r\n        m[6] = _y.z;\r\n        m[8] = _z.x;\r\n        m[9] = _z.y;\r\n        m[10] = _z.z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Generate a look-at matrix with the given eye position, focal point, and up axis.\r\n     *\r\n     * @method Phaser.Math.Matrix4#lookAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} eye - Position of the viewer\r\n     * @param {Phaser.Math.Vector3} center - Point the viewer is looking at\r\n     * @param {Phaser.Math.Vector3} up - vec3 pointing up.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    lookAt: function (eye, center, up)\r\n    {\r\n        var eyex = eye.x;\r\n        var eyey = eye.y;\r\n        var eyez = eye.z;\r\n\r\n        var upx = up.x;\r\n        var upy = up.y;\r\n        var upz = up.z;\r\n\r\n        var centerx = center.x;\r\n        var centery = center.y;\r\n        var centerz = center.z;\r\n\r\n        if (Math.abs(eyex - centerx) < EPSILON &&\r\n            Math.abs(eyey - centery) < EPSILON &&\r\n            Math.abs(eyez - centerz) < EPSILON)\r\n        {\r\n            return this.identity();\r\n        }\r\n\r\n        var z0 = eyex - centerx;\r\n        var z1 = eyey - centery;\r\n        var z2 = eyez - centerz;\r\n\r\n        var len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n\r\n        z0 *= len;\r\n        z1 *= len;\r\n        z2 *= len;\r\n\r\n        var x0 = upy * z2 - upz * z1;\r\n        var x1 = upz * z0 - upx * z2;\r\n        var x2 = upx * z1 - upy * z0;\r\n\r\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n\r\n        if (!len)\r\n        {\r\n            x0 = 0;\r\n            x1 = 0;\r\n            x2 = 0;\r\n        }\r\n        else\r\n        {\r\n            len = 1 / len;\r\n            x0 *= len;\r\n            x1 *= len;\r\n            x2 *= len;\r\n        }\r\n\r\n        var y0 = z1 * x2 - z2 * x1;\r\n        var y1 = z2 * x0 - z0 * x2;\r\n        var y2 = z0 * x1 - z1 * x0;\r\n\r\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n\r\n        if (!len)\r\n        {\r\n            y0 = 0;\r\n            y1 = 0;\r\n            y2 = 0;\r\n        }\r\n        else\r\n        {\r\n            len = 1 / len;\r\n            y0 *= len;\r\n            y1 *= len;\r\n            y2 *= len;\r\n        }\r\n\r\n        return this.setValues(\r\n            x0,\r\n            y0,\r\n            z0,\r\n            0,\r\n\r\n            x1,\r\n            y1,\r\n            z1,\r\n            0,\r\n\r\n            x2,\r\n            y2,\r\n            z2,\r\n            0,\r\n\r\n            -(x0 * eyex + x1 * eyey + x2 * eyez),\r\n            -(y0 * eyex + y1 * eyey + y2 * eyez),\r\n            -(z0 * eyex + z1 * eyey + z2 * eyez),\r\n            1\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Set the values of this matrix from the given `yaw`, `pitch` and `roll` values.\r\n     *\r\n     * @method Phaser.Math.Matrix4#yawPitchRoll\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} yaw - The yaw value.\r\n     * @param {number} pitch - The pitch value.\r\n     * @param {number} roll - The roll value.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    yawPitchRoll: function (yaw, pitch, roll)\r\n    {\r\n        this.zero();\r\n        _tempMat1.zero();\r\n        _tempMat2.zero();\r\n\r\n        var m0 = this.val;\r\n        var m1 = _tempMat1.val;\r\n        var m2 = _tempMat2.val;\r\n\r\n        //  Rotate Z\r\n        var s = Math.sin(roll);\r\n        var c = Math.cos(roll);\r\n\r\n        m0[10] = 1;\r\n        m0[15] = 1;\r\n        m0[0] = c;\r\n        m0[1] = s;\r\n        m0[4] = -s;\r\n        m0[5] = c;\r\n\r\n        //  Rotate X\r\n        s = Math.sin(pitch);\r\n        c = Math.cos(pitch);\r\n\r\n        m1[0] = 1;\r\n        m1[15] = 1;\r\n        m1[5] = c;\r\n        m1[10] = c;\r\n        m1[9] = -s;\r\n        m1[6] = s;\r\n\r\n        //  Rotate Y\r\n        s = Math.sin(yaw);\r\n        c = Math.cos(yaw);\r\n\r\n        m2[5] = 1;\r\n        m2[15] = 1;\r\n        m2[0] = c;\r\n        m2[2] = -s;\r\n        m2[8] = s;\r\n        m2[10] = c;\r\n\r\n        this.multiplyLocal(_tempMat1);\r\n        this.multiplyLocal(_tempMat2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Generate a world matrix from the given rotation, position, scale, view matrix and projection matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix4#setWorldMatrix\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} rotation - The rotation of the world matrix.\r\n     * @param {Phaser.Math.Vector3} position - The position of the world matrix.\r\n     * @param {Phaser.Math.Vector3} scale - The scale of the world matrix.\r\n     * @param {Phaser.Math.Matrix4} [viewMatrix] - The view matrix.\r\n     * @param {Phaser.Math.Matrix4} [projectionMatrix] - The projection matrix.\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    setWorldMatrix: function (rotation, position, scale, viewMatrix, projectionMatrix)\r\n    {\r\n        this.yawPitchRoll(rotation.y, rotation.x, rotation.z);\r\n\r\n        _tempMat1.scaling(scale.x, scale.y, scale.z);\r\n        _tempMat2.xyz(position.x, position.y, position.z);\r\n\r\n        this.multiplyLocal(_tempMat1);\r\n        this.multiplyLocal(_tempMat2);\r\n\r\n        if (viewMatrix)\r\n        {\r\n            this.multiplyLocal(viewMatrix);\r\n        }\r\n\r\n        if (projectionMatrix)\r\n        {\r\n            this.multiplyLocal(projectionMatrix);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiplies this Matrix4 by the given `src` Matrix4 and stores the results in the `out` Matrix4.\r\n     *\r\n     * @method Phaser.Math.Matrix4#multiplyToMat4\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} src - The Matrix4 to multiply with this one.\r\n     * @param {Phaser.Math.Matrix4} out - The receiving Matrix.\r\n     *\r\n     * @return {Phaser.Math.Matrix4} This `out` Matrix4.\r\n     */\r\n    multiplyToMat4: function (src, out)\r\n    {\r\n        var a = this.val;\r\n        var b = src.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n        var a30 = a[12];\r\n        var a31 = a[13];\r\n        var a32 = a[14];\r\n        var a33 = a[15];\r\n\r\n        var b00 = b[0];\r\n        var b01 = b[1];\r\n        var b02 = b[2];\r\n        var b03 = b[3];\r\n        var b10 = b[4];\r\n        var b11 = b[5];\r\n        var b12 = b[6];\r\n        var b13 = b[7];\r\n        var b20 = b[8];\r\n        var b21 = b[9];\r\n        var b22 = b[10];\r\n        var b23 = b[11];\r\n        var b30 = b[12];\r\n        var b31 = b[13];\r\n        var b32 = b[14];\r\n        var b33 = b[15];\r\n\r\n        return out.setValues(\r\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n            b01 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n            b02 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n            b03 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n\r\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n\r\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n\r\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Takes the rotation and position vectors and builds this Matrix4 from them.\r\n     *\r\n     * @method Phaser.Math.Matrix4#fromRotationXYTranslation\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} rotation - The rotation vector.\r\n     * @param {Phaser.Math.Vector3} position - The position vector.\r\n     * @param {boolean} translateFirst - Should the operation translate then rotate (`true`), or rotate then translate? (`false`)\r\n     *\r\n     * @return {this} This Matrix4.\r\n     */\r\n    fromRotationXYTranslation: function (rotation, position, translateFirst)\r\n    {\r\n        var x = position.x;\r\n        var y = position.y;\r\n        var z = position.z;\r\n\r\n        var sx = Math.sin(rotation.x);\r\n        var cx = Math.cos(rotation.x);\r\n\r\n        var sy = Math.sin(rotation.y);\r\n        var cy = Math.cos(rotation.y);\r\n\r\n        var a30 = x;\r\n        var a31 = y;\r\n        var a32 = z;\r\n\r\n        //  Rotate X\r\n\r\n        var b21 = -sx;\r\n\r\n        //  Rotate Y\r\n\r\n        var c01 = 0 - b21 * sy;\r\n\r\n        var c02 = 0 - cx * sy;\r\n\r\n        var c21 = b21 * cy;\r\n\r\n        var c22 = cx * cy;\r\n\r\n        //  Translate\r\n        if (!translateFirst)\r\n        {\r\n            // a30 = cy * x + 0 * y + sy * z;\r\n            a30 = cy * x + sy * z;\r\n            a31 = c01 * x + cx * y + c21 * z;\r\n            a32 = c02 * x + sx * y + c22 * z;\r\n        }\r\n\r\n        return this.setValues(\r\n            cy,\r\n            c01,\r\n            c02,\r\n            0,\r\n            0,\r\n            cx,\r\n            sx,\r\n            0,\r\n            sy,\r\n            c21,\r\n            c22,\r\n            0,\r\n            a30,\r\n            a31,\r\n            a32,\r\n            1\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Returns the maximum axis scale from this Matrix4.\r\n     *\r\n     * @method Phaser.Math.Matrix4#getMaxScaleOnAxis\r\n     * @since 3.50.0\r\n     *\r\n     * @return {number} The maximum axis scale.\r\n     */\r\n    getMaxScaleOnAxis: function ()\r\n    {\r\n        var m = this.val;\r\n\r\n        var scaleXSq = m[0] * m[0] + m[1] * m[1] + m[2] * m[2];\r\n        var scaleYSq = m[4] * m[4] + m[5] * m[5] + m[6] * m[6];\r\n        var scaleZSq = m[8] * m[8] + m[9] * m[9] + m[10] * m[10];\r\n\r\n        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * @ignore\r\n */\r\nvar _tempMat1 = new Matrix4();\r\n\r\n/**\r\n * @ignore\r\n */\r\nvar _tempMat2 = new Matrix4();\r\n\r\n/**\r\n * @ignore\r\n */\r\nvar _x = new Vector3();\r\n\r\n/**\r\n * @ignore\r\n */\r\nvar _y = new Vector3();\r\n\r\n/**\r\n * @ignore\r\n */\r\nvar _z = new Vector3();\r\n\r\nmodule.exports = Matrix4;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A representation of a vector in 3D space.\r\n *\r\n * A three-component vector.\r\n *\r\n * @class Vector3\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n */\r\nvar Vector3 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Vector3 (x, y, z)\r\n    {\r\n        /**\r\n         * The x component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector3#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = 0;\r\n\r\n        /**\r\n         * The y component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector3#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = 0;\r\n\r\n        /**\r\n         * The z component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector3#z\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.z = 0;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set this Vector to point up.\r\n     *\r\n     * Sets the y component of the vector to 1, and the others to 0.\r\n     *\r\n     * @method Phaser.Math.Vector3#up\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    up: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 1;\r\n        this.z = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the components of this Vector to be the `Math.min` result from the given vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#min\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to check the minimum values against.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    min: function (v)\r\n    {\r\n        this.x = Math.min(this.x, v.x);\r\n        this.y = Math.min(this.y, v.y);\r\n        this.z = Math.min(this.z, v.z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the components of this Vector to be the `Math.max` result from the given vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#max\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to check the maximum values against.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    max: function (v)\r\n    {\r\n        this.x = Math.max(this.x, v.x);\r\n        this.y = Math.max(this.y, v.y);\r\n        this.z = Math.max(this.z, v.z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Vector3.\r\n     *\r\n     * @method Phaser.Math.Vector3#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} A new Vector3 object containing this Vectors values.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    },\r\n\r\n    /**\r\n     * Adds the two given Vector3s and sets the results into this Vector3.\r\n     *\r\n     * @method Phaser.Math.Vector3#addVectors\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} a - The first Vector to add.\r\n     * @param {Phaser.Math.Vector3} b - The second Vector to add.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    addVectors: function (a, b)\r\n    {\r\n        this.x = a.x + b.x;\r\n        this.y = a.y + b.y;\r\n        this.z = a.z + b.z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the cross (vector) product of two given Vectors.\r\n     *\r\n     * @method Phaser.Math.Vector3#crossVectors\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} a - The first Vector to multiply.\r\n     * @param {Phaser.Math.Vector3} b - The second Vector to multiply.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    crossVectors: function (a, b)\r\n    {\r\n        var ax = a.x;\r\n        var ay = a.y;\r\n        var az = a.z;\r\n        var bx = b.x;\r\n        var by = b.y;\r\n        var bz = b.z;\r\n\r\n        this.x = ay * bz - az * by;\r\n        this.y = az * bx - ax * bz;\r\n        this.z = ax * by - ay * bx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check whether this Vector is equal to a given Vector.\r\n     *\r\n     * Performs a strict equality check against each Vector's components.\r\n     *\r\n     * @method Phaser.Math.Vector3#equals\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to compare against.\r\n     *\r\n     * @return {boolean} True if the two vectors strictly match, otherwise false.\r\n     */\r\n    equals: function (v)\r\n    {\r\n        return ((this.x === v.x) && (this.y === v.y) && (this.z === v.z));\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Vector into this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} src - The Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        this.x = src.x;\r\n        this.y = src.y;\r\n        this.z = src.z || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the `x`, `y`, and `z` components of this Vector to the given `x`, `y`, and `z` values.\r\n     *\r\n     * @method Phaser.Math.Vector3#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y and z components.\r\n     * @param {number} [y] - The y value to set for this Vector.\r\n     * @param {number} [z] - The z value to set for this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    set: function (x, y, z)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the components of this Vector3 from the position of the given Matrix4.\r\n     *\r\n     * @method Phaser.Math.Vector3#setFromMatrixPosition\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat4 - The Matrix4 to get the position from.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    setFromMatrixPosition: function (m)\r\n    {\r\n        return this.fromArray(m.val, 12);\r\n    },\r\n\r\n    /**\r\n     * Sets the components of this Vector3 from the Matrix4 column specified.\r\n     *\r\n     * @method Phaser.Math.Vector3#setFromMatrixColumn\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat4 - The Matrix4 to get the column from.\r\n     * @param {number} index - The column index.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    setFromMatrixColumn: function (mat4, index)\r\n    {\r\n        return this.fromArray(mat4.val, index * 4);\r\n    },\r\n\r\n    /**\r\n     * Sets the components of this Vector3 from the given array, based on the offset.\r\n     *\r\n     * Vector3.x = array[offset]\r\n     * Vector3.y = array[offset + 1]\r\n     * Vector3.z = array[offset + 2]\r\n     *\r\n     * @method Phaser.Math.Vector3#fromArray\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number[]} array - The array of values to get this Vector from.\r\n     * @param {number} [offset=0] - The offset index into the array.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    fromArray: function (array, offset)\r\n    {\r\n        if (offset === undefined) { offset = 0; }\r\n\r\n        this.x = array[offset];\r\n        this.y = array[offset + 1];\r\n        this.z = array[offset + 2];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a given Vector to this Vector. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector3#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to add to this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    add: function (v)\r\n    {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add the given value to each component of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#addScalar\r\n     * @since 3.50.0\r\n     *\r\n     * @param {number} s - The amount to add to this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    addScalar: function (s)\r\n    {\r\n        this.x += s;\r\n        this.y += s;\r\n        this.z += s;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add and scale a given Vector to this Vector. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector3#addScale\r\n     * @since 3.50.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to add to this Vector.\r\n     * @param {number} scale - The amount to scale `v` by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    addScale: function (v, scale)\r\n    {\r\n        this.x += v.x * scale;\r\n        this.y += v.y * scale;\r\n        this.z += v.z * scale || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector3#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to subtract from this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    subtract: function (v)\r\n    {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise multiplication between this Vector and the given Vector.\r\n     *\r\n     * Multiplies this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to multiply this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    multiply: function (v)\r\n    {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Vector by the given value.\r\n     *\r\n     * @method Phaser.Math.Vector3#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} scale - The value to scale this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    scale: function (scale)\r\n    {\r\n        if (isFinite(scale))\r\n        {\r\n            this.x *= scale;\r\n            this.y *= scale;\r\n            this.z *= scale;\r\n        }\r\n        else\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.z = 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise division between this Vector and the given Vector.\r\n     *\r\n     * Divides this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#divide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to divide this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    divide: function (v)\r\n    {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        this.z /= v.z || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Negate the `x`, `y` and `z` components of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#negate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    negate: function ()\r\n    {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#distance\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector.\r\n     */\r\n    distance: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n\r\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector, squared.\r\n     *\r\n     * @method Phaser.Math.Vector3#distanceSq\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector, squared.\r\n     */\r\n    distanceSq: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n\r\n        return dx * dx + dy * dy + dz * dz;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length (or magnitude) of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Vector squared.\r\n     *\r\n     * @method Phaser.Math.Vector3#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n\r\n        return x * x + y * y + z * z;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Vector.\r\n     *\r\n     * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n     *\r\n     * @method Phaser.Math.Vector3#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var len = x * x + y * y + z * z;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this.x = x * len;\r\n            this.y = y * len;\r\n            this.z = z * len;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to dot product with this Vector3.\r\n     *\r\n     * @return {number} The dot product of this Vector and `v`.\r\n     */\r\n    dot: function (v)\r\n    {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    },\r\n\r\n    /**\r\n     * Calculate the cross (vector) product of this Vector (which will be modified) and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#cross\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector to cross product with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    cross: function (v)\r\n    {\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var bx = v.x;\r\n        var by = v.y;\r\n        var bz = v.z;\r\n\r\n        this.x = ay * bz - az * by;\r\n        this.y = az * bx - ax * bz;\r\n        this.z = ax * by - ay * bx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate between this Vector and the given Vector.\r\n     *\r\n     * Interpolates this Vector towards the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to interpolate towards.\r\n     * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    lerp: function (v, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n\r\n        this.x = ax + t * (v.x - ax);\r\n        this.y = ay + t * (v.y - ay);\r\n        this.z = az + t * (v.z - az);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes a Matrix3 and applies it to this Vector3.\r\n     *\r\n     * @method Phaser.Math.Vector3#applyMatrix3\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} mat3 - The Matrix3 to apply to this Vector3.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    applyMatrix3: function (mat3)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat3.val;\r\n\r\n        this.x = m[0] * x + m[3] * y + m[6] * z;\r\n        this.y = m[1] * x + m[4] * y + m[7] * z;\r\n        this.z = m[2] * x + m[5] * y + m[8] * z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes a Matrix4 and applies it to this Vector3.\r\n     *\r\n     * @method Phaser.Math.Vector3#applyMatrix4\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat4 - The Matrix4 to apply to this Vector3.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    applyMatrix4: function (mat4)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat4.val;\r\n\r\n        var w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);\r\n\r\n        this.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\r\n        this.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\r\n        this.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformMat3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} mat - The Matrix3 to transform this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformMat3: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        this.x = x * m[0] + y * m[3] + z * m[6];\r\n        this.y = x * m[1] + y * m[4] + z * m[7];\r\n        this.z = x * m[2] + y * m[5] + z * m[8];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix4.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformMat4: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        this.x = m[0] * x + m[4] * y + m[8] * z + m[12];\r\n        this.y = m[1] * x + m[5] * y + m[9] * z + m[13];\r\n        this.z = m[2] * x + m[6] * y + m[10] * z + m[14];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transforms the coordinates of this Vector3 with the given Matrix4.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformCoordinates\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformCoordinates: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        var tx = (x * m[0]) + (y * m[4]) + (z * m[8]) + m[12];\r\n        var ty = (x * m[1]) + (y * m[5]) + (z * m[9]) + m[13];\r\n        var tz = (x * m[2]) + (y * m[6]) + (z * m[10]) + m[14];\r\n        var tw = (x * m[3]) + (y * m[7]) + (z * m[11]) + m[15];\r\n\r\n        this.x = tx / tw;\r\n        this.y = ty / tw;\r\n        this.z = tz / tw;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Quaternion.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformQuat\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformQuat: function (q)\r\n    {\r\n        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var qx = q.x;\r\n        var qy = q.y;\r\n        var qz = q.z;\r\n        var qw = q.w;\r\n\r\n        // calculate quat * vec\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse quat\r\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiplies this Vector3 by the specified matrix, applying a W divide. This is useful for projection,\r\n     * e.g. unprojecting a 2D point into 3D space.\r\n     *\r\n     * @method Phaser.Math.Vector3#project\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to multiply this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    project: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        var a00 = m[0];\r\n        var a01 = m[1];\r\n        var a02 = m[2];\r\n        var a03 = m[3];\r\n        var a10 = m[4];\r\n        var a11 = m[5];\r\n        var a12 = m[6];\r\n        var a13 = m[7];\r\n        var a20 = m[8];\r\n        var a21 = m[9];\r\n        var a22 = m[10];\r\n        var a23 = m[11];\r\n        var a30 = m[12];\r\n        var a31 = m[13];\r\n        var a32 = m[14];\r\n        var a33 = m[15];\r\n\r\n        var lw = 1 / (x * a03 + y * a13 + z * a23 + a33);\r\n\r\n        this.x = (x * a00 + y * a10 + z * a20 + a30) * lw;\r\n        this.y = (x * a01 + y * a11 + z * a21 + a31) * lw;\r\n        this.z = (x * a02 + y * a12 + z * a22 + a32) * lw;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiplies this Vector3 by the given view and projection matrices.\r\n     *\r\n     * @method Phaser.Math.Vector3#projectViewMatrix\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} viewMatrix - A View Matrix.\r\n     * @param {Phaser.Math.Matrix4} projectionMatrix - A Projection Matrix.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    projectViewMatrix: function (viewMatrix, projectionMatrix)\r\n    {\r\n        return this.applyMatrix4(viewMatrix).applyMatrix4(projectionMatrix);\r\n    },\r\n\r\n    /**\r\n     * Multiplies this Vector3 by the given inversed projection matrix and world matrix.\r\n     *\r\n     * @method Phaser.Math.Vector3#unprojectViewMatrix\r\n     * @since 3.50.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} projectionMatrix - An inversed Projection Matrix.\r\n     * @param {Phaser.Math.Matrix4} worldMatrix - A World View Matrix.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    unprojectViewMatrix: function (projectionMatrix, worldMatrix)\r\n    {\r\n        return this.applyMatrix4(projectionMatrix).applyMatrix4(worldMatrix);\r\n    },\r\n\r\n    /**\r\n     * Unproject this point from 2D space to 3D space.\r\n     * The point should have its x and y properties set to\r\n     * 2D screen space, and the z either at 0 (near plane)\r\n     * or 1 (far plane). The provided matrix is assumed to already\r\n     * be combined, i.e. projection * view * model.\r\n     *\r\n     * After this operation, this vector's (x, y, z) components will\r\n     * represent the unprojected 3D coordinate.\r\n     *\r\n     * @method Phaser.Math.Vector3#unproject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} viewport - Screen x, y, width and height in pixels.\r\n     * @param {Phaser.Math.Matrix4} invProjectionView - Combined projection and view matrix.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    unproject: function (viewport, invProjectionView)\r\n    {\r\n        var viewX = viewport.x;\r\n        var viewY = viewport.y;\r\n        var viewWidth = viewport.z;\r\n        var viewHeight = viewport.w;\r\n\r\n        var x = this.x - viewX;\r\n        var y = (viewHeight - this.y - 1) - viewY;\r\n        var z = this.z;\r\n\r\n        this.x = (2 * x) / viewWidth - 1;\r\n        this.y = (2 * y) / viewHeight - 1;\r\n        this.z = 2 * z - 1;\r\n\r\n        return this.project(invProjectionView);\r\n    },\r\n\r\n    /**\r\n     * Make this Vector the zero vector (0, 0, 0).\r\n     *\r\n     * @method Phaser.Math.Vector3#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * A static zero Vector3 for use by reference.\r\n *\r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.ZERO\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.ZERO = new Vector3();\r\n\r\n/**\r\n * A static right Vector3 for use by reference.\r\n *\r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.RIGHT\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.RIGHT = new Vector3(1, 0, 0);\r\n\r\n/**\r\n * A static left Vector3 for use by reference.\r\n *\r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.LEFT\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.LEFT = new Vector3(-1, 0, 0);\r\n\r\n/**\r\n * A static up Vector3 for use by reference.\r\n *\r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.UP\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.UP = new Vector3(0, -1, 0);\r\n\r\n/**\r\n * A static down Vector3 for use by reference.\r\n *\r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.DOWN\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.DOWN = new Vector3(0, 1, 0);\r\n\r\n/**\r\n * A static forward Vector3 for use by reference.\r\n *\r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.FORWARD\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.FORWARD = new Vector3(0, 0, 1);\r\n\r\n/**\r\n * A static back Vector3 for use by reference.\r\n *\r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.BACK\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.BACK = new Vector3(0, 0, -1);\r\n\r\n/**\r\n * A static one Vector3 for use by reference.\r\n *\r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.ONE\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.ONE = new Vector3(1, 1, 1);\r\n\r\nmodule.exports = Vector3;\r\n"],"names":["Class","Vector3","EPSILON","Matrix4","initialize","m","this","val","Float32Array","copy","identity","clone","set","src","setValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","out","a","fromArray","zero","transform","position","scale","rotation","rm","_tempMat1","fromQuat","sx","x","sy","y","sz","z","xyz","scaling","transpose","a01","a02","a03","a12","a13","a23","getInverse","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","multiplyLocal","premultiply","multiplyMatrices","am","bm","a14","a24","a34","a41","a42","a43","a44","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","translate","v","translateXYZ","scaleXYZ","makeRotationAxis","axis","angle","c","Math","cos","s","sin","t","tx","ty","rotate","rad","len","sqrt","abs","b20","rotateX","rotateY","rotateZ","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","perspectiveLH","width","height","ortho","lr","bt","lookAtRH","eye","target","up","_z","subVectors","getLengthSquared","normalize","_x","crossVectors","_y","lookAt","center","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","z0","z1","x0","x1","y0","y1","yawPitchRoll","yaw","pitch","roll","_tempMat2","m0","m1","m2","setWorldMatrix","viewMatrix","projectionMatrix","multiplyToMat4","b30","fromRotationXYTranslation","translateFirst","cx","cy","c01","c02","c21","c22","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","max","module","exports","min","addVectors","ax","ay","az","bx","by","bz","equals","setFromMatrixPosition","setFromMatrixColumn","mat4","index","array","offset","undefined","add","addScalar","addScale","subtract","isFinite","divide","negate","distance","dx","dy","dz","distanceSq","length","lengthSq","dot","cross","lerp","applyMatrix3","mat3","applyMatrix4","transformMat3","mat","transformMat4","transformCoordinates","tz","tw","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","project","lw","projectViewMatrix","unprojectViewMatrix","worldMatrix","unproject","viewport","invProjectionView","viewX","viewY","viewWidth","viewHeight","reset","ZERO","RIGHT","LEFT","UP","DOWN","FORWARD","BACK","ONE"],"sourceRoot":""}