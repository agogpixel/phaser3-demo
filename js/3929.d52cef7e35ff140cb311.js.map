{"version":3,"file":"js/3929.d52cef7e35ff140cb311.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/cameras/2d/BaseCamera.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/HexStringToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/IntegerToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/IntegerToRGB.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/ObjectToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/RGBStringToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/ValueToColor.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar DegToRad = require('../../math/DegToRad');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar TransformMatrix = require('../../gameobjects/components/TransformMatrix');\r\nvar ValueToColor = require('../../display/color/ValueToColor');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Base Camera class.\r\n *\r\n * The Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\r\n * and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis.\r\n *\r\n * The Base Camera is extended by the Camera class, which adds in special effects including Fade,\r\n * Flash and Camera Shake, as well as the ability to follow Game Objects.\r\n *\r\n * The Base Camera was introduced in Phaser 3.12. It was split off from the Camera class, to allow\r\n * you to isolate special effects as needed. Therefore the 'since' values for properties of this class relate\r\n * to when they were added to the Camera class.\r\n *\r\n * @class BaseCamera\r\n * @memberof Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.12.0\r\n *\r\n * @extends Phaser.Events.EventEmitter\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {number} x - The x position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} y - The y position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} width - The width of the Camera, in pixels.\r\n * @param {number} height - The height of the Camera, in pixels.\r\n */\r\nvar BaseCamera = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.Visible\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function BaseCamera (x, y, width, height)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 0; }\r\n        if (height === undefined) { height = 0; }\r\n\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Scene this camera belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene;\r\n\r\n        /**\r\n         * A reference to the Game Scene Manager.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#sceneManager\r\n         * @type {Phaser.Scenes.SceneManager}\r\n         * @since 3.12.0\r\n         */\r\n        this.sceneManager;\r\n\r\n        /**\r\n         * A reference to the Game Scale Manager.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#scaleManager\r\n         * @type {Phaser.Scale.ScaleManager}\r\n         * @since 3.16.0\r\n         */\r\n        this.scaleManager;\r\n\r\n        /**\r\n         * A reference to the Scene's Camera Manager to which this Camera belongs.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#cameraManager\r\n         * @type {Phaser.Cameras.Scene2D.CameraManager}\r\n         * @since 3.17.0\r\n         */\r\n        this.cameraManager;\r\n\r\n        /**\r\n         * The Camera ID. Assigned by the Camera Manager and used to handle camera exclusion.\r\n         * This value is a bitmask.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#id\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.id = 0;\r\n\r\n        /**\r\n         * The name of the Camera. This is left empty for your own use.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * Should this camera round its pixel values to integers?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#roundPixels\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.roundPixels = false;\r\n\r\n        /**\r\n         * Is this Camera visible or not?\r\n         *\r\n         * A visible camera will render and perform input tests.\r\n         * An invisible camera will not render anything and will skip input tests.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#visible\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.10.0\r\n         */\r\n\r\n        /**\r\n         * Is this Camera using a bounds to restrict scrolling movement?\r\n         *\r\n         * Set this property along with the bounds via `Camera.setBounds`.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#useBounds\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.useBounds = false;\r\n\r\n        /**\r\n         * The World View is a Rectangle that defines the area of the 'world' the Camera is currently looking at.\r\n         * This factors in the Camera viewport size, zoom and scroll position and is updated in the Camera preRender step.\r\n         * If you have enabled Camera bounds the worldview will be clamped to those bounds accordingly.\r\n         * You can use it for culling or intersection checks.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#worldView\r\n         * @type {Phaser.Geom.Rectangle}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.worldView = new Rectangle();\r\n\r\n        /**\r\n         * Is this Camera dirty?\r\n         *\r\n         * A dirty Camera has had either its viewport size, bounds, scroll, rotation or zoom levels changed since the last frame.\r\n         *\r\n         * This flag is cleared during the `postRenderCamera` method of the renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#dirty\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.11.0\r\n         */\r\n        this.dirty = true;\r\n\r\n        /**\r\n         * The x position of the Camera viewport, relative to the top-left of the game canvas.\r\n         * The viewport is the area into which the camera renders.\r\n         * To adjust the position the camera is looking at in the game world, see the `scrollX` value.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_x\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._x = x;\r\n\r\n        /**\r\n         * The y position of the Camera, relative to the top-left of the game canvas.\r\n         * The viewport is the area into which the camera renders.\r\n         * To adjust the position the camera is looking at in the game world, see the `scrollY` value.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_y\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._y = y;\r\n\r\n        /**\r\n         * The width of the Camera viewport, in pixels.\r\n         *\r\n         * The viewport is the area into which the Camera renders. Setting the viewport does\r\n         * not restrict where the Camera can scroll to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_width\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._width = width;\r\n\r\n        /**\r\n         * The height of the Camera viewport, in pixels.\r\n         *\r\n         * The viewport is the area into which the Camera renders. Setting the viewport does\r\n         * not restrict where the Camera can scroll to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_height\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._height = height;\r\n\r\n        /**\r\n         * The bounds the camera is restrained to during scrolling.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_bounds\r\n         * @type {Phaser.Geom.Rectangle}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._bounds = new Rectangle();\r\n\r\n        /**\r\n         * The horizontal scroll position of this Camera.\r\n         *\r\n         * Change this value to cause the Camera to scroll around your Scene.\r\n         *\r\n         * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\r\n         * will automatically adjust the Camera scroll values accordingly.\r\n         *\r\n         * You can set the bounds within which the Camera can scroll via the `setBounds` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_scrollX\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this._scrollX = 0;\r\n\r\n        /**\r\n         * The vertical scroll position of this Camera.\r\n         *\r\n         * Change this value to cause the Camera to scroll around your Scene.\r\n         *\r\n         * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\r\n         * will automatically adjust the Camera scroll values accordingly.\r\n         *\r\n         * You can set the bounds within which the Camera can scroll via the `setBounds` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_scrollY\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this._scrollY = 0;\r\n\r\n        /**\r\n         * The Camera horizontal zoom value. Change this value to zoom in, or out of, a Scene.\r\n         *\r\n         * A value of 0.5 would zoom the Camera out, so you can now see twice as much\r\n         * of the Scene as before. A value of 2 would zoom the Camera in, so every pixel\r\n         * now takes up 2 pixels when rendered.\r\n         *\r\n         * Set to 1 to return to the default zoom level.\r\n         *\r\n         * Be careful to never set this value to zero.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_zoomX\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.50.0\r\n         */\r\n        this._zoomX = 1;\r\n\r\n        /**\r\n         * The Camera vertical zoom value. Change this value to zoom in, or out of, a Scene.\r\n         *\r\n         * A value of 0.5 would zoom the Camera out, so you can now see twice as much\r\n         * of the Scene as before. A value of 2 would zoom the Camera in, so every pixel\r\n         * now takes up 2 pixels when rendered.\r\n         *\r\n         * Set to 1 to return to the default zoom level.\r\n         *\r\n         * Be careful to never set this value to zero.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_zoomY\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.50.0\r\n         */\r\n        this._zoomY = 1;\r\n\r\n        /**\r\n         * The rotation of the Camera in radians.\r\n         *\r\n         * Camera rotation always takes place based on the Camera viewport. By default, rotation happens\r\n         * in the center of the viewport. You can adjust this with the `originX` and `originY` properties.\r\n         *\r\n         * Rotation influences the rendering of _all_ Game Objects visible by this Camera. However, it does not\r\n         * rotate the Camera viewport itself, which always remains an axis-aligned rectangle.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_rotation\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this._rotation = 0;\r\n\r\n        /**\r\n         * A local transform matrix used for internal calculations.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#matrix\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.matrix = new TransformMatrix();\r\n\r\n        /**\r\n         * Does this Camera have a transparent background?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#transparent\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.transparent = true;\r\n\r\n        /**\r\n         * The background color of this Camera. Only used if `transparent` is `false`.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#backgroundColor\r\n         * @type {Phaser.Display.Color}\r\n         * @since 3.0.0\r\n         */\r\n        this.backgroundColor = ValueToColor('rgba(0,0,0,0)');\r\n\r\n        /**\r\n         * The Camera alpha value. Setting this property impacts every single object that this Camera\r\n         * renders. You can either set the property directly, i.e. via a Tween, to fade a Camera in or out,\r\n         * or via the chainable `setAlpha` method instead.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#alpha\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n\r\n        /**\r\n         * Should the camera cull Game Objects before checking them for input hit tests?\r\n         * In some special cases it may be beneficial to disable this.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#disableCull\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.disableCull = false;\r\n\r\n        /**\r\n         * A temporary array of culled objects.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#culledObjects\r\n         * @type {Phaser.GameObjects.GameObject[]}\r\n         * @default []\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.culledObjects = [];\r\n\r\n        /**\r\n         * The mid-point of the Camera in 'world' coordinates.\r\n         *\r\n         * Use it to obtain exactly where in the world the center of the camera is currently looking.\r\n         *\r\n         * This value is updated in the preRender method, after the scroll values and follower\r\n         * have been processed.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#midPoint\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.midPoint = new Vector2(width / 2, height / 2);\r\n\r\n        /**\r\n         * The horizontal origin of rotation for this Camera.\r\n         *\r\n         * By default the camera rotates around the center of the viewport.\r\n         *\r\n         * Changing the origin allows you to adjust the point in the viewport from which rotation happens.\r\n         * A value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\r\n         *\r\n         * See `setOrigin` to set both origins in a single, chainable call.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#originX\r\n         * @type {number}\r\n         * @default 0.5\r\n         * @since 3.11.0\r\n         */\r\n        this.originX = 0.5;\r\n\r\n        /**\r\n         * The vertical origin of rotation for this Camera.\r\n         *\r\n         * By default the camera rotates around the center of the viewport.\r\n         *\r\n         * Changing the origin allows you to adjust the point in the viewport from which rotation happens.\r\n         * A value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\r\n         *\r\n         * See `setOrigin` to set both origins in a single, chainable call.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#originY\r\n         * @type {number}\r\n         * @default 0.5\r\n         * @since 3.11.0\r\n         */\r\n        this.originY = 0.5;\r\n\r\n        /**\r\n         * Does this Camera have a custom viewport?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_customViewport\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.12.0\r\n         */\r\n        this._customViewport = false;\r\n\r\n        /**\r\n         * The Mask this Camera is using during render.\r\n         * Set the mask using the `setMask` method. Remove the mask using the `clearMask` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#mask\r\n         * @type {?(Phaser.Display.Masks.BitmapMask|Phaser.Display.Masks.GeometryMask)}\r\n         * @since 3.17.0\r\n         */\r\n        this.mask = null;\r\n\r\n        /**\r\n         * The Camera that this Camera uses for translation during masking.\r\n         *\r\n         * If the mask is fixed in position this will be a reference to\r\n         * the CameraManager.default instance. Otherwise, it'll be a reference\r\n         * to itself.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#_maskCamera\r\n         * @type {?Phaser.Cameras.Scene2D.BaseCamera}\r\n         * @private\r\n         * @since 3.17.0\r\n         */\r\n        this._maskCamera = null;\r\n\r\n        /**\r\n         * This array is populated with all of the Game Objects that this Camera has rendered\r\n         * in the previous (or current, depending on when you inspect it) frame.\r\n         *\r\n         * It is cleared at the start of `Camera.preUpdate`, or if the Camera is destroyed.\r\n         *\r\n         * You should not modify this array as it is used internally by the input system,\r\n         * however you can read it as required. Note that Game Objects may appear in this\r\n         * list multiple times if they belong to multiple non-exclusive Containers.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.BaseCamera#renderList\r\n         * @type {Phaser.GameObjects.GameObject[]}\r\n         * @since 3.52.0\r\n         */\r\n        this.renderList = [];\r\n    },\r\n\r\n    /**\r\n     * Adds the given Game Object to this cameras render list.\r\n     *\r\n     * This is invoked during the rendering stage. Only objects that are actually rendered\r\n     * will appear in the render list.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#addToRenderList\r\n     * @since 3.52.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object to add to the render list.\r\n     */\r\n    addToRenderList: function (child)\r\n    {\r\n        this.renderList.push(child);\r\n    },\r\n\r\n    /**\r\n     * Set the Alpha level of this Camera. The alpha controls the opacity of the Camera as it renders.\r\n     * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setAlpha\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} [value=1] - The Camera alpha value.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n\r\n    /**\r\n     * Sets the rotation origin of this Camera.\r\n     *\r\n     * The values are given in the range 0 to 1 and are only used when calculating Camera rotation.\r\n     *\r\n     * By default the camera rotates around the center of the viewport.\r\n     *\r\n     * Changing the origin allows you to adjust the point in the viewport from which rotation happens.\r\n     * A value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setOrigin\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} [x=0.5] - The horizontal origin value.\r\n     * @param {number} [y=x] - The vertical origin value. If not defined it will be set to the value of `x`.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setOrigin: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0.5; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.originX = x;\r\n        this.originY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates what the Camera.scrollX and scrollY values would need to be in order to move\r\n     * the Camera so it is centered on the given x and y coordinates, without actually moving\r\n     * the Camera there. The results are clamped based on the Camera bounds, if set.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#getScroll\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The horizontal coordinate to center on.\r\n     * @param {number} y - The vertical coordinate to center on.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 to store the values in. If not given a new Vector2 is created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The scroll coordinates stored in the `x` and `y` properties.\r\n     */\r\n    getScroll: function (x, y, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var originX = this.width * 0.5;\r\n        var originY = this.height * 0.5;\r\n\r\n        out.x = x - originX;\r\n        out.y = y - originY;\r\n\r\n        if (this.useBounds)\r\n        {\r\n            out.x = this.clampX(out.x);\r\n            out.y = this.clampY(out.y);\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Moves the Camera horizontally so that it is centered on the given x coordinate, bounds allowing.\r\n     * Calling this does not change the scrollY value.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#centerOnX\r\n     * @since 3.16.0\r\n     *\r\n     * @param {number} x - The horizontal coordinate to center on.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    centerOnX: function (x)\r\n    {\r\n        var originX = this.width * 0.5;\r\n\r\n        this.midPoint.x = x;\r\n\r\n        this.scrollX = x - originX;\r\n\r\n        if (this.useBounds)\r\n        {\r\n            this.scrollX = this.clampX(this.scrollX);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Moves the Camera vertically so that it is centered on the given y coordinate, bounds allowing.\r\n     * Calling this does not change the scrollX value.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#centerOnY\r\n     * @since 3.16.0\r\n     *\r\n     * @param {number} y - The vertical coordinate to center on.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    centerOnY: function (y)\r\n    {\r\n        var originY = this.height * 0.5;\r\n\r\n        this.midPoint.y = y;\r\n\r\n        this.scrollY = y - originY;\r\n\r\n        if (this.useBounds)\r\n        {\r\n            this.scrollY = this.clampY(this.scrollY);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Moves the Camera so that it is centered on the given coordinates, bounds allowing.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#centerOn\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The horizontal coordinate to center on.\r\n     * @param {number} y - The vertical coordinate to center on.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    centerOn: function (x, y)\r\n    {\r\n        this.centerOnX(x);\r\n        this.centerOnY(y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Moves the Camera so that it is looking at the center of the Camera Bounds, if enabled.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#centerToBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    centerToBounds: function ()\r\n    {\r\n        if (this.useBounds)\r\n        {\r\n            var bounds = this._bounds;\r\n            var originX = this.width * 0.5;\r\n            var originY = this.height * 0.5;\r\n\r\n            this.midPoint.set(bounds.centerX, bounds.centerY);\r\n\r\n            this.scrollX = bounds.centerX - originX;\r\n            this.scrollY = bounds.centerY - originY;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Moves the Camera so that it is re-centered based on its viewport size.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#centerToSize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    centerToSize: function ()\r\n    {\r\n        this.scrollX = this.width * 0.5;\r\n        this.scrollY = this.height * 0.5;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes an array of Game Objects and returns a new array featuring only those objects\r\n     * visible by this camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.GameObjects.GameObject[]} G - [renderableObjects,$return]\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject[]} renderableObjects - An array of Game Objects to cull.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject[]} An array of Game Objects visible to this Camera.\r\n     */\r\n    cull: function (renderableObjects)\r\n    {\r\n        if (this.disableCull)\r\n        {\r\n            return renderableObjects;\r\n        }\r\n\r\n        var cameraMatrix = this.matrix.matrix;\r\n\r\n        var mva = cameraMatrix[0];\r\n        var mvb = cameraMatrix[1];\r\n        var mvc = cameraMatrix[2];\r\n        var mvd = cameraMatrix[3];\r\n\r\n        /* First Invert Matrix */\r\n        var determinant = (mva * mvd) - (mvb * mvc);\r\n\r\n        if (!determinant)\r\n        {\r\n            return renderableObjects;\r\n        }\r\n\r\n        var mve = cameraMatrix[4];\r\n        var mvf = cameraMatrix[5];\r\n\r\n        var scrollX = this.scrollX;\r\n        var scrollY = this.scrollY;\r\n        var cameraW = this.width;\r\n        var cameraH = this.height;\r\n        var cullTop = this.y;\r\n        var cullBottom = cullTop + cameraH;\r\n        var cullLeft = this.x;\r\n        var cullRight = cullLeft + cameraW;\r\n        var culledObjects = this.culledObjects;\r\n        var length = renderableObjects.length;\r\n\r\n        determinant = 1 / determinant;\r\n\r\n        culledObjects.length = 0;\r\n\r\n        for (var index = 0; index < length; ++index)\r\n        {\r\n            var object = renderableObjects[index];\r\n\r\n            if (!object.hasOwnProperty('width') || object.parentContainer)\r\n            {\r\n                culledObjects.push(object);\r\n                continue;\r\n            }\r\n\r\n            var objectW = object.width;\r\n            var objectH = object.height;\r\n            var objectX = (object.x - (scrollX * object.scrollFactorX)) - (objectW * object.originX);\r\n            var objectY = (object.y - (scrollY * object.scrollFactorY)) - (objectH * object.originY);\r\n            var tx = (objectX * mva + objectY * mvc + mve);\r\n            var ty = (objectX * mvb + objectY * mvd + mvf);\r\n            var tw = ((objectX + objectW) * mva + (objectY + objectH) * mvc + mve);\r\n            var th = ((objectX + objectW) * mvb + (objectY + objectH) * mvd + mvf);\r\n\r\n            if ((tw > cullLeft && tx < cullRight) && (th > cullTop && ty < cullBottom))\r\n            {\r\n                culledObjects.push(object);\r\n            }\r\n        }\r\n\r\n        return culledObjects;\r\n    },\r\n\r\n    /**\r\n     * Converts the given `x` and `y` coordinates into World space, based on this Cameras transform.\r\n     * You can optionally provide a Vector2, or similar object, to store the results in.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#getWorldPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [output,$return]\r\n     *\r\n     * @param {number} x - The x position to convert to world space.\r\n     * @param {number} y - The y position to convert to world space.\r\n     * @param {(object|Phaser.Math.Vector2)} [output] - An optional object to store the results in. If not provided a new Vector2 will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} An object holding the converted values in its `x` and `y` properties.\r\n     */\r\n    getWorldPoint: function (x, y, output)\r\n    {\r\n        if (output === undefined) { output = new Vector2(); }\r\n\r\n        var cameraMatrix = this.matrix.matrix;\r\n\r\n        var mva = cameraMatrix[0];\r\n        var mvb = cameraMatrix[1];\r\n        var mvc = cameraMatrix[2];\r\n        var mvd = cameraMatrix[3];\r\n        var mve = cameraMatrix[4];\r\n        var mvf = cameraMatrix[5];\r\n\r\n        //  Invert Matrix\r\n        var determinant = (mva * mvd) - (mvb * mvc);\r\n\r\n        if (!determinant)\r\n        {\r\n            output.x = x;\r\n            output.y = y;\r\n\r\n            return output;\r\n        }\r\n\r\n        determinant = 1 / determinant;\r\n\r\n        var ima = mvd * determinant;\r\n        var imb = -mvb * determinant;\r\n        var imc = -mvc * determinant;\r\n        var imd = mva * determinant;\r\n        var ime = (mvc * mvf - mvd * mve) * determinant;\r\n        var imf = (mvb * mve - mva * mvf) * determinant;\r\n\r\n        var c = Math.cos(this.rotation);\r\n        var s = Math.sin(this.rotation);\r\n\r\n        var zoomX = this.zoomX;\r\n        var zoomY = this.zoomY;\r\n\r\n        var scrollX = this.scrollX;\r\n        var scrollY = this.scrollY;\r\n\r\n        var sx = x + ((scrollX * c - scrollY * s) * zoomX);\r\n        var sy = y + ((scrollX * s + scrollY * c) * zoomY);\r\n\r\n        //  Apply transform to point\r\n        output.x = (sx * ima + sy * imc) + ime;\r\n        output.y = (sx * imb + sy * imd) + imf;\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Given a Game Object, or an array of Game Objects, it will update all of their camera filter settings\r\n     * so that they are ignored by this Camera. This means they will not be rendered by this Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#ignore\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group)} entries - The Game Object, or array of Game Objects, to be ignored by this Camera.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    ignore: function (entries)\r\n    {\r\n        var id = this.id;\r\n\r\n        if (!Array.isArray(entries))\r\n        {\r\n            entries = [ entries ];\r\n        }\r\n\r\n        for (var i = 0; i < entries.length; i++)\r\n        {\r\n            var entry = entries[i];\r\n\r\n            if (Array.isArray(entry))\r\n            {\r\n                this.ignore(entry);\r\n            }\r\n            else if (entry.isParent)\r\n            {\r\n                this.ignore(entry.getChildren());\r\n            }\r\n            else\r\n            {\r\n                entry.cameraFilter |= id;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal preRender step.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#preRender\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    preRender: function ()\r\n    {\r\n        this.renderList.length = 0;\r\n\r\n        var width = this.width;\r\n        var height = this.height;\r\n\r\n        var halfWidth = width * 0.5;\r\n        var halfHeight = height * 0.5;\r\n\r\n        var zoomX = this.zoomX;\r\n        var zoomY = this.zoomY;\r\n        var matrix = this.matrix;\r\n\r\n        var originX = width * this.originX;\r\n        var originY = height * this.originY;\r\n\r\n        var sx = this.scrollX;\r\n        var sy = this.scrollY;\r\n\r\n        if (this.useBounds)\r\n        {\r\n            sx = this.clampX(sx);\r\n            sy = this.clampY(sy);\r\n        }\r\n\r\n        if (this.roundPixels)\r\n        {\r\n            originX = Math.round(originX);\r\n            originY = Math.round(originY);\r\n        }\r\n\r\n        //  Values are in pixels and not impacted by zooming the Camera\r\n        this.scrollX = sx;\r\n        this.scrollY = sy;\r\n\r\n        var midX = sx + halfWidth;\r\n        var midY = sy + halfHeight;\r\n\r\n        //  The center of the camera, in world space, so taking zoom into account\r\n        //  Basically the pixel value of what it's looking at in the middle of the cam\r\n        this.midPoint.set(midX, midY);\r\n\r\n        var displayWidth = width / zoomX;\r\n        var displayHeight = height / zoomY;\r\n\r\n        this.worldView.setTo(\r\n            midX - (displayWidth / 2),\r\n            midY - (displayHeight / 2),\r\n            displayWidth,\r\n            displayHeight\r\n        );\r\n\r\n        matrix.applyITRS(this.x + originX, this.y + originY, this.rotation, zoomX, zoomY);\r\n        matrix.translate(-originX, -originY);\r\n    },\r\n\r\n    /**\r\n     * Takes an x value and checks it's within the range of the Camera bounds, adjusting if required.\r\n     * Do not call this method if you are not using camera bounds.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#clampX\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The value to horizontally scroll clamp.\r\n     *\r\n     * @return {number} The adjusted value to use as scrollX.\r\n     */\r\n    clampX: function (x)\r\n    {\r\n        var bounds = this._bounds;\r\n\r\n        var dw = this.displayWidth;\r\n\r\n        var bx = bounds.x + ((dw - this.width) / 2);\r\n        var bw = Math.max(bx, bx + bounds.width - dw);\r\n\r\n        if (x < bx)\r\n        {\r\n            x = bx;\r\n        }\r\n        else if (x > bw)\r\n        {\r\n            x = bw;\r\n        }\r\n\r\n        return x;\r\n    },\r\n\r\n    /**\r\n     * Takes a y value and checks it's within the range of the Camera bounds, adjusting if required.\r\n     * Do not call this method if you are not using camera bounds.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#clampY\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} y - The value to vertically scroll clamp.\r\n     *\r\n     * @return {number} The adjusted value to use as scrollY.\r\n     */\r\n    clampY: function (y)\r\n    {\r\n        var bounds = this._bounds;\r\n\r\n        var dh = this.displayHeight;\r\n\r\n        var by = bounds.y + ((dh - this.height) / 2);\r\n        var bh = Math.max(by, by + bounds.height - dh);\r\n\r\n        if (y < by)\r\n        {\r\n            y = by;\r\n        }\r\n        else if (y > bh)\r\n        {\r\n            y = bh;\r\n        }\r\n\r\n        return y;\r\n    },\r\n\r\n    /*\r\n        var gap = this._zoomInversed;\r\n        return gap * Math.round((src.x - this.scrollX * src.scrollFactorX) / gap);\r\n    */\r\n\r\n    /**\r\n     * If this Camera has previously had movement bounds set on it, this will remove them.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#removeBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    removeBounds: function ()\r\n    {\r\n        this.useBounds = false;\r\n\r\n        this.dirty = true;\r\n\r\n        this._bounds.setEmpty();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the rotation of this Camera. This causes everything it renders to appear rotated.\r\n     *\r\n     * Rotating a camera does not rotate the viewport itself, it is applied during rendering.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=0] - The cameras angle of rotation, given in degrees.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setAngle: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this.rotation = DegToRad(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the background color for this Camera.\r\n     *\r\n     * By default a Camera has a transparent background but it can be given a solid color, with any level\r\n     * of transparency, via this method.\r\n     *\r\n     * The color value can be specified using CSS color notation, hex or numbers.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setBackgroundColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|number|Phaser.Types.Display.InputColorObject)} [color='rgba(0,0,0,0)'] - The color value. In CSS, hex or numeric color notation.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setBackgroundColor: function (color)\r\n    {\r\n        if (color === undefined) { color = 'rgba(0,0,0,0)'; }\r\n\r\n        this.backgroundColor = ValueToColor(color);\r\n\r\n        this.transparent = (this.backgroundColor.alpha === 0);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the bounds of the Camera. The bounds are an axis-aligned rectangle.\r\n     *\r\n     * The Camera bounds controls where the Camera can scroll to, stopping it from scrolling off the\r\n     * edges and into blank space. It does not limit the placement of Game Objects, or where\r\n     * the Camera viewport can be positioned.\r\n     *\r\n     * Temporarily disable the bounds by changing the boolean `Camera.useBounds`.\r\n     *\r\n     * Clear the bounds entirely by calling `Camera.removeBounds`.\r\n     *\r\n     * If you set bounds that are smaller than the viewport it will stop the Camera from being\r\n     * able to scroll. The bounds can be positioned where-ever you wish. By default they are from\r\n     * 0x0 to the canvas width x height. This means that the coordinate 0x0 is the top left of\r\n     * the Camera bounds. However, you can position them anywhere. So if you wanted a game world\r\n     * that was 2048x2048 in size, with 0x0 being the center of it, you can set the bounds x/y\r\n     * to be -1024, -1024, with a width and height of 2048. Depending on your game you may find\r\n     * it easier for 0x0 to be the top-left of the bounds, or you may wish 0x0 to be the middle.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The top-left x coordinate of the bounds.\r\n     * @param {number} y - The top-left y coordinate of the bounds.\r\n     * @param {number} width - The width of the bounds, in pixels.\r\n     * @param {number} height - The height of the bounds, in pixels.\r\n     * @param {boolean} [centerOn=false] - If `true` the Camera will automatically be centered on the new bounds.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setBounds: function (x, y, width, height, centerOn)\r\n    {\r\n        if (centerOn === undefined) { centerOn = false; }\r\n\r\n        this._bounds.setTo(x, y, width, height);\r\n\r\n        this.dirty = true;\r\n        this.useBounds = true;\r\n\r\n        if (centerOn)\r\n        {\r\n            this.centerToBounds();\r\n        }\r\n        else\r\n        {\r\n            this.scrollX = this.clampX(this.scrollX);\r\n            this.scrollY = this.clampY(this.scrollY);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns a rectangle containing the bounds of the Camera.\r\n     *\r\n     * If the Camera does not have any bounds the rectangle will be empty.\r\n     *\r\n     * The rectangle is a copy of the bounds, so is safe to modify.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#getBounds\r\n     * @since 3.16.0\r\n     *\r\n     * @param {Phaser.Geom.Rectangle} [out] - An optional Rectangle to store the bounds in. If not given, a new Rectangle will be created.\r\n     *\r\n     * @return {Phaser.Geom.Rectangle} A rectangle containing the bounds of this Camera.\r\n     */\r\n    getBounds: function (out)\r\n    {\r\n        if (out === undefined) { out = new Rectangle(); }\r\n\r\n        var source = this._bounds;\r\n\r\n        out.setTo(source.x, source.y, source.width, source.height);\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Sets the name of this Camera.\r\n     * This value is for your own use and isn't used internally.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setName\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [value=''] - The name of the Camera.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setName: function (value)\r\n    {\r\n        if (value === undefined) { value = ''; }\r\n\r\n        this.name = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the position of the Camera viewport within the game.\r\n     *\r\n     * This does not change where the camera is 'looking'. See `setScroll` to control that.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The top-left x coordinate of the Camera viewport.\r\n     * @param {number} [y=x] - The top-left y coordinate of the Camera viewport.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the rotation of this Camera. This causes everything it renders to appear rotated.\r\n     *\r\n     * Rotating a camera does not rotate the viewport itself, it is applied during rendering.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setRotation\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=0] - The rotation of the Camera, in radians.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setRotation: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this.rotation = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Should the Camera round pixel values to whole integers when rendering Game Objects?\r\n     *\r\n     * In some types of game, especially with pixel art, this is required to prevent sub-pixel aliasing.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setRoundPixels\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - `true` to round Camera pixels, `false` to not.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setRoundPixels: function (value)\r\n    {\r\n        this.roundPixels = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Scene the Camera is bound to.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setScene\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - The Scene the camera is bound to.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setScene: function (scene)\r\n    {\r\n        if (this.scene && this._customViewport)\r\n        {\r\n            this.sceneManager.customViewports--;\r\n        }\r\n\r\n        this.scene = scene;\r\n\r\n        var sys = scene.sys;\r\n\r\n        this.sceneManager = sys.game.scene;\r\n        this.scaleManager = sys.scale;\r\n        this.cameraManager = sys.cameras;\r\n\r\n        this.updateSystem();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the position of where the Camera is looking within the game.\r\n     * You can also modify the properties `Camera.scrollX` and `Camera.scrollY` directly.\r\n     * Use this method, or the scroll properties, to move your camera around the game world.\r\n     *\r\n     * This does not change where the camera viewport is placed. See `setPosition` to control that.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setScroll\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the Camera in the game world.\r\n     * @param {number} [y=x] - The y coordinate of the Camera in the game world.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setScroll: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.scrollX = x;\r\n        this.scrollY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the size of the Camera viewport.\r\n     *\r\n     * By default a Camera is the same size as the game, but can be made smaller via this method,\r\n     * allowing you to create mini-cam style effects by creating and positioning a smaller Camera\r\n     * viewport within your game.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of the Camera viewport.\r\n     * @param {number} [height=width] - The height of the Camera viewport.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setSize: function (width, height)\r\n    {\r\n        if (height === undefined) { height = width; }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * This method sets the position and size of the Camera viewport in a single call.\r\n     *\r\n     * If you're trying to change where the Camera is looking at in your game, then see\r\n     * the method `Camera.setScroll` instead. This method is for changing the viewport\r\n     * itself, not what the camera can see.\r\n     *\r\n     * By default a Camera is the same size as the game, but can be made smaller via this method,\r\n     * allowing you to create mini-cam style effects by creating and positioning a smaller Camera\r\n     * viewport within your game.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setViewport\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The top-left x coordinate of the Camera viewport.\r\n     * @param {number} y - The top-left y coordinate of the Camera viewport.\r\n     * @param {number} width - The width of the Camera viewport.\r\n     * @param {number} [height=width] - The height of the Camera viewport.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setViewport: function (x, y, width, height)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the zoom value of the Camera.\r\n     *\r\n     * Changing to a smaller value, such as 0.5, will cause the camera to 'zoom out'.\r\n     * Changing to a larger value, such as 2, will cause the camera to 'zoom in'.\r\n     *\r\n     * A value of 1 means 'no zoom' and is the default.\r\n     *\r\n     * Changing the zoom does not impact the Camera viewport in any way, it is only applied during rendering.\r\n     *\r\n     * As of Phaser 3.50 you can now set the horizontal and vertical zoom values independently.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setZoom\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=1] - The horizontal zoom value of the Camera. The minimum it can be is 0.001.\r\n     * @param {number} [y=x] - The vertical zoom value of the Camera. The minimum it can be is 0.001.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setZoom: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 1; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        if (x === 0)\r\n        {\r\n            x = 0.001;\r\n        }\r\n\r\n        if (y === 0)\r\n        {\r\n            y = 0.001;\r\n        }\r\n\r\n        this.zoomX = x;\r\n        this.zoomY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the mask to be applied to this Camera during rendering.\r\n     *\r\n     * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\r\n     *\r\n     * Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\r\n     *\r\n     * If a mask is already set on this Camera it will be immediately replaced.\r\n     *\r\n     * Masks have no impact on physics or input detection. They are purely a rendering component\r\n     * that allows you to limit what is visible during the render pass.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setMask\r\n     * @since 3.17.0\r\n     *\r\n     * @param {(Phaser.Display.Masks.BitmapMask|Phaser.Display.Masks.GeometryMask)} mask - The mask this Camera will use when rendering.\r\n     * @param {boolean} [fixedPosition=true] - Should the mask translate along with the Camera, or be fixed in place and not impacted by the Cameras transform?\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setMask: function (mask, fixedPosition)\r\n    {\r\n        if (fixedPosition === undefined) { fixedPosition = true; }\r\n\r\n        this.mask = mask;\r\n\r\n        this._maskCamera = (fixedPosition) ? this.cameraManager.default : this;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Clears the mask that this Camera was using.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#clearMask\r\n     * @since 3.17.0\r\n     *\r\n     * @param {boolean} [destroyMask=false] - Destroy the mask before clearing it?\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    clearMask: function (destroyMask)\r\n    {\r\n        if (destroyMask === undefined) { destroyMask = false; }\r\n\r\n        if (destroyMask && this.mask)\r\n        {\r\n            this.mask.destroy();\r\n        }\r\n\r\n        this.mask = null;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the visibility of this Camera.\r\n     *\r\n     * An invisible Camera will skip rendering and input tests of everything it can see.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#setVisible\r\n     * @since 3.10.0\r\n     *\r\n     * @param {boolean} value - The visible state of the Camera.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n\r\n    /**\r\n     * Returns an Object suitable for JSON storage containing all of the Camera viewport and rendering properties.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.Cameras.Scene2D.JSONCamera} A well-formed object suitable for conversion to JSON.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {\r\n            name: this.name,\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            zoom: this.zoom,\r\n            rotation: this.rotation,\r\n            roundPixels: this.roundPixels,\r\n            scrollX: this.scrollX,\r\n            scrollY: this.scrollY,\r\n            backgroundColor: this.backgroundColor.rgba\r\n        };\r\n\r\n        if (this.useBounds)\r\n        {\r\n            output['bounds'] = {\r\n                x: this._bounds.x,\r\n                y: this._bounds.y,\r\n                width: this._bounds.width,\r\n                height: this._bounds.height\r\n            };\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Internal method called automatically by the Camera Manager.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#update\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function ()\r\n    {\r\n        //  NOOP\r\n    },\r\n\r\n    /**\r\n     * Internal method called automatically when the viewport changes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#updateSystem\r\n     * @private\r\n     * @since 3.12.0\r\n     */\r\n    updateSystem: function ()\r\n    {\r\n        if (!this.scaleManager)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var custom = (this._x !== 0 || this._y !== 0 || this.scaleManager.width !== this._width || this.scaleManager.height !== this._height);\r\n\r\n        var sceneManager = this.sceneManager;\r\n\r\n        if (custom && !this._customViewport)\r\n        {\r\n            //  We need a custom viewport for this Camera\r\n            sceneManager.customViewports++;\r\n        }\r\n        else if (!custom && this._customViewport)\r\n        {\r\n            //  We're turning off a custom viewport for this Camera\r\n            sceneManager.customViewports--;\r\n        }\r\n\r\n        this.dirty = true;\r\n        this._customViewport = custom;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Camera instance and its internal properties and references.\r\n     * Once destroyed you cannot use this Camera again, even if re-added to a Camera Manager.\r\n     *\r\n     * This method is called automatically by `CameraManager.remove` if that methods `runDestroy` argument is `true`, which is the default.\r\n     *\r\n     * Unless you have a specific reason otherwise, always use `CameraManager.remove` and allow it to handle the camera destruction,\r\n     * rather than calling this method directly.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.BaseCamera#destroy\r\n     * @fires Phaser.Cameras.Scene2D.Events#DESTROY\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.emit(Events.DESTROY, this);\r\n\r\n        this.removeAllListeners();\r\n\r\n        this.matrix.destroy();\r\n\r\n        this.culledObjects = [];\r\n\r\n        if (this._customViewport)\r\n        {\r\n            //  We're turning off a custom viewport for this Camera\r\n            this.sceneManager.customViewports--;\r\n        }\r\n\r\n        this.renderList = [];\r\n\r\n        this._bounds = null;\r\n\r\n        this.scene = null;\r\n        this.scaleManager = null;\r\n        this.sceneManager = null;\r\n        this.cameraManager = null;\r\n    },\r\n\r\n    /**\r\n     * The x position of the Camera viewport, relative to the top-left of the game canvas.\r\n     * The viewport is the area into which the camera renders.\r\n     * To adjust the position the camera is looking at in the game world, see the `scrollX` value.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._x = value;\r\n            this.updateSystem();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of the Camera viewport, relative to the top-left of the game canvas.\r\n     * The viewport is the area into which the camera renders.\r\n     * To adjust the position the camera is looking at in the game world, see the `scrollY` value.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._y = value;\r\n            this.updateSystem();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The width of the Camera viewport, in pixels.\r\n     *\r\n     * The viewport is the area into which the Camera renders. Setting the viewport does\r\n     * not restrict where the Camera can scroll to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    width: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._width;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._width = value;\r\n            this.updateSystem();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The height of the Camera viewport, in pixels.\r\n     *\r\n     * The viewport is the area into which the Camera renders. Setting the viewport does\r\n     * not restrict where the Camera can scroll to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    height: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._height;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._height = value;\r\n            this.updateSystem();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The horizontal scroll position of this Camera.\r\n     *\r\n     * Change this value to cause the Camera to scroll around your Scene.\r\n     *\r\n     * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\r\n     * will automatically adjust the Camera scroll values accordingly.\r\n     *\r\n     * You can set the bounds within which the Camera can scroll via the `setBounds` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#scrollX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    scrollX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._scrollX;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._scrollX = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The vertical scroll position of this Camera.\r\n     *\r\n     * Change this value to cause the Camera to scroll around your Scene.\r\n     *\r\n     * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\r\n     * will automatically adjust the Camera scroll values accordingly.\r\n     *\r\n     * You can set the bounds within which the Camera can scroll via the `setBounds` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#scrollY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    scrollY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._scrollY;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._scrollY = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Camera zoom value. Change this value to zoom in, or out of, a Scene.\r\n     *\r\n     * A value of 0.5 would zoom the Camera out, so you can now see twice as much\r\n     * of the Scene as before. A value of 2 would zoom the Camera in, so every pixel\r\n     * now takes up 2 pixels when rendered.\r\n     *\r\n     * Set to 1 to return to the default zoom level.\r\n     *\r\n     * Be careful to never set this value to zero.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#zoom\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    zoom: {\r\n\r\n        get: function ()\r\n        {\r\n            return (this._zoomX + this._zoomY) / 2;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._zoomX = value;\r\n            this._zoomY = value;\r\n\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Camera horizontal zoom value. Change this value to zoom in, or out of, a Scene.\r\n     *\r\n     * A value of 0.5 would zoom the Camera out, so you can now see twice as much\r\n     * of the Scene as before. A value of 2 would zoom the Camera in, so every pixel\r\n     * now takes up 2 pixels when rendered.\r\n     *\r\n     * Set to 1 to return to the default zoom level.\r\n     *\r\n     * Be careful to never set this value to zero.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#zoomX\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.50.0\r\n     */\r\n    zoomX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._zoomX;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._zoomX = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Camera vertical zoom value. Change this value to zoom in, or out of, a Scene.\r\n     *\r\n     * A value of 0.5 would zoom the Camera out, so you can now see twice as much\r\n     * of the Scene as before. A value of 2 would zoom the Camera in, so every pixel\r\n     * now takes up 2 pixels when rendered.\r\n     *\r\n     * Set to 1 to return to the default zoom level.\r\n     *\r\n     * Be careful to never set this value to zero.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#zoomY\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.50.0\r\n     */\r\n    zoomY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._zoomY;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._zoomY = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The rotation of the Camera in radians.\r\n     *\r\n     * Camera rotation always takes place based on the Camera viewport. By default, rotation happens\r\n     * in the center of the viewport. You can adjust this with the `originX` and `originY` properties.\r\n     *\r\n     * Rotation influences the rendering of _all_ Game Objects visible by this Camera. However, it does not\r\n     * rotate the Camera viewport itself, which always remains an axis-aligned rectangle.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#rotation\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.11.0\r\n     */\r\n    rotation: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._rotation;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._rotation = value;\r\n            this.dirty = true;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The horizontal position of the center of the Camera's viewport, relative to the left of the game canvas.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#centerX\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.10.0\r\n     */\r\n    centerX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + (0.5 * this.width);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The vertical position of the center of the Camera's viewport, relative to the top of the game canvas.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#centerY\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.10.0\r\n     */\r\n    centerY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + (0.5 * this.height);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The displayed width of the camera viewport, factoring in the camera zoom level.\r\n     *\r\n     * If a camera has a viewport width of 800 and a zoom of 0.5 then its display width\r\n     * would be 1600, as it's displaying twice as many pixels as zoom level 1.\r\n     *\r\n     * Equally, a camera with a width of 800 and zoom of 2 would have a display width\r\n     * of 400 pixels.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#displayWidth\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\r\n    displayWidth: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.width / this.zoomX;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The displayed height of the camera viewport, factoring in the camera zoom level.\r\n     *\r\n     * If a camera has a viewport height of 600 and a zoom of 0.5 then its display height\r\n     * would be 1200, as it's displaying twice as many pixels as zoom level 1.\r\n     *\r\n     * Equally, a camera with a height of 600 and zoom of 2 would have a display height\r\n     * of 300 pixels.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.BaseCamera#displayHeight\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\r\n    displayHeight: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.height / this.zoomY;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseCamera;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\n\r\n/**\r\n * Converts a hex string into a Phaser Color object.\r\n * \r\n * The hex string can supplied as `'#0033ff'` or the short-hand format of `'#03f'`; it can begin with an optional \"#\" or \"0x\", or be unprefixed.\r\n *\r\n * An alpha channel is _not_ supported.\r\n *\r\n * @function Phaser.Display.Color.HexStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} hex - The hex color value to convert, such as `#0033ff` or the short-hand format: `#03f`.\r\n *\r\n * @return {Phaser.Display.Color} A Color object populated by the values of the given string.\r\n */\r\nvar HexStringToColor = function (hex)\r\n{\r\n    var color = new Color();\r\n\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    hex = hex.replace(/^(?:#|0x)?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (m, r, g, b)\r\n    {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    var result = (/^(?:#|0x)?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i).exec(hex);\r\n\r\n    if (result)\r\n    {\r\n        var r = parseInt(result[1], 16);\r\n        var g = parseInt(result[2], 16);\r\n        var b = parseInt(result[3], 16);\r\n\r\n        color.setTo(r, g, b);\r\n    }\r\n\r\n    return color;\r\n};\r\n\r\nmodule.exports = HexStringToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\nvar IntegerToRGB = require('./IntegerToRGB');\r\n\r\n/**\r\n * Converts the given color value into an instance of a Color object.\r\n *\r\n * @function Phaser.Display.Color.IntegerToColor\r\n * @since 3.0.0\r\n *\r\n * @param {number} input - The color value to convert into a Color object.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar IntegerToColor = function (input)\r\n{\r\n    var rgb = IntegerToRGB(input);\r\n\r\n    return new Color(rgb.r, rgb.g, rgb.b, rgb.a);\r\n};\r\n\r\nmodule.exports = IntegerToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Return the component parts of a color as an Object with the properties alpha, red, green, blue.\r\n *\r\n * Alpha will only be set if it exists in the given color (0xAARRGGBB)\r\n *\r\n * @function Phaser.Display.Color.IntegerToRGB\r\n * @since 3.0.0\r\n *\r\n * @param {number} input - The color value to convert into a Color object.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object with the red, green and blue values set in the r, g and b properties.\r\n */\r\nvar IntegerToRGB = function (color)\r\n{\r\n    if (color > 16777215)\r\n    {\r\n        //  The color value has an alpha component\r\n        return {\r\n            a: color >>> 24,\r\n            r: color >> 16 & 0xFF,\r\n            g: color >> 8 & 0xFF,\r\n            b: color & 0xFF\r\n        };\r\n    }\r\n    else\r\n    {\r\n        return {\r\n            a: 255,\r\n            r: color >> 16 & 0xFF,\r\n            g: color >> 8 & 0xFF,\r\n            b: color & 0xFF\r\n        };\r\n    }\r\n};\r\n\r\nmodule.exports = IntegerToRGB;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\n\r\n/**\r\n * Converts an object containing `r`, `g`, `b` and `a` properties into a Color class instance.\r\n *\r\n * @function Phaser.Display.Color.ObjectToColor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Display.InputColorObject} input - An object containing `r`, `g`, `b` and `a` properties in the range 0 to 255.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar ObjectToColor = function (input)\r\n{\r\n    return new Color(input.r, input.g, input.b, input.a);\r\n};\r\n\r\nmodule.exports = ObjectToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\n\r\n/**\r\n * Converts a CSS 'web' string into a Phaser Color object.\r\n * \r\n * The web string can be in the format `'rgb(r,g,b)'` or `'rgba(r,g,b,a)'` where r/g/b are in the range [0..255] and a is in the range [0..1].\r\n *\r\n * @function Phaser.Display.Color.RGBStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} rgb - The CSS format color string, using the `rgb` or `rgba` format.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar RGBStringToColor = function (rgb)\r\n{\r\n    var color = new Color();\r\n\r\n    var result = (/^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d+(?:\\.\\d+)?))?\\s*\\)$/).exec(rgb.toLowerCase());\r\n\r\n    if (result)\r\n    {\r\n        var r = parseInt(result[1], 10);\r\n        var g = parseInt(result[2], 10);\r\n        var b = parseInt(result[3], 10);\r\n        var a = (result[4] !== undefined) ? parseFloat(result[4]) : 1;\r\n\r\n        color.setTo(r, g, b, a * 255);\r\n    }\r\n\r\n    return color;\r\n};\r\n\r\nmodule.exports = RGBStringToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar HexStringToColor = require('./HexStringToColor');\r\nvar IntegerToColor = require('./IntegerToColor');\r\nvar ObjectToColor = require('./ObjectToColor');\r\nvar RGBStringToColor = require('./RGBStringToColor');\r\n\r\n/**\r\n * Converts the given source color value into an instance of a Color class.\r\n * The value can be either a string, prefixed with `rgb` or a hex string, a number or an Object.\r\n *\r\n * @function Phaser.Display.Color.ValueToColor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|number|Phaser.Types.Display.InputColorObject)} input - The source color value to convert.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar ValueToColor = function (input)\r\n{\r\n    var t = typeof input;\r\n\r\n    switch (t)\r\n    {\r\n        case 'string':\r\n\r\n            if (input.substr(0, 3).toLowerCase() === 'rgb')\r\n            {\r\n                return RGBStringToColor(input);\r\n            }\r\n            else\r\n            {\r\n                return HexStringToColor(input);\r\n            }\r\n\r\n        case 'number':\r\n\r\n            return IntegerToColor(input);\r\n\r\n        case 'object':\r\n\r\n            return ObjectToColor(input);\r\n    }\r\n};\r\n\r\nmodule.exports = ValueToColor;\r\n"],"names":["Class","Components","DegToRad","EventEmitter","Events","Rectangle","TransformMatrix","ValueToColor","Vector2","BaseCamera","Extends","Mixins","Alpha","Visible","initialize","x","y","width","height","undefined","call","this","scene","sceneManager","scaleManager","cameraManager","id","name","roundPixels","useBounds","worldView","dirty","_x","_y","_width","_height","_bounds","_scrollX","_scrollY","_zoomX","_zoomY","_rotation","matrix","transparent","backgroundColor","disableCull","culledObjects","midPoint","originX","originY","_customViewport","mask","_maskCamera","renderList","addToRenderList","child","push","setOrigin","getScroll","out","clampX","clampY","centerOnX","scrollX","centerOnY","scrollY","centerOn","centerToBounds","bounds","set","centerX","centerY","centerToSize","cull","renderableObjects","cameraMatrix","mva","mvb","mvc","mvd","determinant","mve","mvf","cameraW","cameraH","cullTop","cullBottom","cullLeft","cullRight","length","index","object","hasOwnProperty","parentContainer","objectW","objectH","objectX","scrollFactorX","objectY","scrollFactorY","getWorldPoint","output","ima","imb","imc","imd","ime","imf","c","Math","cos","rotation","s","sin","zoomX","zoomY","sx","sy","ignore","entries","Array","isArray","i","entry","isParent","getChildren","cameraFilter","preRender","halfWidth","halfHeight","round","midX","midY","displayWidth","displayHeight","setTo","applyITRS","translate","dw","bx","bw","max","dh","by","bh","removeBounds","setEmpty","setAngle","value","setBackgroundColor","color","alpha","setBounds","getBounds","source","setName","setPosition","setRotation","setRoundPixels","setScene","customViewports","sys","game","scale","cameras","updateSystem","setScroll","setSize","setViewport","setZoom","setMask","fixedPosition","default","clearMask","destroyMask","destroy","toJSON","zoom","rgba","update","custom","emit","DESTROY","removeAllListeners","get","module","exports","Color","hex","replace","m","r","g","b","result","exec","parseInt","IntegerToRGB","input","rgb","a","toLowerCase","parseFloat","HexStringToColor","IntegerToColor","ObjectToColor","RGBStringToColor","substr"],"sourceRoot":""}