{"version":3,"file":"js/2772.0a44e3221f454a413279.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/ColorSpectrum.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/ColorToRGBA.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/ComponentToHex.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/HSLToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/HSVColorWheel.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/HexStringToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/HueToComponent.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/IntegerToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/IntegerToRGB.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/Interpolate.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/ObjectToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/RGBStringToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/RGBToString.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/RandomRGB.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/ValueToColor.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/display/color/index.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/math/Linear.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/utils/NOOP.js"],"sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetColor = require('./GetColor');\r\n\r\n/**\r\n * Return an array of Colors in a Color Spectrum.\r\n *\r\n * The spectrum colors flow in the order: red, yellow, green, blue.\r\n *\r\n * By default this function will return an array with 1024 elements in.\r\n *\r\n * However, you can reduce this to a smaller quantity if needed, by specitying the `limit` parameter.\r\n *\r\n * @function Phaser.Display.Color.ColorSpectrum\r\n * @since 3.50.0\r\n *\r\n * @param {number} [limit=1024] - How many colors should be returned? The maximum is 1024 but you can set a smaller quantity if required.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject[]} An array containing `limit` parameter number of elements, where each contains a Color Object.\r\n */\r\nvar ColorSpectrum = function (limit)\r\n{\r\n    if (limit === undefined) { limit = 1024; }\r\n\r\n    var colors = [];\r\n\r\n    var range = 255;\r\n\r\n    var i;\r\n    var r = 255;\r\n    var g = 0;\r\n    var b = 0;\r\n\r\n    //  Red to Yellow\r\n    for (i = 0; i <= range; i++)\r\n    {\r\n        colors.push({ r: r, g: i, b: b, color: GetColor(r, i, b) });\r\n    }\r\n\r\n    g = 255;\r\n\r\n    //  Yellow to Green\r\n    for (i = range; i >= 0; i--)\r\n    {\r\n        colors.push({ r: i, g: g, b: b, color: GetColor(i, g, b) });\r\n    }\r\n\r\n    r = 0;\r\n\r\n    //  Green to Blue\r\n    for (i = 0; i <= range; i++, g--)\r\n    {\r\n        colors.push({ r: r, g: g, b: i, color: GetColor(r, g, i) });\r\n    }\r\n\r\n    g = 0;\r\n    b = 255;\r\n\r\n    //  Blue to Red\r\n    for (i = 0; i <= range; i++, b--, r++)\r\n    {\r\n        colors.push({ r: r, g: g, b: b, color: GetColor(r, g, b) });\r\n    }\r\n\r\n    if (limit === 1024)\r\n    {\r\n        return colors;\r\n    }\r\n    else\r\n    {\r\n        var out = [];\r\n\r\n        var t = 0;\r\n        var inc = 1024 / limit;\r\n\r\n        for (i = 0; i < limit; i++)\r\n        {\r\n            out.push(colors[Math.floor(t)]);\r\n\r\n            t += inc;\r\n        }\r\n\r\n        return out;\r\n    }\r\n};\r\n\r\nmodule.exports = ColorSpectrum;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Converts the given color value into an Object containing r,g,b and a properties.\r\n *\r\n * @function Phaser.Display.Color.ColorToRGBA\r\n * @since 3.0.0\r\n *\r\n * @param {number} color - A color value, optionally including the alpha value.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the parsed color values.\r\n */\r\nvar ColorToRGBA = function (color)\r\n{\r\n    var output = {\r\n        r: color >> 16 & 0xFF,\r\n        g: color >> 8 & 0xFF,\r\n        b: color & 0xFF,\r\n        a: 255\r\n    };\r\n\r\n    if (color > 16777215)\r\n    {\r\n        output.a = color >>> 24;\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = ColorToRGBA;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns a string containing a hex representation of the given color component.\r\n *\r\n * @function Phaser.Display.Color.ComponentToHex\r\n * @since 3.0.0\r\n *\r\n * @param {number} color - The color channel to get the hex value for, must be a value between 0 and 255.\r\n *\r\n * @return {string} A string of length 2 characters, i.e. 255 = ff, 100 = 64.\r\n */\r\nvar ComponentToHex = function (color)\r\n{\r\n    var hex = color.toString(16);\r\n\r\n    return (hex.length === 1) ? '0' + hex : hex;\r\n};\r\n\r\nmodule.exports = ComponentToHex;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\nvar HueToComponent = require('./HueToComponent');\r\n\r\n/**\r\n * Converts HSL (hue, saturation and lightness) values to a Phaser Color object.\r\n *\r\n * @function Phaser.Display.Color.HSLToColor\r\n * @since 3.0.0\r\n *\r\n * @param {number} h - The hue value in the range 0 to 1.\r\n * @param {number} s - The saturation value in the range 0 to 1.\r\n * @param {number} l - The lightness value in the range 0 to 1.\r\n *\r\n * @return {Phaser.Display.Color} A Color object created from the results of the h, s and l values.\r\n */\r\nvar HSLToColor = function (h, s, l)\r\n{\r\n    // achromatic by default\r\n    var r = l;\r\n    var g = l;\r\n    var b = l;\r\n\r\n    if (s !== 0)\r\n    {\r\n        var q = (l < 0.5) ? l * (1 + s) : l + s - l * s;\r\n        var p = 2 * l - q;\r\n\r\n        r = HueToComponent(p, q, h + 1 / 3);\r\n        g = HueToComponent(p, q, h);\r\n        b = HueToComponent(p, q, h - 1 / 3);\r\n    }\r\n\r\n    var color = new Color();\r\n\r\n    return color.setGLTo(r, g, b, 1);\r\n};\r\n\r\nmodule.exports = HSLToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar HSVToRGB = require('./HSVToRGB');\r\n\r\n/**\r\n * Get HSV color wheel values in an array which will be 360 elements in size.\r\n *\r\n * @function Phaser.Display.Color.HSVColorWheel\r\n * @since 3.0.0\r\n *\r\n * @param {number} [s=1] - The saturation, in the range 0 - 1.\r\n * @param {number} [v=1] - The value, in the range 0 - 1.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject[]} An array containing 360 elements, where each contains a single numeric value corresponding to the color at that point in the HSV color wheel.\r\n */\r\nvar HSVColorWheel = function (s, v)\r\n{\r\n    if (s === undefined) { s = 1; }\r\n    if (v === undefined) { v = 1; }\r\n\r\n    var colors = [];\r\n\r\n    for (var c = 0; c <= 359; c++)\r\n    {\r\n        colors.push(HSVToRGB(c / 359, s, v));\r\n    }\r\n\r\n    return colors;\r\n};\r\n\r\nmodule.exports = HSVColorWheel;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\n\r\n/**\r\n * Converts a hex string into a Phaser Color object.\r\n * \r\n * The hex string can supplied as `'#0033ff'` or the short-hand format of `'#03f'`; it can begin with an optional \"#\" or \"0x\", or be unprefixed.\r\n *\r\n * An alpha channel is _not_ supported.\r\n *\r\n * @function Phaser.Display.Color.HexStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} hex - The hex color value to convert, such as `#0033ff` or the short-hand format: `#03f`.\r\n *\r\n * @return {Phaser.Display.Color} A Color object populated by the values of the given string.\r\n */\r\nvar HexStringToColor = function (hex)\r\n{\r\n    var color = new Color();\r\n\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    hex = hex.replace(/^(?:#|0x)?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (m, r, g, b)\r\n    {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    var result = (/^(?:#|0x)?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i).exec(hex);\r\n\r\n    if (result)\r\n    {\r\n        var r = parseInt(result[1], 16);\r\n        var g = parseInt(result[2], 16);\r\n        var b = parseInt(result[3], 16);\r\n\r\n        color.setTo(r, g, b);\r\n    }\r\n\r\n    return color;\r\n};\r\n\r\nmodule.exports = HexStringToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Converts a hue to an RGB color.\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.HueToComponent\r\n * @since 3.0.0\r\n *\r\n * @param {number} p\r\n * @param {number} q\r\n * @param {number} t\r\n *\r\n * @return {number} The combined color value.\r\n */\r\nvar HueToComponent = function (p, q, t)\r\n{\r\n    if (t < 0)\r\n    {\r\n        t += 1;\r\n    }\r\n\r\n    if (t > 1)\r\n    {\r\n        t -= 1;\r\n    }\r\n\r\n    if (t < 1 / 6)\r\n    {\r\n        return p + (q - p) * 6 * t;\r\n    }\r\n\r\n    if (t < 1 / 2)\r\n    {\r\n        return q;\r\n    }\r\n\r\n    if (t < 2 / 3)\r\n    {\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n    }\r\n\r\n    return p;\r\n};\r\n\r\nmodule.exports = HueToComponent;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\nvar IntegerToRGB = require('./IntegerToRGB');\r\n\r\n/**\r\n * Converts the given color value into an instance of a Color object.\r\n *\r\n * @function Phaser.Display.Color.IntegerToColor\r\n * @since 3.0.0\r\n *\r\n * @param {number} input - The color value to convert into a Color object.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar IntegerToColor = function (input)\r\n{\r\n    var rgb = IntegerToRGB(input);\r\n\r\n    return new Color(rgb.r, rgb.g, rgb.b, rgb.a);\r\n};\r\n\r\nmodule.exports = IntegerToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Return the component parts of a color as an Object with the properties alpha, red, green, blue.\r\n *\r\n * Alpha will only be set if it exists in the given color (0xAARRGGBB)\r\n *\r\n * @function Phaser.Display.Color.IntegerToRGB\r\n * @since 3.0.0\r\n *\r\n * @param {number} input - The color value to convert into a Color object.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object with the red, green and blue values set in the r, g and b properties.\r\n */\r\nvar IntegerToRGB = function (color)\r\n{\r\n    if (color > 16777215)\r\n    {\r\n        //  The color value has an alpha component\r\n        return {\r\n            a: color >>> 24,\r\n            r: color >> 16 & 0xFF,\r\n            g: color >> 8 & 0xFF,\r\n            b: color & 0xFF\r\n        };\r\n    }\r\n    else\r\n    {\r\n        return {\r\n            a: 255,\r\n            r: color >> 16 & 0xFF,\r\n            g: color >> 8 & 0xFF,\r\n            b: color & 0xFF\r\n        };\r\n    }\r\n};\r\n\r\nmodule.exports = IntegerToRGB;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Linear = require('../../math/Linear');\r\n\r\n/**\r\n * @namespace Phaser.Display.Color.Interpolate\r\n * @memberof Phaser.Display.Color\r\n * @since 3.0.0\r\n */\r\n\r\n/**\r\n * Interpolates between the two given color ranges over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.RGBWithRGB\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {number} r1 - Red value.\r\n * @param {number} g1 - Blue value.\r\n * @param {number} b1 - Green value.\r\n * @param {number} r2 - Red value.\r\n * @param {number} g2 - Blue value.\r\n * @param {number} b2 - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the interpolated color values.\r\n */\r\nvar RGBWithRGB = function (r1, g1, b1, r2, g2, b2, length, index)\r\n{\r\n    if (length === undefined) { length = 100; }\r\n    if (index === undefined) { index = 0; }\r\n\r\n    var t = index / length;\r\n\r\n    return {\r\n        r: Linear(r1, r2, t),\r\n        g: Linear(g1, g2, t),\r\n        b: Linear(b1, b2, t)\r\n    };\r\n};\r\n\r\n/**\r\n * Interpolates between the two given color objects over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithColor\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {Phaser.Display.Color} color2 - The second Color object.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the interpolated color values.\r\n */\r\nvar ColorWithColor = function (color1, color2, length, index)\r\n{\r\n    if (length === undefined) { length = 100; }\r\n    if (index === undefined) { index = 0; }\r\n\r\n    return RGBWithRGB(color1.r, color1.g, color1.b, color2.r, color2.g, color2.b, length, index);\r\n};\r\n\r\n/**\r\n * Interpolates between the Color object and color values over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithRGB\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {number} r - Red value.\r\n * @param {number} g - Blue value.\r\n * @param {number} b - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the interpolated color values.\r\n */\r\nvar ColorWithRGB = function (color, r, g, b, length, index)\r\n{\r\n    if (length === undefined) { length = 100; }\r\n    if (index === undefined) { index = 0; }\r\n\r\n    return RGBWithRGB(color.r, color.g, color.b, r, g, b, length, index);\r\n};\r\n\r\nmodule.exports = {\r\n\r\n    RGBWithRGB: RGBWithRGB,\r\n    ColorWithRGB: ColorWithRGB,\r\n    ColorWithColor: ColorWithColor\r\n\r\n};\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\n\r\n/**\r\n * Converts an object containing `r`, `g`, `b` and `a` properties into a Color class instance.\r\n *\r\n * @function Phaser.Display.Color.ObjectToColor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Display.InputColorObject} input - An object containing `r`, `g`, `b` and `a` properties in the range 0 to 255.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar ObjectToColor = function (input)\r\n{\r\n    return new Color(input.r, input.g, input.b, input.a);\r\n};\r\n\r\nmodule.exports = ObjectToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\n\r\n/**\r\n * Converts a CSS 'web' string into a Phaser Color object.\r\n * \r\n * The web string can be in the format `'rgb(r,g,b)'` or `'rgba(r,g,b,a)'` where r/g/b are in the range [0..255] and a is in the range [0..1].\r\n *\r\n * @function Phaser.Display.Color.RGBStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} rgb - The CSS format color string, using the `rgb` or `rgba` format.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar RGBStringToColor = function (rgb)\r\n{\r\n    var color = new Color();\r\n\r\n    var result = (/^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d+(?:\\.\\d+)?))?\\s*\\)$/).exec(rgb.toLowerCase());\r\n\r\n    if (result)\r\n    {\r\n        var r = parseInt(result[1], 10);\r\n        var g = parseInt(result[2], 10);\r\n        var b = parseInt(result[3], 10);\r\n        var a = (result[4] !== undefined) ? parseFloat(result[4]) : 1;\r\n\r\n        color.setTo(r, g, b, a * 255);\r\n    }\r\n\r\n    return color;\r\n};\r\n\r\nmodule.exports = RGBStringToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ComponentToHex = require('./ComponentToHex');\r\n\r\n/**\r\n * Converts the color values into an HTML compatible color string, prefixed with either `#` or `0x`.\r\n *\r\n * @function Phaser.Display.Color.RGBToString\r\n * @since 3.0.0\r\n *\r\n * @param {number} r - The red color value. A number between 0 and 255.\r\n * @param {number} g - The green color value. A number between 0 and 255.\r\n * @param {number} b - The blue color value. A number between 0 and 255.\r\n * @param {number} [a=255] - The alpha value. A number between 0 and 255.\r\n * @param {string} [prefix=#] - The prefix of the string. Either `#` or `0x`.\r\n *\r\n * @return {string} A string-based representation of the color values.\r\n */\r\nvar RGBToString = function (r, g, b, a, prefix)\r\n{\r\n    if (a === undefined) { a = 255; }\r\n    if (prefix === undefined) { prefix = '#'; }\r\n\r\n    if (prefix === '#')\r\n    {\r\n        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1, 7);\r\n    }\r\n    else\r\n    {\r\n        return '0x' + ComponentToHex(a) + ComponentToHex(r) + ComponentToHex(g) + ComponentToHex(b);\r\n    }\r\n};\r\n\r\nmodule.exports = RGBToString;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Between = require('../../math/Between');\r\nvar Color = require('./Color');\r\n\r\n/**\r\n * Creates a new Color object where the r, g, and b values have been set to random values\r\n * based on the given min max values.\r\n *\r\n * @function Phaser.Display.Color.RandomRGB\r\n * @since 3.0.0\r\n *\r\n * @param {number} [min=0] - The minimum value to set the random range from (between 0 and 255)\r\n * @param {number} [max=255] - The maximum value to set the random range from (between 0 and 255)\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar RandomRGB = function (min, max)\r\n{\r\n    if (min === undefined) { min = 0; }\r\n    if (max === undefined) { max = 255; }\r\n\r\n    return new Color(Between(min, max), Between(min, max), Between(min, max));\r\n};\r\n\r\nmodule.exports = RandomRGB;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar HexStringToColor = require('./HexStringToColor');\r\nvar IntegerToColor = require('./IntegerToColor');\r\nvar ObjectToColor = require('./ObjectToColor');\r\nvar RGBStringToColor = require('./RGBStringToColor');\r\n\r\n/**\r\n * Converts the given source color value into an instance of a Color class.\r\n * The value can be either a string, prefixed with `rgb` or a hex string, a number or an Object.\r\n *\r\n * @function Phaser.Display.Color.ValueToColor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|number|Phaser.Types.Display.InputColorObject)} input - The source color value to convert.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar ValueToColor = function (input)\r\n{\r\n    var t = typeof input;\r\n\r\n    switch (t)\r\n    {\r\n        case 'string':\r\n\r\n            if (input.substr(0, 3).toLowerCase() === 'rgb')\r\n            {\r\n                return RGBStringToColor(input);\r\n            }\r\n            else\r\n            {\r\n                return HexStringToColor(input);\r\n            }\r\n\r\n        case 'number':\r\n\r\n            return IntegerToColor(input);\r\n\r\n        case 'object':\r\n\r\n            return ObjectToColor(input);\r\n    }\r\n};\r\n\r\nmodule.exports = ValueToColor;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\n\r\nColor.ColorSpectrum = require('./ColorSpectrum');\r\nColor.ColorToRGBA = require('./ColorToRGBA');\r\nColor.ComponentToHex = require('./ComponentToHex');\r\nColor.GetColor = require('./GetColor');\r\nColor.GetColor32 = require('./GetColor32');\r\nColor.HexStringToColor = require('./HexStringToColor');\r\nColor.HSLToColor = require('./HSLToColor');\r\nColor.HSVColorWheel = require('./HSVColorWheel');\r\nColor.HSVToRGB = require('./HSVToRGB');\r\nColor.HueToComponent = require('./HueToComponent');\r\nColor.IntegerToColor = require('./IntegerToColor');\r\nColor.IntegerToRGB = require('./IntegerToRGB');\r\nColor.Interpolate = require('./Interpolate');\r\nColor.ObjectToColor = require('./ObjectToColor');\r\nColor.RandomRGB = require('./RandomRGB');\r\nColor.RGBStringToColor = require('./RGBStringToColor');\r\nColor.RGBToHSV = require('./RGBToHSV');\r\nColor.RGBToString = require('./RGBToString');\r\nColor.ValueToColor = require('./ValueToColor');\r\n\r\nmodule.exports = Color;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculates a linear (interpolation) value over t.\r\n *\r\n * @function Phaser.Math.Linear\r\n * @since 3.0.0\r\n *\r\n * @param {number} p0 - The first point.\r\n * @param {number} p1 - The second point.\r\n * @param {number} t - The percentage between p0 and p1 to return, represented as a number between 0 and 1.\r\n *\r\n * @return {number} The step t% of the way between p0 and p1.\r\n */\r\nvar Linear = function (p0, p1, t)\r\n{\r\n    return (p1 - p0) * t + p0;\r\n};\r\n\r\nmodule.exports = Linear;\r\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A NOOP (No Operation) callback function.\r\n *\r\n * Used internally by Phaser when it's more expensive to determine if a callback exists\r\n * than it is to just invoke an empty function.\r\n *\r\n * @function Phaser.Utils.NOOP\r\n * @since 3.0.0\r\n */\r\nvar NOOP = function ()\r\n{\r\n    //  NOOP\r\n};\r\n\r\nmodule.exports = NOOP;\r\n"],"names":["GetColor","module","exports","limit","undefined","i","colors","range","r","g","b","push","color","out","t","inc","Math","floor","output","a","hex","toString","length","Color","HueToComponent","h","s","l","q","p","setGLTo","HSVToRGB","v","c","replace","m","result","exec","parseInt","setTo","IntegerToRGB","input","rgb","Linear","RGBWithRGB","r1","g1","b1","r2","g2","b2","index","ColorWithRGB","ColorWithColor","color1","color2","toLowerCase","parseFloat","ComponentToHex","prefix","slice","Between","min","max","HexStringToColor","IntegerToColor","ObjectToColor","RGBStringToColor","substr","ColorSpectrum","ColorToRGBA","GetColor32","HSLToColor","HSVColorWheel","Interpolate","RandomRGB","RGBToHSV","RGBToString","ValueToColor","p0","p1"],"sourceRoot":""}