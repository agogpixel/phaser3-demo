{"version":3,"file":"js/9297.5210e309a75bca42f819.js","mappings":"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","sources":["webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/geom/polygon/Earcut.js","webpack://@agogpixel/phaser3-demo/./node_modules/phaser/src/renderer/webgl/Utils.js"],"sourcesContent":["/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * This module implements a modified ear slicing algorithm, optimized by z-order curve hashing and extended to\n * handle holes, twisted polygons, degeneracies and self-intersections in a way that doesn't guarantee correctness\n * of triangulation, but attempts to always produce acceptable results for practical data.\n *\n * Example:\n *\n * ```javascript\n * const triangles = Phaser.Geom.Polygon.Earcut([10,0, 0,50, 60,60, 70,10]); // returns [1,0,3, 3,2,1]\n * ```\n *\n * Each group of three vertex indices in the resulting array forms a triangle.\n *\n * ```javascript\n * // triangulating a polygon with a hole\n * earcut([0,0, 100,0, 100,100, 0,100,  20,20, 80,20, 80,80, 20,80], [4]);\n * // [3,0,4, 5,4,0, 3,4,7, 5,0,1, 2,3,7, 6,5,1, 2,7,6, 6,1,2]\n *\n * // triangulating a polygon with 3d coords\n * earcut([10,0,1, 0,50,2, 60,60,3, 70,10,4], null, 3);\n * // [1,0,3, 3,2,1]\n * ```\n *\n * If you pass a single vertex as a hole, Earcut treats it as a Steiner point.\n *\n * If your input is a multi-dimensional array (e.g. GeoJSON Polygon), you can convert it to the format\n * expected by Earcut with `Phaser.Geom.Polygon.Earcut.flatten`:\n *\n * ```javascript\n * var data = earcut.flatten(geojson.geometry.coordinates);\n * var triangles = earcut(data.vertices, data.holes, data.dimensions);\n * ```\n *\n * After getting a triangulation, you can verify its correctness with `Phaser.Geom.Polygon.Earcut.deviation`:\n *\n * ```javascript\n * var deviation = earcut.deviation(vertices, holes, dimensions, triangles);\n * ```\n * Returns the relative difference between the total area of triangles and the area of the input polygon.\n * 0 means the triangulation is fully correct.\n *\n * For more information see https://github.com/mapbox/earcut\n *\n * @function Phaser.Geom.Polygon.Earcut\n * @since 3.50.0\n *\n * @param {number[]} data - A flat array of vertex coordinate, like [x0,y0, x1,y1, x2,y2, ...]\n * @param {number[]} [holeIndices] - An array of hole indices if any (e.g. [5, 8] for a 12-vertex input would mean one hole with vertices 5–7 and another with 8–11).\n * @param {number} [dimensions=2] - The number of coordinates per vertex in the input array (2 by default).\n *\n * @return {number[]} An array of triangulated data.\n */\n\n //  Earcut 2.2.2 (January 21st 2020)\n\n/*\n * ISC License\n *\n * Copyright (c) 2016, Mapbox\n *\n * Permission to use, copy, modify, and/or distribute this software for any purpose\n * with or without fee is hereby granted, provided that the above copyright notice\n * and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n * THIS SOFTWARE.\n */\n\n'use strict';\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n\n        // filter collinear points around the cuts\n        filterPoints(outerNode, outerNode.next);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n\nmodule.exports = earcut;\n","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @author       Matthew Groves <@doormat>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Generate shader source to test maximum ifs.\r\n *\r\n * @private\r\n * @ignore\r\n * @param {number} maxIfs - The number of if statements to generate\r\n */\r\nfunction GenerateSrc (maxIfs)\r\n{\r\n    var src = '';\r\n\r\n    for (var i = 0; i < maxIfs; ++i)\r\n    {\r\n        if (i > 0)\r\n        {\r\n            src += '\\nelse ';\r\n        }\r\n\r\n        if (i < maxIfs - 1)\r\n        {\r\n            src += 'if(test == ' + i + '.0){}';\r\n        }\r\n    }\r\n\r\n    return src;\r\n}\r\n\r\n/**\r\n * @namespace Phaser.Renderer.WebGL.Utils\r\n * @since 3.0.0\r\n */\r\nmodule.exports = {\r\n\r\n    /**\r\n     * Packs four floats on a range from 0.0 to 1.0 into a single Uint32\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getTintFromFloats\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} r - Red component in a range from 0.0 to 1.0\r\n     * @param {number} g - Green component in a range from 0.0 to 1.0\r\n     * @param {number} b - Blue component in a range from 0.0 to 1.0\r\n     * @param {number} a - Alpha component in a range from 0.0 to 1.0\r\n     *\r\n     * @return {number} The packed RGBA values as a Uint32.\r\n     */\r\n    getTintFromFloats: function (r, g, b, a)\r\n    {\r\n        var ur = ((r * 255) | 0) & 0xff;\r\n        var ug = ((g * 255) | 0) & 0xff;\r\n        var ub = ((b * 255) | 0) & 0xff;\r\n        var ua = ((a * 255) | 0) & 0xff;\r\n\r\n        return ((ua << 24) | (ur << 16) | (ug << 8) | ub) >>> 0;\r\n    },\r\n\r\n    /**\r\n     * Packs a Uint24, representing RGB components, with a Float32, representing\r\n     * the alpha component, with a range between 0.0 and 1.0 and return a Uint32\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rgb - Uint24 representing RGB components\r\n     * @param {number} a - Float32 representing Alpha component\r\n     *\r\n     * @return {number} Packed RGBA as Uint32\r\n     */\r\n    getTintAppendFloatAlpha: function (rgb, a)\r\n    {\r\n        var ua = ((a * 255) | 0) & 0xff;\r\n\r\n        return ((ua << 24) | rgb) >>> 0;\r\n    },\r\n\r\n    /**\r\n     * Packs a Uint24, representing RGB components, with a Float32, representing\r\n     * the alpha component, with a range between 0.0 and 1.0 and return a\r\n     * swizzled Uint32\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlphaAndSwap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rgb - Uint24 representing RGB components\r\n     * @param {number} a - Float32 representing Alpha component\r\n     *\r\n     * @return {number} Packed RGBA as Uint32\r\n     */\r\n    getTintAppendFloatAlphaAndSwap: function (rgb, a)\r\n    {\r\n        var ur = ((rgb >> 16) | 0) & 0xff;\r\n        var ug = ((rgb >> 8) | 0) & 0xff;\r\n        var ub = (rgb | 0) & 0xff;\r\n        var ua = ((a * 255) | 0) & 0xff;\r\n\r\n        return ((ua << 24) | (ub << 16) | (ug << 8) | ur) >>> 0;\r\n    },\r\n\r\n    /**\r\n     * Unpacks a Uint24 RGB into an array of floats of ranges of 0.0 and 1.0\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getFloatsFromUintRGB\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rgb - RGB packed as a Uint24\r\n     *\r\n     * @return {array} Array of floats representing each component as a float\r\n     */\r\n    getFloatsFromUintRGB: function (rgb)\r\n    {\r\n        var ur = ((rgb >> 16) | 0) & 0xff;\r\n        var ug = ((rgb >> 8) | 0) & 0xff;\r\n        var ub = (rgb | 0) & 0xff;\r\n\r\n        return [ ur / 255, ug / 255, ub / 255 ];\r\n    },\r\n\r\n    /**\r\n     * Check to see how many texture units the GPU supports, based on the given config value.\r\n     * Then tests this against the maximum number of iterations GLSL can support.\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.checkShaderMax\r\n     * @since 3.50.0\r\n     *\r\n     * @param {WebGLRenderingContext} gl - The WebGLContext used to create the shaders.\r\n     * @param {number} maxTextures - The Game Config maxTextures value.\r\n     *\r\n     * @return {number} The number of texture units that is supported by this browser and GPU.\r\n     */\r\n    checkShaderMax: function (gl, maxTextures)\r\n    {\r\n        if (!maxTextures || maxTextures === -1)\r\n        {\r\n            maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n        }\r\n\r\n        var shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\r\n        var fragTemplate = [\r\n            'precision mediump float;',\r\n            'void main(void){',\r\n            'float test = 0.1;',\r\n            '%forloop%',\r\n            'gl_FragColor = vec4(0.0);',\r\n            '}'\r\n        ].join('\\n');\r\n\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true)\r\n        {\r\n            var fragmentSrc = fragTemplate.replace(/%forloop%/gi, GenerateSrc(maxTextures));\r\n\r\n            gl.shaderSource(shader, fragmentSrc);\r\n            gl.compileShader(shader);\r\n\r\n            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\r\n            {\r\n                maxTextures = (maxTextures / 2) | 0;\r\n            }\r\n            else\r\n            {\r\n                // valid!\r\n                break;\r\n            }\r\n        }\r\n\r\n        return maxTextures;\r\n    },\r\n\r\n    /**\r\n     * Checks the given Fragment Shader Source for `%count%` and `%forloop%` declarations and\r\n     * replaces those with GLSL code for setting `texture = texture2D(uMainSampler[i], outTexCoord)`.\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.parseFragmentShaderMaxTextures\r\n     * @since 3.50.0\r\n     *\r\n     * @param {string} fragmentShaderSource - The Fragment Shader source code to operate on.\r\n     * @param {number} maxTextures - The number of maxTextures value.\r\n     *\r\n     * @return {string} The modified Fragment Shader source.\r\n     */\r\n    parseFragmentShaderMaxTextures: function (fragmentShaderSource, maxTextures)\r\n    {\r\n        if (!fragmentShaderSource)\r\n        {\r\n            return '';\r\n        }\r\n\r\n        var src = '';\r\n\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            if (i > 0)\r\n            {\r\n                src += '\\n\\telse ';\r\n            }\r\n\r\n            if (i < maxTextures - 1)\r\n            {\r\n                src += 'if (outTexId < ' + i + '.5)';\r\n            }\r\n\r\n            src += '\\n\\t{';\r\n            src += '\\n\\t\\ttexture = texture2D(uMainSampler[' + i + '], outTexCoord);';\r\n            src += '\\n\\t}';\r\n        }\r\n\r\n        fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, maxTextures.toString());\r\n\r\n        return fragmentShaderSource.replace(/%forloop%/gi, src);\r\n    }\r\n};\r\n"],"names":["earcut","data","holeIndices","dim","minX","minY","maxX","maxY","x","y","invSize","hasHoles","length","outerLen","outerNode","linkedList","triangles","next","prev","i","len","list","queue","steiner","push","getLeftmost","sort","compareX","eliminateHole","filterPoints","eliminateHoles","Math","max","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","removeNode","again","p","area","ear","pass","z","zOrder","prevZ","nextZ","q","e","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","a","b","c","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","maxZ","n","intersects","locallyInside","isValidDiagonal","splitPolygon","hole","m","hx","hy","qx","tan","mx","my","tanMin","Infinity","abs","sectorContainsSector","findHoleBridge","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","inside","middleInside","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","min","num","a2","Node","b2","an","bp","this","sum","j","deviation","polygonArea","trianglesArea","flatten","result","vertices","holes","dimensions","holeIndex","d","module","exports","GenerateSrc","maxIfs","src","getTintFromFloats","g","getTintAppendFloatAlpha","rgb","getTintAppendFloatAlphaAndSwap","getFloatsFromUintRGB","checkShaderMax","gl","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","shader","createShader","FRAGMENT_SHADER","fragTemplate","join","fragmentSrc","replace","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","parseFragmentShaderMaxTextures","fragmentShaderSource","toString"],"sourceRoot":""}